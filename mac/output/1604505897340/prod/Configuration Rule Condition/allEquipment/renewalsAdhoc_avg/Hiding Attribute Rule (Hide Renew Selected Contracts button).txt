/*****************************************************************
Function Name : Constraint on Renewal Grouping User cannot select contract lines having different OU or different Currency's.
All selected Contracts shoud belongs to same OU and same Currency
Developer :Ravi Kumar
Description : This Rule returns boolean value when this constrain is triggered
Changes:
07/13/2020 Satyabrata    Viper-926 Adhoc Renewal process enhancements

*****************************************************************/ 
Prev_Operating_Unit = "";
Prev_Currency = "";
Prev_Source = "";
Prev_Cust_Id = "";
arrayRange=range(renewalContractsArrayController_avg);
count=0;
Ncount=0;
counter=0;
OUcount = 0;
Curr_Count = 0;
Source_Count = 0;
Custcount = 0;
primaryCount = 0;
for each in arrayRange{
 if(selectContract_avg[each]==true){
 //VIPER-926 : Start : Added to hide Renew Selected Contracts if Contract is N in Renewal_Allowed colum
 contractnum=contractNumber_avg[each];
 contractresult=bmql("select CONTRACT_NUMBER, RENEWAL_ALLOWED FROM RENEWAL_ASSETS WHERE CONTRACT_NUMBER=$contractnum");
 for res in contractresult
 {
 counter=counter+1;
 if(get(res,"RENEWAL_ALLOWED")=="N"){
 Ncount=Ncount+1;
 }
 }
 if(Ncount==counter and counter<> 0)
 {
  return true;
 }
 //VIPER-926 : END
 if(operatingUnit_avg[each]<>Prev_Operating_Unit and operatingUnit_avg[each] <> ""){
  Prev_Operating_Unit=operatingUnit_avg[each];
  OUcount = OUcount +1;
  if(OUcount > 1){
  break;
  }
 }
 if(currency_avg[each]<>Prev_Currency and currency_avg[each] <> ""){
  Prev_Currency=currency_avg[each];
  Curr_Count = Curr_Count +1;
  if(Curr_Count > 1){
  break;
  }
 }
 if(source_avg[each]<>Prev_Source and source_avg[each] <> ""){
  Prev_Source=source_avg[each];
  Source_Count = Source_Count +1;
  if(Source_Count > 1){
  break;
  }
 }
 if(searchByContractNumber_avg==true){
 if(customerIdcontractarray_avg[each]<>Prev_Cust_Id and customerIdcontractarray_avg[each] <> ""){
  Prev_Cust_Id =customerIdcontractarray_avg[each];
  Custcount = Custcount +1;
  if(Custcount > 1){
  break;
  }
 }
 }
 }
 if(selectPrimary_avg[each]==true){
  primaryCount=primaryCount+1;
   if(primaryCount> 1){
  break;
  }
 }
}



if((OUcount>1) or (Curr_Count>1) or (Source_Count>1) or (Custcount > 1) or (primaryCount> 1) )
{
return true;
}
else{
return false;
}