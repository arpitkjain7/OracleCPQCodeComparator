/********************************************************************
Rule Name: GenerateTrial POC in Word
Description: This BML function is used to generate word document for trial poc with dynamic conditions for section display
Author: Rohit Ranjan
Date: 07/04/2019
Jira Id: 2638 
changes done on 27th Feb 2020 to add product group = SaaS as part of SYMINT-4575
changes done on 23rd March 2020 to comment distributed trail as part of SYMINT-6929 by Shruti
********************************************************************/
newMainframe = 0;
MainframeTrial=0;
distributedTrial=0;
distributedSymTrial = 0;
result="";
dlim="~";
dend="|";


// code written by rohit to set attributes which will be used for conditionalities in trial POC Document 

for line in transactionLine{


  if((line.pL_l== "MF" and line.productGroup_l <> "SaaS") and line.coveredProduct_l == "" and NOT(line.dropProduct_l)){ 
  MainframeTrial = MainframeTrial + 1;
  }
  // changes done on 23rd march 2020 to comment distributed trail as part of SYMINT-6929 by shruti
  /* elif((line.pL_l=="ES" and line.productGroup_l <> "SaaS") and line.coveredProduct_l == "" and NOT(line.dropProduct_l)){ 
  distributedTrial=distributedTrial+1;  
  } */
  //changes done on 27th feb 2020 to add product group = SaaS as part of SYMINT-4575

 // elif(((line.pL_l== "SE" and line.productGroup_l =="Software") OR line.productGroup_l =="SaaS") and line.coveredProduct_l == "" and NOT(line.dropProduct_l)){
  elif((line.pL_l<> "MF" and (line.productGroup_l =="Software" OR line.productGroup_l =="SaaS")) and line.coveredProduct_l == "" and NOT(line.dropProduct_l)){
  distributedSymTrial = distributedSymTrial+1;
  }
  
 }
// Below code is used to generate legal address entity based on OU 
address1="";
address2="";
address3="";

              headerRecord=bmql("Select OU,Address1,Address2,Address3 from BRCM_Headers where OU=$operatingUnit_t");
           
              for eachRecord in headerRecord{
               address1= get(eachRecord,"Address1");
        address2= get(eachRecord,"Address2");
   address3= get(eachRecord,"Address3");
      }
 
  //   Building the return format using string builder            
sb = stringbuilder();
sbappend(sb,"1~mainframeTrial_t~",string(MainframeTrial),"|","1~distributedSymTrial_t~",string(distributedSymTrial),"|");
sbappend(sb,"1~headerLegalAddress_t~",address1,"|","1~headerLegalAddress1_t~",address2,"|","1~headerLegalAddress2_t~",address3,"|");
result = sbtostring(sb);

return result;
/********************************************************************
Rule Name: GenerateTrial POC in Word
Description: This BML function is used to generate word document for trial poc with dynamic conditions for section display
Author: Rohit Ranjan
Date: 07/04/2019
Jira Id: 2638 
changes done on 27th Feb 2020 to add product group = SaaS as part of SYMINT-4575
changes done on 23rd March 2020 to comment distributed trail as part of SYMINT-6929 by Shruti
********************************************************************/
newMainframe = 0;
MainframeTrial=0;
distributedTrial=0;
distributedSymTrial = 0;
result="";
dlim="~";
dend="|";


// code written by rohit to set attributes which will be used for conditionalities in trial POC Document 

for line in transactionLine{


  if((line.pL_l== "MF" and line.productGroup_l <> "SaaS") and line.coveredProduct_l == "" and NOT(line.dropProduct_l)){ 
  MainframeTrial = MainframeTrial + 1;
  }
  // changes done on 23rd march 2020 to comment distributed trail as part of SYMINT-6929 by shruti
  /* elif((line.pL_l=="ES" and line.productGroup_l <> "SaaS") and line.coveredProduct_l == "" and NOT(line.dropProduct_l)){ 
  distributedTrial=distributedTrial+1;  
  } */
  //changes done on 27th feb 2020 to add product group = SaaS as part of SYMINT-4575

 // elif(((line.pL_l== "SE" and line.productGroup_l =="Software") OR line.productGroup_l =="SaaS") and line.coveredProduct_l == "" and NOT(line.dropProduct_l)){
  elif((line.pL_l<> "MF" and (line.productGroup_l =="Software" OR line.productGroup_l =="SaaS")) and line.coveredProduct_l == "" and NOT(line.dropProduct_l)){
  distributedSymTrial = distributedSymTrial+1;
  }
  
 }
// Below code is used to generate legal address entity based on OU 
address1="";
address2="";
address3="";

              headerRecord=bmql("Select OU,Address1,Address2,Address3 from BRCM_Headers where OU=$operatingUnit_t");
           
              for eachRecord in headerRecord{
               address1= get(eachRecord,"Address1");
        address2= get(eachRecord,"Address2");
   address3= get(eachRecord,"Address3");
      }
 
  //   Building the return format using string builder            
sb = stringbuilder();
sbappend(sb,"1~mainframeTrial_t~",string(MainframeTrial),"|","1~distributedSymTrial_t~",string(distributedSymTrial),"|");
sbappend(sb,"1~headerLegalAddress_t~",address1,"|","1~headerLegalAddress1_t~",address2,"|","1~headerLegalAddress2_t~",address3,"|");
result = sbtostring(sb);

return result;