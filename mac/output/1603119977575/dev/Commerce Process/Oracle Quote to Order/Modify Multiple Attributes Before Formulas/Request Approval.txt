/************************************************************************************************************
 Description: This library function is used to populate all the pricing related attributes of line items in a quote.
 Return type: string
 History:     Date          Author            Comment 
       06/02/2019    Kavita Lolla              Initiate approvals for each line level approver
       09/05/2019    Kavita Lolla              Adding stringbuilder to improve performance
       06/26/2019    Keerthivasan       Updating Financial Summary Changes
      07/03/2019    Keerthivasan       BROCAD2-4784 Total Capacity Deviation Changes
      07/09/2019    Kavita Lolla       Line item status "Approved" in batch table while quote is 
           in "Pending Approval" status for renewal quotes
        (Regression defect).
      10/04/2019    M Vamsi   VIPER-438 - Symantec - Installed at on quote lines should be editable
      11/15/2019    M Vamsi    VIPER-502 - SYMANTEC: CPQ- Route New Product discounts at Header
      30/01/2020    Kavita Lolla   SYMINT-4492 - Update Approval Routing logic to include Transaction Type - Upgrade.
      13/02/2020    Kavita Lolla   SYMINT-5533 - ARR Calculation for Upgrade Transaction Type.
      26/03/2020    Adithya Suresh  VIPER-748 - Excluding dropped lines from the financial summary calculations
 ************************************************************************************************************/

result = "|";
status = "PENDING_APPROVER";
sb =  stringbuilder();
//attributes for financial summary
grossContractListPrice =0.0;
discDOffContractListPrice = 0.0;
discPerContractListPrice=0.0;
sumExtProposedNetPriceRequested = 0.0;
sumExtContractListPrice =0.0;
sumExtLineDiscountAmount =0.0;
totalProposedNetPriceUSD=totalProposedNetPriceUSDFloat_t;
totalProposedNetPriceLC=totalProposedNetPriceLC_t;
proposedLicSubFeeNew = 0.0;
proposedLicSubFeeRenew =0.0;
proposedLicSubFeeCapacity =0.0;
proposedLicSubFeeTotal =0.0;
sumEstAnnualizedBookingD =0.0;
sumEstQuarterlyBookingD =0.0;
totalMarginPercent =0.0;
totalMarginDollar =0.0;
sumExtCost=0.0;
sumNewAnnualRenewalValue =0.0;
renewalRateHeader=0.0;
aRRPercent =0.0;
newAnnualRenewalRenew =0.0;
newAnnualRenewalNew =0.0;
newAnnualRenewalCapacity =0.0;
expiringAnnualRenewalRenew =0.0;
expiringAnnualRenewalNew =0.0;
expiringAnnualRenewalCapacity =0.0;
//SYMINT-5533-Begin
newAnnualRenewalUpgrade = 0.0;
expiringAnnualRenewalUpgrade = 0.0;
//SYMINT-5533 -End
sumForNewAnnualRenewal=0.0;
sumForAnnualRenewal =0.0;
proposedSupportNew =0.0;
proposedSupportRenew =0.0;
proposedSupportCapacity =0.0;
proposedSupportTotal =0.0;
// Initializing Attributes for BROCAD2-4874 - Total Capacity Deviation - Start
totalProposedNetPrice = 0.0;
totalExtendedPriorPrice = 0.0;
// Initializing Attributes for BROCAD2-4874 - Total Capacity Deviation - End
sumExpiringAnnualRenewalValue =0.0;
sumPriceUpliftAnnualRenewalValue = 0.0;
prevLevel = 0;
precision = 0;

res1 = bmql("SELECT Precision from Func_Curr_Prec_Map WHERE Functional_Currency=$_system_current_document_currency_pref");

for line in res1{
 precision=atoi(get(line,"Precision"));
}
// attributes for financial summary- end
//Identification of approver roles/users starts here
rtm = routeToMarket_t;
buRole = "";
//Morphing values based on Data table entries for Route to Market.
if(routeToMarket_t == "direct")
{
 rtm = "DIRECT";
}
else
{
 rtm = "INDIRECT";
}
deal="";
accountType = "";

//Morphing values based on Data table entries for Account Type.
if(core_t == "ZCA_CORE"){
 accountType = "Core";
}
else
{
 accountType = "Non-Core";
}
if(startswith(dealType_t,"cAD"))
{
 deal = "ENT";
 buRole = "Strategic Pricing";
}
else
{
 deal = "Other";
 buRole = "Div PM";
}

//SYMINT-4492 - Begin - Updating Transaction Type = Upgrade for Hardware Upgrade quotes
transactionType = "";
for line in transactionLine
{
 
 if(line._part_number <> "" AND line._part_number <> " " AND NOT isnull(line._part_number) AND line._part_number<>"Cust")
 {
  if(line.transactionTypeM_l == "Upgrade")
  {
   transactionType = "Upgrade";
  }
  else
  {
   transactionType = "New";
  }
  break;
 }
}
//SYMINT-4492 - End

for line in transactionLine 
{
              
  if(quoteType_t <> "renewalQuote" and quoteType_t<>"contractQuote" and line._part_number<>"Cust" and line._model_name==""){
   //Satyabrata Acharya; Changing the code to remove temporary fields as the read/write scenarios for site details is no more in scope.
    sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
    sbappend(sb,line._document_number,"~siteID_l~",shipToSiteNumber_t,"|");
    sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
    sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
    sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
   //end of code
   //VIPER-438 Adding the code to populate installed at fields in line level based on the business division and end customer site number ;
     
                           if(businessDivision_t=="Symantec" AND endCustomerSiteNumber_t <> ""){
     if(line.installedAtCustomerNumber_l==line.temporaryInstalledAtCustomerNumber_avg){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",customerERPId_t,"|");
                                                         //output21=sbtostring(sb21);
                                           }
                                           if(line.installedAtCustomerNumber_l==""){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",customerERPId_t,"|");
                                                          //output21=sbtostring(sb21);
                                           }

                                           if(line.installedAtCustomerNumber_l<>"" AND line.installedAtCustomerNumber_l<>line.temporaryInstalledAtCustomerNumber_avg){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",line.installedAtCustomerNumber_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);
                                           }

                                           if(line.siteID_l==line.temporarysiteID_avg or line.siteID_l==""){
                                           sb=sbappend(sb,line._document_number,"~temporarysiteID_avg~",endCustomerSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",endCustomerSiteNumber_t,"|");
                                                          //output23=sbtostring(sb23);
                                           }             
                                           if(line.siteID_l<>"" AND line.siteID_l<>line.temporarysiteID_avg){
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",line.siteID_l,"|");
                                                          //output23=sbtostring(sb23);
                                           //sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",endCustomerSiteNumber_t ,"|");
                                                          //output23=sbtostring(sb23);
                                           sb=sbappend(sb,line._document_number,"~temporarysiteID_avg~",endCustomerSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }

                                           if(line.siteIDStreetAddress_l==line.temporarysiteIDStreetAddress_avg or line.siteIDStreetAddress_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_customer_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDStreetAddress_avg~",_transaction_customer_t_address,"|");
                                                          //output25=sbtostring(sb25);
                                           }

                                           if(line.siteIDStreetAddress_l<>"" AND line.siteIDStreetAddress_l<>line.temporarysiteIDStreetAddress_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",line.siteIDStreetAddress_l,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_customer_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           if(line.siteIDCityStateZip_l==line.temporarysiteIDCityStateZip_avg or line.siteIDCityStateZip_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_customer_t_city,"|");
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDCityStateZip_avg~",_transaction_customer_t_city,"|");
                                           }

                                           if(line.siteIDCityStateZip_l<>"" AND line.siteIDCityStateZip_l<>line.temporarysiteIDCityStateZip_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",line.siteIDCityStateZip_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_customer_t_city,"|");
                                           }

                                           if(line.siteIDZip_l==line.temporarysiteIDZip_avg or line.siteIDZip_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_customer_t_zip,"|");
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDZip_avg~",_transaction_customer_t_zip,"|");
                                           }

                                           if(line.siteIDZip_l<>"" AND line.siteIDZip_l<>line.temporarysiteIDZip_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",line.siteIDZip_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_customer_t_zip,"|");
                                           }
        }
        else  
        {
     if(line.installedAtCustomerNumber_l==line.temporaryInstalledAtCustomerNumber_avg){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",shipToPartyID_t,"|");
                                                         //output21=sbtostring(sb21);
                                           }
                                           if(line.installedAtCustomerNumber_l==""){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",shipToPartyID_t,"|");
                                                          //output21=sbtostring(sb21);
                                           }

                                           if(line.installedAtCustomerNumber_l<>"" AND line.installedAtCustomerNumber_l<>line.temporaryInstalledAtCustomerNumber_avg){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",line.installedAtCustomerNumber_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);
                                           }

                                           if(line.siteID_l==line.temporarysiteID_avg or line.siteID_l==""){
                                           sb=stringbuilder(sb,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",shipToSiteNumber_t,"|");
                                                          //output23=sbtostring(sb23);
                                           }             
                                           if(line.siteID_l<>"" AND line.siteID_l<>line.temporarysiteID_avg){
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",line.siteID_l,"|");
                                                          //output23=sbtostring(sb23);
                                           //sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",shipToSiteNumber_t ,"|");
                                                          //output23=sbtostring(sb23);
                                           sb=sbappend(sb,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }

                                           if(line.siteIDStreetAddress_l==line.temporarysiteIDStreetAddress_avg or line.siteIDStreetAddress_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDStreetAddress_avg~",_transaction_shipTo_t_address,"|");
                                                          //output25=sbtostring(sb25);
                                           }

                                           if(line.siteIDStreetAddress_l<>"" AND line.siteIDStreetAddress_l<>line.temporarysiteIDStreetAddress_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",line.siteIDStreetAddress_l,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           if(line.siteIDCityStateZip_l==line.temporarysiteIDCityStateZip_avg or line.siteIDCityStateZip_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDCityStateZip_avg~",_transaction_shipTo_t_city,"|");
                                           }

                                           if(line.siteIDCityStateZip_l<>"" AND line.siteIDCityStateZip_l<>line.temporarysiteIDCityStateZip_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",line.siteIDCityStateZip_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
                                           }

                                           if(line.siteIDZip_l==line.temporarysiteIDZip_avg or line.siteIDZip_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDZip_avg~",_transaction_shipTo_t_zip,"|");
                                           }

                                           if(line.siteIDZip_l<>"" AND line.siteIDZip_l<>line.temporarysiteIDZip_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",line.siteIDZip_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
                           }
                           }                
   //end of code
  }


 // code for financial summary --start
 //VIPER-748 Excluding dropped lines from the calculations 
  if((line._part_number<>"Cust" OR  line._model_name=="")  and line.dropProduct_l <> true){
  // Calculation of Gross/Contract List Price, Discount $ off Contract/List Price, Discount % off Contract/List Price
  // and Total Proposed Net Price (USD)
     grossContractListPrice = grossContractListPrice + line.extContractListPrice_l;
  if(quoteType_t <> "contractQuote"){
   discDOffContractListPrice = discDOffContractListPrice + round(line.lineDiscountAmount_l,precision);
   sumExtProposedNetPriceRequested = sumExtProposedNetPriceRequested + line.extProposedNetPriceRequested_l; 
      sumExtContractListPrice = sumExtContractListPrice + line.extContractListPrice_l;
   sumExtLineDiscountAmount = sumExtLineDiscountAmount + round(line.extLineDiscountAmount_l,precision);
   if( line.extContractListPrice_l <>0){
   discPerContractListPrice =  (1- ( sumExtProposedNetPriceRequested/ sumExtContractListPrice))*100;
   } 
   // Calculation of Proposed Lic Sub Fee based on Transaction Type - New, Renewal and Capacity
   if(line.transactionTypeM_l == "New" and line.coveredProduct_l == ""){
   proposedLicSubFeeNew = proposedLicSubFeeNew + line.extProposedNetPriceRequested_l;
      } 
      if(line.transactionTypeM_l == "Renew" and line.coveredProduct_l == ""){
    proposedLicSubFeeRenew = proposedLicSubFeeRenew + line.extProposedNetPriceRequested_l;
      } 
      if(line.transactionTypeM_l == "Capacity" and line.coveredProduct_l == ""){
    proposedLicSubFeeCapacity = proposedLicSubFeeCapacity + line.extProposedNetPriceRequested_l;
      }
   sumEstAnnualizedBookingD = sumEstAnnualizedBookingD + line.estAnnualizedBooking_l;
      sumEstQuarterlyBookingD = sumEstQuarterlyBookingD + line.estQuarterlyRevenue_l;
   sumExtCost = sumExtCost + line.extCost_l;
   if( sumExtProposedNetPriceRequested <> 0){
   totalMarginPercent = ( (sumExtProposedNetPriceRequested -sumExtCost)/(sumExtProposedNetPriceRequested)) *100;
         }
      totalMarginDollar = (sumExtProposedNetPriceRequested - sumExtCost);
   sumNewAnnualRenewalValue = sumNewAnnualRenewalValue +line.newAnnualRenewalValue_l;
   //sumExpiringAnnualRenewalValue =sumExpiringAnnualRenewalValue +line.expiringAnnualRenewal_l;
   sumPriceUpliftAnnualRenewalValue = sumPriceUpliftAnnualRenewalValue + line.priceUpliftAnnualRenewalValue_l;
   
   // Setting Days for BROCAD2-4874 - Total Capacity Deviation - Start
   Days=line.totalNewSupportTermDays_l;
   if( line.transactionTypeM_l== "Capacity")
   {
    // Calculating Total Proposed Net Price and Total Extended Prior Price for BROCAD2-4874 - Total Capacity Deviation - Start
   //Sanity Issue -17: Change Begins- 30July2019- Shivendra
    
             //totalProposedNetPrice = totalProposedNetPrice + line.totalValueUSD;
             totalProposedNetPrice = totalProposedNetPrice + line.extProposedNetPriceRequested_l;
              //Sanity Issue -17: Change Ends- 30July2019- Shivendra
             totalExtendedPriorPrice = totalExtendedPriorPrice + (line.contractedOrPriorLicenseSubFee_l*(Days/365.0)*line._price_quantity);
   }   
         // Setting Days for BROCAD2-4874 - Total Capacity Deviation - End
   
   // Calculation of Proposed Support Fee based on Transaction Type - New, Product and Capacity
   if(line.transactionTypeM_l == "New" and line.coveredProduct_l <> "")
      {
    proposedSupportNew = proposedSupportNew + line.extProposedNetPriceRequested_l;
      }
      if(line.transactionTypeM_l == "Renew" and line.coveredProduct_l <> "")
   {
    proposedSupportRenew = proposedSupportRenew + line.extProposedNetPriceRequested_l;
   }
   if(line.transactionTypeM_l == "Capacity" and line.coveredProduct_l <> "")
   {
    proposedSupportCapacity = proposedSupportCapacity + line.extProposedNetPriceRequested_l;
   }
  }
    }
    
    //VIPER-748 Including dropped lines for total EAR
    if(line._part_number<>"Cust" OR  line._model_name==""){
     if(quoteType_t <> "contractQuote"){
      sumExpiringAnnualRenewalValue =sumExpiringAnnualRenewalValue +line.expiringAnnualRenewal_l;
      
      // Calculation of Expiring Annual Renewal based on Transaction Type - New, Renewal and Capacity and Quote Type - Renewal
   if (quoteType_t =="renewalQuote" )
      {
           if( line.transactionTypeM_l== "Renew")
        {
             expiringAnnualRenewalRenew = expiringAnnualRenewalRenew + line.expiringAnnualRenewal_l;
             newAnnualRenewalRenew = newAnnualRenewalRenew + line.newAnnualRenewalValue_l;
           }
           if( line.transactionTypeM_l== "New")
     {
             expiringAnnualRenewalNew = expiringAnnualRenewalNew + line.expiringAnnualRenewal_l;
             newAnnualRenewalNew = newAnnualRenewalNew + line.newAnnualRenewalValue_l;
           }
           if( line.transactionTypeM_l== "Capacity")
     {
             expiringAnnualRenewalCapacity = expiringAnnualRenewalCapacity + line.expiringAnnualRenewal_l;
             newAnnualRenewalCapacity = newAnnualRenewalCapacity + line.newAnnualRenewalValue_l;
    
           }
             //SYMINT-5533-Begin - Computing Annual Renewal value for Upgrade lines.
           if(line.transactionTypeM_l == "Upgrade")
           {
            expiringAnnualRenewalUpgrade = expiringAnnualRenewalUpgrade + line.expiringAnnualRenewal_l;
            newAnnualRenewalUpgrade = newAnnualRenewalUpgrade + line.newAnnualRenewalValue_l;
           }
           //SYMINT-5533-End
         }
      
     }
    } 
 
 //Approver assignment for Line Level Approval. Hence only for standard quotes.
 // if Pricing DDR is not triggered, approver has to be assigned before triggering the flow.
 if(dDRFlag_t == false){
  part="";
  workflow= "";
  flag = true;
  quoteFlag = true;
  
  levelup = approvalLevelCompleted_avg + 1;
  
    sbapprover = stringbuilder();
    workflow = "pending_approval";
    
     quoteFlag = false;
     if(line._part_number <> ""){
      part = line._part_number;
      //Changes made as part of VIPER-502 - Start
      //The logic is to determine the highest level of approval that a quote is eligible for by iterating over every line in the quote.
       if(line.proposedNetUnitPriceRequested_l >= line.salesMin1_l)
        {
         levelup = 0;
        }
       elif(line.proposedNetUnitPriceRequested_l >= line.salesMin2_l and line.proposedNetUnitPriceRequested_l < line.salesMin1_l )
        {
         levelup = 1;
        }
       elif(line.proposedNetUnitPriceRequested_l >= line.salesMin3_l and line.proposedNetUnitPriceRequested_l < line.salesMin2_l )
        {
         levelup = 2;
        }
       else
        {
         levelup = 3;
        }
       if(levelup > prevLevel)
        {
         prevLevel = levelup;
        }
       //Changes made as part of VIPER-502 - Start//Changes made as part of VIPER-502 - END 
       
     }
    

  
  
 }
}
if(startswith(quoteType_t,"standard"))
{
//Fetching all three level eligible roles from data table and storing in the attributes.
 recordSet = bmql("select Level1_Approver_Role, Level2_Approver_Role, Level3_Approver_Role from BRCM_Approver_Roles where Route_To_Market = $rtm and Account_Type = $accountType and Deal_Type = $deal and Transaction_Type = $transactionType");
 sblevelRole1 = stringbuilder();
 sblevelRole2 = stringbuilder();
 sblevelRole3 = stringbuilder();
 
 for record in recordSet{
  sbappend(sblevelRole1 ,get(record,"Level1_Approver_Role"));
  sbappend(sblevelRole2 , get(record,"Level2_Approver_Role"));
  sbappend(sblevelRole3 , get(record,"Level3_Approver_Role"));
 }
 levelRole1 = sbtostring(sblevelRole1);
 levelRole2 = sbtostring(sblevelRole2);
 levelRole3 = sbtostring(sblevelRole3);
 sbappend(sb,"1~approverRoleLevel1_t~",levelRole1,"|","1~approverRoleLevel2_t~" , levelRole2 , "|","1~approverRoleLevel3_t~" , levelRole3 , "|");
 sblevel1 = stringbuilder();
 sblevel2 = stringbuilder();
 sblevel3 = stringbuilder();
 buRole = levelRole3;
 salesRegion = quoteOwnerSubRegion_t;
 salesRep = salesRepId_t;
//Identifying individual approvers for 1st 2 levels and storing in the attributes.
 approverRoles = String[]{levelRole1,levelRole2,levelRole3};
 recordSet = bmql("select User_Id, User_Name, User_Role from Approval_PF_Mapping where AssignedTo_RepId = $salesRep  and User_Role in $approverRoles");
 
 for record in recordSet{
  role = get(record,"User_Role");
  if(NOT isnull(role)){
   if(levelRole1 == role)
   {
    sbappend( sblevel1 , ","  , get(record,"User_Id"));
   }
   if(levelRole2 == role)
   {
    sbappend(sblevel2, "," , get(record,"User_Id"));
   }
/*   if(levelRole3 == role)
   {
    sbappend(sblevel3, "," , get(record,"User_Id"));
   }*/
  }
 }
 //Changes made as part of VIPER-502 - Start
 //fetching approver based on the region for 3rd level of approval.
 //Assigning all the approvers corresponding to their level and assigning them to the respective attributes. 
 region = quoteOwnerSubRegion_t;
 recordSet = bmql("select distinct User_Id, User_Name, User_Role from Approval_PF_Mapping where Assigned_Region = $region  and User_Role = $levelRole3");
 
 for record in recordSet{
  role = get(record,"User_Role");
  if(NOT isnull(role)){
   sbappend( sblevel3 , ","  , get(record,"User_Id"));
  }
 }
 level1 = sbtostring(sblevel1);
 level2 = sbtostring(sblevel2);
 level3 = sbtostring(sblevel3);
 sbappend(sb,"1~approverLevel1_t~" , level1 , "|","1~approverLevel2_t~" , level2 , "|", "1~approverLevel3_t~" , level3 , "|");
 //Changes made as part of VIPER-502 - END
}
sbappend(sb, "1~status_t~" , status ,"|" , "1~approvalLevelCompleted_avg~" , String(prevLevel) , "|");
proposedLicSubFeeTotal=proposedLicSubFeeCapacity + proposedLicSubFeeNew +proposedLicSubFeeRenew;
proposedSupportTotal =proposedSupportCapacity +proposedSupportNew + proposedSupportRenew;

// Calculation of Renewal Rate based on New Annual Renewal and Expiring Annual Renewal
if(expiringAnnualRenewalRenew <> 0.0)
{     
    renewalRateHeader =   ( newAnnualRenewalRenew/expiringAnnualRenewalRenew)*100 ;
}
//SYMINT-5533-Begin - Including New Annual Renewal Values and Expiring Annual Renewal Values for Upgrade lines.
//sumForAnnualRenewal= (expiringAnnualRenewalRenew + expiringAnnualRenewalNew + expiringAnnualRenewalCapacity) ;
//sumForNewAnnualRenewal = (newAnnualRenewalCapacity + newAnnualRenewalNew + newAnnualRenewalRenew);
sumForAnnualRenewal= (expiringAnnualRenewalRenew + expiringAnnualRenewalNew + expiringAnnualRenewalCapacity + expiringAnnualRenewalUpgrade) ;
sumForNewAnnualRenewal = (newAnnualRenewalCapacity + newAnnualRenewalNew + newAnnualRenewalRenew + newAnnualRenewalUpgrade);
//SYMINT-5533-End
// Calculation of ARR% based on New Annual Renewal and Expiring Annual Renewal
if(sumForAnnualRenewal <> 0.0)
{
    aRRPercent = (sumForNewAnnualRenewal / sumForAnnualRenewal)*100; 
}

/*
exch=string(currencyExchange_t);
EARUSD=0.0;
EARLC=sumExpiringAnnualRenewalValue;
if(atof(exch) <> 0)
{
EARUSD=EARUSD + (EARLC/atof(exch));
} */

// code for financial summary --end

// Financial Summary Attributes -- Start
 sbappend(sb,"1~grossContractListPrice_t~" , string(grossContractListPrice) , "|");
 sbappend(sb,"1~discountOffContractListPrice_t~" , string(discDOffContractListPrice) , "|");
 sbappend(sb,"1~discountPercentOffContractListPrice_t~" , string(discPerContractListPrice) , "|");
 sbappend(sb,"1~extLineDiscountAmount_t~" , string(sumExtLineDiscountAmount) , "|");
 sbappend(sb,"1~totalProposedNetPriceUSDFS_t~" , string(totalProposedNetPriceUSD) , "|");
 sbappend(sb,"1~totalProposedNetPriceLCFS_t~" , string(totalProposedNetPriceLC) , "|");
 sbappend(sb,"1~proposedLicSubFeeNewProduct_t~" , string(proposedLicSubFeeNew), "|");
 sbappend(sb,"1~proposedLicSubFeeRenewal_t~" , string(proposedLicSubFeeRenew) , "|");
 sbappend(sb,"1~proposedLicSubFeeCapacity_t~" ,string(proposedLicSubFeeCapacity) , "|");
 sbappend(sb,"1~proposedLicSubFeeGrandTotal_t~" , string(proposedLicSubFeeTotal), "|");
 sbappend(sb,"1~estAnnualizedBooking_t~" , string(sumEstAnnualizedBookingD) , "|");
 sbappend(sb,"1~estQuarterlyBooking_t~" ,  string(sumEstQuarterlyBookingD) , "|");
 sbappend(sb,"1~totalMarginPercent_t~" , string(totalMarginPercent) , "|");
 sbappend(sb,"1~totalMarginDollar_t~" , string(totalMarginDollar) , "|");
 sbappend(sb,"1~totalCOGS_t~" , string(sumExtCost) , "|");
 sbappend(sb,"1~newAnnualRenewalValue_t~" , string(sumNewAnnualRenewalValue) , "|");
 sbappend(sb,"1~renewalRate_t~" , string(renewalRateHeader) , "|");
 sbappend(sb,"1~aRR_t~" , string(aRRPercent) , "|");
 sbappend(sb,"1~proposedSupportNewProduct_t~" , string(proposedSupportNew) , "|");
 sbappend(sb,"1~proposedSupportRenewal_t~" , string(proposedSupportRenew) , "|");
 sbappend(sb,"1~proposedSupportCapacity_t~" , string(proposedSupportCapacity) , "|");
 sbappend(sb,"1~proposedSupportFeeGrandTotal_t~" ,  string(proposedSupportTotal) , "|");
 sbappend(sb,"1~expiringAnnualRenewalValue_t~" , string(sumExpiringAnnualRenewalValue) , "|");
 sbappend(sb,"1~priceUpliftAnnualRenewalValue_t~" , string(sumPriceUpliftAnnualRenewalValue) , "|");
 // Setting the final value for BROCAD2-4874 - Total Capacity Deviation
 sbappend(sb,"1~totalCapacityDeviation_t~" , string(totalExtendedPriorPrice - totalProposedNetPrice) , "|");
         // sbappend(sb,"1~expiringAnnualRenewalValue_USD_t~" , string(EARUSD) , "|");
        // Financial Summary Attributes -- End
         sbappend(sb,commerce.setExpirationDateOnQuoteHeader_brcm(),"1~status_t~" , status ,"|");

result = sbtostring(sb);
return result ;