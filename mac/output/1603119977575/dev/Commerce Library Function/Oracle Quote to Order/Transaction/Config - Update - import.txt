/*********************************************************************
Function Name: updateTransaction - import parts
Description: This library function is used to update existing lines to the quote
Author: Shruti Sawla
User Story #:UID-101
Date: 15th dec 2018
******************************Change Log*****************************
edited by Shruti on 25-Feb-2019 for setting some more line level attributes
*********************************************************************/
//import the CSV file

dropProduct="";
value="";
if(importQuoteDetails_t==""){
value="";
}
else{ 
mainattachment = getattachmentdata(importQuoteDetails_t);

value = "";

//read the CSV and decode it
content= replace(decodebase64(get(mainattachment ,"filecontent", "string")),"\n","@@");
if(content <> ""){


//declaring array
fileArray = string[]; // split the file and store the value
lineArray = string[]; // store quote line parts
jsonObj = json(); 
jsonAry = jsonarray(); //extra lines from the file that needs to be added to the quote
jsonAryUpdate = string[]; //lines for update
linesFromFile = string[]; 
partArray = string[];


// fetching line item data for partNumber/documentNumber
for line in transactionLine{
 append(lineArray,line._document_number);
 append(partArray,line._part_number);
  
} 


// reading the imported file, split it and form json structure for the data
fileArray =split((substring(content,0,len(content)-2)),"@@");
cnt = 0;
for each in fileArray{
 val = split(each,",");
 if(find(val[0],"Line Number") > -1){
  cnt = 1;
  }
 elif(cnt == 1){
 // form the json structure for the imported file
  if(val[1] <> ""  AND val[1] <> " " AND NOT(isnull(val[1]))){
 jsonput(jsonObj,"partNumber",val[1]);
 }
 if(val[2] <> ""  AND val[2] <> " " AND NOT(isnull(val[2])) AND isnumber(val[2]) ){
 jsonput(jsonObj,"quantity",val[2]);
 }
 if(val[3] <> ""  AND val[3] <> " " AND NOT(isnull(val[3])) ){
 jsonput(jsonObj,"hiddenPrice_l",val[3]);
 }
 if(val[4] <> ""  AND val[4] <> " " AND NOT(isnull(val[4])) ){
 jsonput(jsonObj,"extContractListPrice_l",val[4]);
 }
 if(val[5] <> ""  AND val[5] <> " " AND NOT(isnull(val[5])) ){
 jsonput(jsonObj,"proposedNetUnitPriceRequested_l",val[5]);
 }
 if(val[6] <> ""  AND val[6] <> " " AND NOT(isnull(val[6])) ){
 jsonput(jsonObj,"extProposedNetPriceRequested_l",val[6]);
 }
 if(val[8] <> ""  AND val[8] <> " " AND NOT(isnull(val[8]))){
 jsonput(jsonObj,"productType_l",val[8]);
 }
 if(val[9] <> ""  AND val[9] <> " " AND NOT(isnull(val[9]))){
 jsonput(jsonObj,"transactionType_l",val[9]);
 }
 if(val[10] <> ""  AND val[10] <> " " AND NOT(isnull(val[10]))){
 jsonput(jsonObj,"licenseType_l",val[10]);
 }
 if(val[11] <> ""  AND val[11] <> " " AND NOT(isnull(val[11]))){
 jsonput(jsonObj,"licenseMetric_l",val[11]);
 }
 
 if(val[12] <> ""  AND val[12] <> " " AND NOT(isnull(val[12]))){
 jsonput(jsonObj,"enterEnvironment_l",val[12]);
 
 }
 if(val[13] <> ""  AND val[13] <> " " AND NOT(isnull(val[13]))){
 jsonput(jsonObj,"languageRequired_l",val[13]);
 }
 if(val[14] <> ""  AND val[14] <> " " AND NOT(isnull(val[14]))){
 jsonput(jsonObj,"supportType_l",val[14]);
 }
  if(val[15]<> BRCM_blankDate_t)
 {
 jsonput(jsonObj,"effectiveStartDate_l",val[15]);
 }
 
 
 
 
 if(val[16]<> BRCM_blankDate_t)
 {
 jsonput(jsonObj,"lineExpirationDate_l",val[16]);//datetostr(strtodate(val[16]);//,"YYYY-MM-dd 00:00:00"),"YYYY-MM-dd 00:00:00"));
 }
 
  
 if(val[17] <> ""  AND val[17] <> " " AND NOT(isnull(val[17]))){
 jsonput(jsonObj,"requestedDiscount_l",val[17]);
 }
 if(val[18] <> ""  AND val[18] <> " " AND NOT(isnull(val[18]))){
 jsonput(jsonObj,"businessDivision_l",val[18]);
 }
 
 if(val[19]<> BRCM_blankDate_t)
 {
 jsonput(jsonObj,"contractStartDate_l",val[19]); }
 if(val[20]<> BRCM_blankDate_t)
 {
 jsonput(jsonObj,"contractEndDate_l",val[20]);
 }
 
  if(val[21] <> ""  AND val[21] <> " " AND NOT(isnull(val[21]))){
 jsonput(jsonObj,"installedAtCustomerNumber_l",val[21]);
 }
 if(val[22] <> ""  AND val[22] <> " " AND NOT(isnull(val[22]))){
 jsonput(jsonObj,"siteID_l",val[22]);
 }
 if(val[23] <> ""  AND val[23] <> " " AND NOT(isnull(val[23]))){
 jsonput(jsonObj,"dropProduct_l",val[23]);
 }
 if(val[24] <> ""  AND val[24] <> " " AND NOT(isnull(val[24]))){
 jsonput(jsonObj,"dropReason_l",val[24]);
 }
 if(val[25] <> ""  AND val[25] <> " " AND NOT(isnull(val[25]))){
 jsonput(jsonObj,"existingQuantity_l",val[25]);
 }
 if(val[26] <> ""  AND val[26] <> " " AND NOT(isnull(val[26]))){
 jsonput(jsonObj,"contractedOrPriorDealValue_l",val[26]);
 }
 if(val[27] <> ""  AND val[27] <> " " AND NOT(isnull(val[27]))){
 jsonput(jsonObj,"internalComments_l",val[27]);
 }
 if(val[28] <> ""  AND val[28] <> " " AND NOT(isnull(val[28]))){
 jsonput(jsonObj,"cPN_l",val[28]);
 }
 if(val[29] <> ""  AND val[29] <> " " AND NOT(isnull(val[29]))){
 jsonput(jsonObj,"cPNRequired_l",val[29]);
 }
 if(val[30] <> ""  AND val[30] <> " " AND NOT(isnull(val[30]))){
 jsonput(jsonObj,"_document_number",val[30]);
 }
  ret = jsontostr(jsonObj);
  append(linesFromFile,ret);

  }
 else{
  continue;
  }
}



// comparing line item with the imported excel data
cnt = 0;

if (isempty(partArray))
{
for each in LinesFromFile
 {
 if(each<>"" or each<>" " or each <> "null" or not (isnull(each))){
  jsonarrayappend(jsonAry,json(each));
  }
 }
}
else
{

  for each in LinesFromFile
  { 
  
  jsonObj1 = json(each);
  
  val1 = jsonget(jsonObj1,"partNumber");
  
   if(partArray[cnt] == val1){
   
    append(jsonAryUpdate,each);
    cnt= cnt + 1;
    
    

    }
   else{ 
   
   cnt = cnt + 1;
   continue;
    }
  }
}


//code for calling update transaction for soap v2
dictUpdate= dict("string");
userName = "";
pwd = "";
url = "";
trans = "";
fileLocation ="";
// put data in dictionary
put(dictUpdate,"bs_Id",bs_id);
put(dictUpdate,"companyName",_system_company_name);
// fetch username,password,fileLocation and url from data table for soap call
 resultSet = bmql("SELECT Username,Password,File_Location,SoapEndpoint FROM INT_SYSTEM_DETAILS WHERE System='IMPORT_UPDATE'");
 for vals in resultSet{
 userName = get(vals,"Username");
  pwd = get(vals,"Password");
  fileLocation = get(vals,"File_Location");
  url = get(vals,"SoapEndpoint");
 }
 // put data in dictionary
put(dictUpdate,"companyName",_system_company_name);
put(dictUpdate,"userName",userName);
put(dictUpdate,"pwd",pwd);

for each in jsonAryUpdate{

line = json(each);

trans = trans + "<bm:transactionLine bm:bs_id=\""+bs_id+"\" bm:buyer_company_name=\""+_system_company_name+"\" bm:buyer_user_name=\""+userName+"\" bm:currency_pref=\"USD\" bm:data_type=\"3\" bm:document_name=\"Transaction Line\" bm:document_number=\""+jsonget(line,"_document_number")+"\" bm:document_var_name=\"transactionLine\" bm:process_var_name=\"oraclecpqo\" bm:supplier_company_name=\""+_system_company_name+"\">";
   trans = trans+ "<bm:_document_number>"+jsonget(line,"_document_number")+"</bm:_document_number>";
   trans = trans + "<bm:_price_book_var_name>_default_price_book</bm:_price_book_var_name>";
   trans = trans +  "<bm:_price_quantity>"+jsonget(line,"quantity")+"</bm:_price_quantity>";
    trans = trans +  "<bm:requestedDiscount_l>"+jsonget(line,"requestedDiscount_l")+"</bm:requestedDiscount_l>";
    
     trans = trans +  "<bm:hiddenPrice_l>"+jsonget(line,"hiddenPrice_l")+"</bm:hiddenPrice_l>";
  
   trans = trans +  "<bm:transactionType_l>"+jsonget(line,"transactionType_l")+"</bm:transactionType_l>";
   
  if(jsonget(line,"licenseType_l") <> "" AND jsonget(line,"licenseType_l") <> " " AND Not(isnull(jsonget(line,"licenseType_l")))){
   trans = trans +  "<bm:licenseType_l>"+jsonget(line,"licenseType_l")+"</bm:licenseType_l>";
  }
 
    if(jsonget(line,"licenseMetric_l") <> "" AND jsonget(line,"licenseMetric_l") <> " " AND Not(isnull(jsonget(line,"licenseMetric_l")))){
   trans = trans +  "<bm:licenseMetric_l>"+jsonget(line,"licenseMetric_l")+"</bm:licenseMetric_l>";
  }
   if(jsonget(line,"contractStartDate_l") <> "" AND jsonget(line,"contractStartDate_l") <> " " AND Not(isnull(jsonget(line,"contractStartDate_l")))){
   trans = trans +  "<bm:contractStartDate_l>"+jsonget(line,"contractStartDate_l")+"</bm:contractStartDate_l>";
  }
   if(jsonget(line,"contractEndDate_l") <> "" AND jsonget(line,"contractEndDate_l") <> " " AND Not(isnull(jsonget(line,"contractEndDate_l")))){
   trans = trans +  "<bm:contractEndDate_l>"+jsonget(line,"contractEndDate_l")+"</bm:contractEndDate_l>";
  }
  //done by rohit ranjan
  if(jsonget(line,"effectiveStartDate_l") <> "" AND jsonget(line,"effectiveStartDate_l") <> " " AND Not(isnull(jsonget(line,"effectiveStartDate_l")))){
   trans = trans +  "<bm:effectiveStartDate_l>"+jsonget(line,"effectiveStartDate_l")+"</bm:effectiveStartDate_l>";
  }
   if(jsonget(line,"lineExpirationDate_l") <> "" AND jsonget(line,"lineExpirationDate_l") <> " " AND Not(isnull(jsonget(line,"lineExpirationDate_l")))){
   trans = trans +  "<bm:lineExpirationDate_l>"+jsonget(line,"lineExpirationDate_l")+"</bm:lineExpirationDate_l>";
  }
   //ends..
 
  if(jsonget(line,"enterEnvironment_l") <> "" AND jsonget(line,"enterEnvironment_l") <> " " AND Not(isnull(jsonget(line,"enterEnvironment_l")))){
   trans = trans +  "<bm:enterEnvironment_l>"+jsonget(line,"enterEnvironment_l")+"</bm:enterEnvironment_l>";
  }
 
  if(jsonget(line,"languageRequired_l") <> "" AND jsonget(line,"languageRequired_l") <> " " AND Not(isnull(jsonget(line,"languageRequired_l")))){
   trans = trans +  "<bm:languageRequired_l>"+jsonget(line,"languageRequired_l")+"</bm:languageRequired_l>";
  }
 
  if(jsonget(line,"supportType_l") <> "" AND jsonget(line,"supportType_l") <> " " AND Not(isnull(jsonget(line,"supportType_l")))){
   trans = trans +  "<bm:supportType_l>"+jsonget(line,"supportType_l")+"</bm:supportType_l>";
  }
 
  if(jsonget(line,"installedAtCustomerNumber_l") <> "" AND jsonget(line,"installedAtCustomerNumber_l") <> " " AND Not(isnull(jsonget(line,"installedAtCustomerNumber_l")))){
   trans = trans +  "<bm:installedAtCustomerNumber_l>"+jsonget(line,"installedAtCustomerNumber_l")+"</bm:installedAtCustomerNumber_l>";
  }
  if(jsonget(line,"siteID_l") <> "" AND jsonget(line,"siteID_l") <> " " AND Not(isnull(jsonget(line,"siteID_l")))){
   trans = trans +  "<bm:siteID_l>"+jsonget(line,"siteID_l")+"</bm:siteID_l>";
  }
  
 if(jsonget(line,"dropProduct_l") =="TRUE" or jsonget(line,"dropProduct_l") =="FALSE" ) {
  dropProduct=lower(jsonget(line,"dropProduct_l"));
  
   trans = trans +  "<bm:dropProduct_l>"+dropProduct+"</bm:dropProduct_l>";
  }
  
  if(jsonget(line,"dropReason_l") <> "" AND jsonget(line,"dropReason_l") <> " " AND Not(isnull(jsonget(line,"dropReason_l")))){
   trans = trans +  "<bm:dropReason_l>"+jsonget(line,"dropReason_l")+"</bm:dropReason_l>";
  }
  
  
    if(jsonget(line," existingQuantity_l") <> "" AND jsonget(line," existingQuantity_l") <> " " AND Not(isnull(jsonget(line," existingQuantity_l")))){
   trans = trans +  "<bm: existingQuantity_l>"+jsonget(line," existingQuantity_l")+"</bm:existingQuantity_l>";
  }
  
   if(jsonget(line,"contractedOrPriorDealValue_l") <> "" AND jsonget(line,"contractedOrPriorDealValue_l") <> " " AND Not(isnull(jsonget(line,"contractedOrPriorDealValue_l")))){
   trans = trans +  "<bm:contractedOrPriorDealValue_l>"+jsonget(line,"contractedOrPriorDealValue_l")+"</bm:contractedOrPriorDealValue_l>";
  }
 
  if(jsonget(line,"internalComments_l") <> "" AND jsonget(line,"internalComments_l") <> " " AND Not(isnull(jsonget(line,"internalComments_l")))){
   trans = trans +  "<bm:internalComments_l>"+jsonget(line,"internalComments_l")+"</bm:internalComments_l>";
  }
   if(jsonget(line,"cPN_l") <> "" AND jsonget(line,"cPN_l") <> " " AND Not(isnull(jsonget(line,"cPN_l")))){
   trans = trans +  "<bm:cPN_l>"+jsonget(line,"cPN_l")+"</bm:cPN_l>";
  }
  if(jsonget(line,"cPNRequired_l") <> "" AND jsonget(line,"cPNRequired_l") <> " " AND Not(isnull(jsonget(line,"cPNRequired_l")))){
   trans = trans +  "<bm:cPNRequired_l>"+jsonget(line,"cPNRequired_l")+"</bm:cPNRequired_l>";
  }
  
   trans = trans + "</bm:transactionLine>";
           
}
   
put(dictUpdate,"forLoop",trans);
// call apply template to read the xml
retVal = applytemplate(fileLocation,dictUpdate,"Not_Found");
retVal = replace(retVal,"&lt;","<");
retVal = replace(retVal,"&gt;",">");
retVal = replace(retVal,"&quot;","\"");


// post the data to the webservice
retVal1 = urldatabypost(url,retVal,"ERROR");

if(retVal1=="ERROR"){

value="ERROR";

}


value = value;

}
else{
value = "";
}
}


return value;