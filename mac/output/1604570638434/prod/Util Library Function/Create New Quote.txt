/************************************************
/Rule Name: Create Quote
/Description: On click of this action all the entitlements that are expiring in 90 or 180 days will be renewed
/Author: M Vamsi Krishna
/Creation Date: 21-Jan-2019
History:
 Date          Author            Comment 
 25/01/2019    Ravi   Auto create Renewal quotes in local currency based on Asset data as part of BROCAD2-1629
 17/02/2019    Ravi      Added additional Attributes License Type / Env Type /License metric / unit price /  EAR /  Total qty / 
     Prior Contract number to populate in Renewal Quotes.
 07/01/2019    M Vamsi   Added to include Bill To ERP in the logic while creating Opty for auto renewal quote.
 08/02/2019    M Vamsi    VIPER - 281 - Deal term in Renewal Quotes is coming as 12.03 months whereas it should be 12 months
 04/16/2020    M Vamsi   VIPER-778 - Resolve 20A upgrade issue
*/
supportPart = "";
Quantity="";
quoteRequest= "";
payload = dict("string");
username = "";
password = "";
quoteNumber = "";
fileLocation = "";
soapendpoint = "";
jsonObj = json();
transactionID_t = "";
usernameFlagUpdate = "";
passwordFlagUpdate = "";
fileLocationFlagUpdate = "";
soapendpointFlagUpdate = "";
usernameFlagDeploy = "";
passwordFlagDeploy = "";
fileLocationFlagDeploy = "";
soapendpointFlagDeploy = "";
partItemstring = "";
transactionID="";
payload_1 =dict("string");
defaultErrorMessage_1="";
createtransactionRequest = "";
headersDict = dict("string"); 
currentsystemDate = datetostr(getdate());
contractStartDate_1 = "";
contractStartDate_1_str = "";
response="";
recordUpdateString = "";
linecurrency = "";
dealType = "";
licenseeNum ="";
billCustNumber = "";
endCustomerID = "";
optyID = "";
optyNumber = "";
startDate = "";
paymentTerm = "";
coreAccount  = "";
if(jsonarraysize(TransactionArray) > 0)
{
//retrieving username and password for web service authentication, file loaction and enp point URL from data table for the corresponding function call 
result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_CREATE_TRANSACTION'");
for r in result
{
username = get(r,"Username");
password = get(r,"Password");
fileLocation = get(r,"File_Location");
soapendpoint = get(r,"SoapEndpoint");
}
jsonTransactionArrayIndex = range(jsonarraysize(TransactionArray));
for eachIndex1 in jsonTransactionArrayIndex{
jsonObj = jsonarrayget(TransactionArray, eachIndex1, "json");
//jsonObj = json(each);
partNo = jsonget(jsonObj,"partNumber");
qty =jsonget(jsonObj,"existingQuantity");
linecurrency = jsonget(jsonObj,"linecurrency");
if(jsonget(jsonObj ,"ContractStartDate") <> "" and NOT isnull(jsonget(jsonObj ,"ContractStartDate")))
{
contractStartDate = adddays(strtojavadate(jsonget(jsonObj ,"ContractStartDate"),"yyyy-MM-dd"),1);
stringStartDate = datetostr(contractStartDate,"yyyy-MM-dd");
startDate = datetostr(contractStartDate,"yyyy-MM-dd");
}
dealType = jsonget(jsonObj,"dealType");
dealType = dealType +"~"+ linecurrency +"~"+startDate;
licenseeNum = jsonget(jsonObj,"licenseAccountNo");
//added as part of enhancement 5396
billCustNumber = jsonget(jsonObj,"billCustNumber");
licenseeNum = licenseeNum + "~" + billCustNumber;
partItemstring = partItemstring +"<bm:partItem>";
partItemstring = partItemstring +"<bm:part>"+partNo+"</bm:part>";
partItemstring = partItemstring +"<bm:quantity>"+qty+"</bm:quantity>";
partItemstring = partItemstring +"<bm:price_book_var_name>_default_price_book</bm:price_book_var_name>";
partItemstring = partItemstring +"</bm:partItem>";
}
//Forming Create Transaction Payload
put(payload_1,"USERNAME", username);
put(payload_1,"PASSWORD", password);
put(payload_1,"PASSWORD", password);
put(payload_1,"forloop", partItemstring);
put(payload_1,"functionalcurrency",linecurrency);
//Remove junk characters from payload
createtransactionRequest=applytemplate(fileLocation,payload_1,defaultErrorMessage_1);
createtransactionRequest = replace(createtransactionRequest,"&lt;","<");
createtransactionRequest= replace(createtransactionRequest,"&gt;",">");
createtransactionRequest = replace(createtransactionRequest,"&quot;","\"");
//Trigger the web service to create transaction

response = urldatabypost(soapendpoint,createtransactionRequest, "error",headersDict);

//Retrieving Transaction_ID from response after triggering Create Transaction Web service successfully
if(find(response,"Success") == -1)
{
 transactionID = substring(response,find(response,"<faultstring>") + len("<faultstring>"),find(response,"</faultstring>"));
}


if (find(response,"Success") > 0)
{

pos = find(response,"<bm:transactionID_l>");
transactionID= substring(response,pos+20,find(response,"</bm:transactionID_l>"));
}
//Checking If Retrieved Transaction_ID is valid and Retrieve Quote Number with get transaction function
if(isnumber(transactionID))
{
transactionDetails = gettransaction(atoi(transactionID));
QuotenoStartPosition = find(transactionDetails, "<transactionID_t><![CDATA[");
QuotenoEndPosition = find(transactionDetails, "]]></transactionID_t>");
quoteNumber = substring(transactionDetails, QuotenoStartPosition+len("<transactionID_t><![CDATA["), QuotenoEndPosition);


}
//Create Opportunity in OEC for the current Renewal Quote
createOptyResponse = util.renewalQuoteCreateOpportunity_brcm(quoteNumber, dealType, licenseeNum);
if(NOT isnull(createOptyResponse) and trim(createOptyResponse) <> "")
{
optydetails = split(createOptyResponse,"~");
endCustomerID = optydetails[0];
optyID = optydetails[1];
optyNumber = optydetails[2];
linecurrency = optydetails[3];
paymentTerm = optydetails[4];
coreAccount = optydetails[5];

}

dealType="";
outputType="";
billToCustomer = "";
quoteName = "";
billToCustomerNumber = "";
soldToCustomer = "";
soldToCustomerNumber = "";
quoteEffectiveDate = "";
contractStartDate_1 = "";
startDate = "";
endDate = "";
endCustomerERPName = "";
endCustomerERPID = "";
endOfsupportDate = "";
gBU_Driver = "";
quoteExpirationDate = "";
contractEndDate_1 = "";
contractheaderEndDate1 = "";
batchNumber = "";
quotetype = "";
source = "";
ownerName = "";
shipToCoutry = "";
operatingUnit = "";
licenseeNum = "";
instOwnerName = "";
billtocontactemail = "";
shipToCountryMenu = "";
status = "IN_PROGRESS";
jsonTransactionArrayIndex = range(jsonarraysize(TransactionArray));
for eachIndex1 in jsonTransactionArrayIndex{


jsonObj = jsonarrayget(TransactionArray, eachIndex1, "json");

autoRenwalFlag = jsonget(jsonObj,"AutoRenewFlag");
quoteEffectiveDate = jsonget(jsonObj ,"quoteEffectiveDate");
contractStartDate_1 = jsonget(jsonObj ,"ContractStartDate");
if(contractStartDate_1 <> "" and NOT isnull(contractStartDate_1))
{
contractStartDate_1_str = datetostr(strtojavadate(contractStartDate_1,"yyyy-MM-dd"),"yyyy-MM-dd HH:mm:ss");
}
stringStartDate = "";
if(contractStartDate_1 <> "" and NOT isnull(contractStartDate_1))
{
contractStartDate = adddays(strtojavadate(jsonget(jsonObj ,"ContractStartDate"),"yyyy-MM-dd"),1);
stringStartDate = datetostr(contractStartDate,"yyyy-MM-dd");
startDate = datetostr(contractStartDate,"yyyy-MM-dd HH:mm:ss");
//Add 365 days to get Contract End Date
contractEndDate = adddays(strtojavadate(startDate,"yyyy-MM-dd"),365);
endDate = datetostr(contractEndDate,"yyyy-MM-dd HH:mm:ss");
//Changes made as part of VIPER - 281 - As Contract End date should always be a day less than contract start date
//Changes made as part of VIPER - 281 - Compare days,month of contract start and end date and take a day off from contract end date if contract start and end date has same days and month.
endMonth = substring(endDate,5,7);
endDays = substring(endDate,8,10);
startMonth = substring(startDate,5,7);
startDays = substring(startDate,8,10);
if( startDays == endDays and startMonth == endMonth)
{
contractEndDate = minusdays(contractEndDate,1);
endDate = datetostr(contractEndDate,"yyyy-MM-dd HH:mm:ss");
}
//Changes made as part of VIPER - 281 - end
}
batchNumber = jsonget(jsonObj,"batchNumber");
billToCustomer = jsonget(jsonObj,"billCustName");
billToCustomerNumber = jsonget(jsonObj,"billCustNumber");
billtocontactemail = jsonget(jsonObj,"billtocontactemail");

soldToCustomer = jsonget(jsonObj,"soldCustName");
soldToCustomerNumber = jsonget(jsonObj,"soldCustNumber");
endCustomerERPName = jsonget(jsonObj,"siteId");
endCustomerERPID = jsonget(jsonObj,"installedAtCustomerNumber");
endOfsupportDate = jsonget(jsonObj,"endOfSupportDate");
gBU_Driver = jsonget(jsonObj,"gbuDriverValue");
instOwnerName = jsonget(jsonObj,"installedAtCustomerNumber");
licenseeNum = jsonget(jsonObj,"licenseAccountNo");
linecurrency = jsonget(jsonObj,"linecurrency");

dealType = jsonget(jsonObj,"dealType");
//For BSN Quotes
if( dealType == "bSNRenewal")

{
source = "BSN";
dealType = "bSNRenewal";
outputType = "bSNRenewal";
quoteEffectiveDate_1 = "";
quoteExpirationDate = "";
if(quoteEffectiveDate <> "" and NOT isnull(quoteEffectiveDate))
{
quoteEffectiveDate_1 = substring(quoteEffectiveDate,0,10);
//quoteName = gBU_Driver + " - " + endCustomerERPName + " " + quoteEffectiveDate_1;
quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),90),"yyyy-MM-dd HH:mm:ss");
}
quoteName = endCustomerERPName + ":" + "Renewal" + ":" + stringStartDate;
}
//For CA Quotes assign endCustomerERPID as licenseAccountNo
if(dealType == "cADRenewal")
{
endCustomerERPID = jsonget(jsonObj,"licenseAccountNo");
endCustomerERPName = jsonget(jsonObj,"licenseeName");

source = "CA";
dealType = "cADRenewal";
outputType = "cADirectDealRenewalOnly";
if(EndOfSupportDate <> "" and NOT isnull(EndOfSupportDate))
{
endOfSupportDate_1 = substring(EndOfSupportDate,0,10);
}
quoteName = endCustomerERPName + ":" + "Renewal" + ":" + stringStartDate;
//quoteName = gBU_Driver + " - " + endCustomerERPName + " " + endOfSupportDate_1;
if(quoteEffectiveDate <> "" and NOT isnull(quoteEffectiveDate))
{
quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),365),"yyyy-MM-dd HH:mm:ss");
}
//Commented out Logic as Part of Enhancement id BROCAD2-824 now for Auto Renewal Quotes Status is In progress
/*if(isnull(autoRenwalFlag))
{
print "AutoRenewalFlag is Marked as N";
print "AutoRenewalFlag inside IF++++++++++++++++++++++++";
}
else
{

status = "APPROVED";
}
if (status == "APPROVED")
{

 lineApprovalStatus = "APPROVED";
 autoRenewal = "yes";
}
*/

}
shipToCoutry = jsonget(jsonObj,"shipToCoutry");
operatingUnit = jsonget(jsonObj,"operatingUnit");
//retrieving ship to country based on operating unit and deal type.
shipToOUResult = bmql("select ShipToCountry from OU_ShiptTo_Mapping where OU_Name = $operatingUnit and Group = $dealType");
for shipToOU in shipToOUResult
{
 shipToCountryMenu = get(shipToOU,"ShipToCountry");
}
break;
}
lineApprovalStatus ="";
autoRenewal = "no";


quoteRequest= "";
payload = dict("string");
trans = "";
returnString = "";
jsonTransactionArrayIndex = range(jsonarraysize(TransactionArray));
//Retrieve all the Quote Line Details to form update Transaction payload
for eachIndex1 in jsonTransactionArrayIndex{


jsonObj = jsonarrayget(TransactionArray, eachIndex1, "json");
line = jsonObj;

licenseType = jsonget(line,"licenseType");
licenseMetric = jsonget(line,"licenseMetric");
environmentCode = jsonget(line,"environmentCode");
specialMetricType = jsonget(line,"specialMetricType");
metricQuantity = jsonget(line,"metricQuantity");
shipToCoutry = jsonget(line,"shipToCoutry");
operatingUnit = jsonget(line,"operatingUnit");
         returnString = returnString + "<bm:transactionLine bm:bs_id=\""+transactionID+"\" bm:buyer_company_name=\"avagotechtest2\" bm:buyer_user_name=\"kmrinal\" bm:currency_pref=\""+linecurrency+"\" bm:data_type=\"2\" bm:document_name=\"Transaction Line\" bm:document_number=\""+jsonget(line,"_document_number")+"\" bm:document_var_name=\"transactionLine\" bm:process_var_name=\"oraclecpqo\" bm:supplier_company_name=\"avagotechtest2\">";
              returnString = returnString + "<bm:_document_number>"+jsonget(line,"_document_number")+"</bm:_document_number>";
              returnString = returnString + "<bm:_price_book_var_name>_default_price_book</bm:_price_book_var_name>";
              returnString = returnString +  "<bm:_price_quantity>"+jsonget(line,"existingQuantity")+"</bm:_price_quantity>";
              //returnString = returnString +  "<bm:existingQuantity_l>"+jsonget(line,"quantity")+"</bm:existingQuantity_l>";
              returnString = returnString +  "<bm:contractStartDate_l>"+startDate+"</bm:contractStartDate_l>";
              returnString = returnString +  "<bm:existingSupportStartDate_l>"+jsonget(line,"entitlementStartDate")+"</bm:existingSupportStartDate_l>";
              returnString = returnString +  "<bm:existingSupportExpirationDate_l>"+contractStartDate_1_str+"</bm:existingSupportExpirationDate_l>";
              returnString = returnString +  "<bm:contractEndDate_l>"+endDate+"</bm:contractEndDate_l>";
              //returnString = returnString +  "<bm:contractEndDate_l>"+endDate+"</bm:contractEndDate_l>";
              returnString = returnString +  "<bm:priorContract>"+jsonget(line,"contractNumber")+"</bm:priorContract>";
              returnString = returnString +  "<bm:mPN_l>"+jsonget(line,"mpn")+"</bm:mPN_l>";
              returnString = returnString +  "<bm:productName_l>"+jsonget(line,"productName")+"</bm:productName_l>";
              returnString = returnString +  "<bm:migrationType_l>"+jsonget(line,"migrationType")+"</bm:migrationType_l>";
             // returnString = returnString +  "<bm:baseMaterial_1>"+jsonget(line,"baseMaterial")+"</bm:baseMaterial_1>";
              returnString = returnString +  "<bm:productReplacementCode1_l>"+jsonget(line,"replacementProduct")+"</bm:productReplacementCode1_l>";
              returnString = returnString +  "<bm:coveredProduct_l>"+jsonget(line,"coveredProduct")+"</bm:coveredProduct_l>";
              returnString = returnString +  "<bm:cPProductFamily_l>"+jsonget(line,"coveredItemDescription")+"</bm:cPProductFamily_l>";
              returnString = returnString +  "<bm:productReplacementCode2_l>"+jsonget(line,"replacementPdtVal")+"</bm:productReplacementCode2_l>";
              returnString = returnString +  "<bm:quantityRatioConversion_l>"+jsonget(line,"qtyRatioConversion")+"</bm:quantityRatioConversion_l>";
              returnString = returnString +  "<bm:upgradeMaterial_l>"+jsonget(line,"upgradeMaterial")+"</bm:upgradeMaterial_l>";
              returnString = returnString +  "<bm:dateShipped_l>"+jsonget(line,"endOfSupportDate")+"</bm:dateShipped_l>";
       returnString = returnString +  "<bm:serial_l>"+jsonget(line,"sNo")+"</bm:serial_l>";
       if(licenseType <> "" and NOT isnull(licenseType)){
  returnString = returnString +  "<bm:licenseType_l>"+licenseType+"</bm:licenseType_l>";}
       returnString = returnString +  "<bm:licenseMetric_l>"+licenseMetric+"</bm:licenseMetric_l>";
        if(environmentCode <> "" and NOT isnull(environmentCode)){
       returnString = returnString +  "<bm:enterEnvironment_l>"+environmentCode+"</bm:enterEnvironment_l>";}
       returnString = returnString +  "<bm:nonStandardLicenseMetric_l>"+specialMetricType+"</bm:nonStandardLicenseMetric_l>";
       returnString = returnString +  "<bm:nonStandardQty_l>"+metricQuantity+"</bm:nonStandardQty_l>";
       returnString = returnString +  "<bm:priorContractLineItem_l>"+jsonget(line,"contractLineNumber")+"</bm:priorContractLineItem_l>";
       //returnString = returnString +  "<bm:extProposedNetPriceRequested_l>"+jsonget(line,"previousprice")+"</bm:extProposedNetPriceRequested_l>";
       returnString = returnString +  "<bm:eOSDate_l>"+jsonget(line,"dateShipped")+"</bm:eOSDate_l>";
       returnString = returnString +  "<bm:siteIDStreetAddress_l>"+jsonget(line,"fullAddress")+"</bm:siteIDStreetAddress_l>";
       returnString = returnString +    "<bm:installedAtCustomerNumber_l>"+jsonget(line,"installedAtCustomerNumber")+"</bm:installedAtCustomerNumber_l>";  
       returnString = returnString +  "<bm:siteID_l>"+jsonget(line,"lineSiteNumber")+"</bm:siteID_l>";
       returnString = returnString +  "<bm:siteIDCityStateZip_l>"+jsonget(line,"siteIdCity")+"</bm:siteIDCityStateZip_l>";
       returnString = returnString +  "<bm:siteIDZip_l>"+jsonget(line,"siteIdZip")+"</bm:siteIDZip_l>";
       returnString = returnString +  "<bm:siteIDCountry_l>"+jsonget(line,"siteIdCountry")+"</bm:siteIDCountry_l>";
       returnString = returnString +  "<bm:supportType_l>"+jsonget(line,"existingSupportType")+"</bm:supportType_l>";
       returnString = returnString +  "<bm:previousPrice_l>"+formatascurrency(atof(jsonget(line,"previousprice")), linecurrency)+"</bm:previousPrice_l>";
       returnString = returnString +  "<bm:lineApprovalStatus_l>"+lineApprovalStatus+"</bm:lineApprovalStatus_l>";
       returnString = returnString +  "<bm:existingQuantity_l>"+jsonget(line,"quantity")+"</bm:existingQuantity_l>";
       returnString = returnString +  "<bm:hiddenPrice_l>"+jsonget(line,"previousprice")+"</bm:hiddenPrice_l>";
       returnString = returnString +  "<bm:lineExpirationDate_l>"+quoteExpirationDate+"</bm:lineExpirationDate_l>";
       returnString = returnString +  "<bm:transactionTypeM_l>Renew</bm:transactionTypeM_l>";
       returnString = returnString +  "<bm:expiringAnnualRenewal_l>"+jsonget(line,"expAnnualrenewal")+"</bm:expiringAnnualRenewal_l>";
       returnString = returnString +  "<bm:renewalCreatedBy_l>Integration User</bm:renewalCreatedBy_l>";
              returnString = returnString + "</bm:transactionLine>";
              
              }
//Get Update Transaction Web Service details from INT_SYSTEM_DETAILS data table
result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_UPDATE'");
for r in result
{
username = get(r,"Username");
password = get(r,"Password");
fileLocation = get(r,"File_Location");
soapendpoint = get(r,"SoapEndpoint");
}
//Quote Header Payload
put(payload,"USERNAME", username);
put(payload,"status", status);
put(payload,"autorenewalnotification", autoRenewal);
put(payload,"PASSWORD", password);
put(payload,"quoteName",quoteName);
put(payload,"bs_id",transactionID);
put(payload,"billtocustomername",billToCustomer);
put(payload,"billtocustomerno",billToCustomerNumber);
put(payload,"soldtocustomername",soldToCustomer);
put(payload,"soldtocustomerno",soldToCustomerNumber);
put(payload,"companyname",endCustomerERPName);
put(payload,"customerERPID",endCustomerERPID);
put(payload,"Transaction_ID",transactionID);
put(payload,"BuyerCompanyName",CustomerCompanyName);
put(payload,"SupplierCompanyName",SupplierCompanyName);
put(payload,"QuoteOutputType",outputType);
put(payload,"DealType",dealType);
put(payload,"contractstartdate",startDate);
put(payload,"contractenddate",endDate);
put(payload,"quoteEffectiveDate",quoteEffectiveDate);
put(payload,"quoteExpirationDate",quoteExpirationDate);
put(payload,"createdDate",quoteEffectiveDate);
put(payload,"closedate",startDate);
put(payload,"billtocontactemail",billtocontactemail);
//put(payload,"functionalcurrency",functionalcurrency);
put(payload,"forloop",returnString);
put(payload,"shipToCountryMenu",shipToCountryMenu);
put(payload,"linecurrency",linecurrency);
put(payload,"functionalcurrency",linecurrency);
put(payload,"endCustomerID",endCustomerID);
put(payload,"optyID",optyID);
put(payload,"optyNumber",optyNumber);
put(payload,"paymentTerm",paymentTerm);
put(payload,"coreflag",coreAccount);
defaultErrorMessage="";
quoteRequest1=applytemplate(fileLocation,payload,defaultErrorMessage);
quoteRequest1 = replace(quoteRequest1,"&lt;","<");
quoteRequest1= replace(quoteRequest1,"&gt;",">");
quoteRequest1 = replace(quoteRequest1,"&quot;","\"");
//VIPER - 778 - added logic to replace special character with "=" symbol
quoteRequest1 = replace(quoteRequest1,"&#x3D;","=");



response="";
//Trigger the web service to update transaction
response = urldatabypost(soapendpoint,quoteRequest1, "",headersDict,true);

if(find(response,"Success") == -1)
{
 transactionID = substring(response,find(response,"<faultstring>") + len("<faultstring>"),find(response,"</faultstring>"));
}

//Get Save Transaction Web Service details from INT_SYSTEM_DETAILS data table if update Transaction is successful
if(find(response,"Success") > 0){
result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System ='SAVE_TRANSACTION'");
for r in result
{
username = get(r,"Username");
password = get(r,"Password");
fileLocation = get(r,"File_Location");
soapendpoint = get(r,"SoapEndpoint");
}
put(payload,"userName", username);

put(payload,"password", password);
put(payload,"bs_id", transactionID);
quoteRequest2=applytemplate(fileLocation,payload,defaultErrorMessage);
//Trigger the web service to save transaction
response = urldatabypost(soapendpoint,quoteRequest2, "",headersDict,true);
if(find(response,"Success") == -1)
{
 transactionID = substring(response,find(response,"<faultstring>") + len("<faultstring>"),find(response,"</faultstring>"));
}

}

//Update Entitlement Table Quote Number field with Transaction id if Quote Creation is successful, if Quote is not created update the error message in Entitlement table so that this records will not be picked in future runs

renewalFlagUpdatePayload = dict("string");
resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_FLAG_UPDATE'");
for flagUpdate in resultFlagUpdate
{
usernameFlagUpdate = get(flagUpdate,"Username");
passwordFlagUpdate = get(flagUpdate,"Password");
fileLocationFlagUpdate = get(flagUpdate,"File_Location");
soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
}
put(renewalFlagUpdatePayload,"USERNAME", usernameFlagUpdate);
put(renewalFlagUpdatePayload,"PASSWORD", passwordFlagUpdate);
recordUpdateString = "";
jsonDataTableUpdateArrayIndex = range(jsonarraysize(DataTableUpdateArray));
for eachIndex2 in jsonDataTableUpdateArrayIndex{
jsonObj = jsonarrayget(DataTableUpdateArray, eachIndex2, "json");
partNumber = jsonget(jsonObj,"partNumber");
serialNumber = jsonget(jsonObj,"serialNumber");
instanceIdentifier = jsonget(jsonObj,"instanceIdentifier");
contractlinenumber = jsonget(jsonObj,"contractLineNumber");
recordUpdateString = recordUpdateString +"<bm:each_record>";
recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+partNumber+"</bm:CONTRACT_NUMBER>";
recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+transactionID+"</bm:QUOTE_NUMBER>";
recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
//recordUpdateString = recordUpdateString +"<bm:Quote_Type>"+quotetype+"</bm:Quote_Type>";
recordUpdateString = recordUpdateString +"</bm:each_record>";
}
put(renewalFlagUpdatePayload,"forLoop", recordUpdateString);

defaultErrorMessage="";
quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalFlagUpdatePayload,defaultErrorMessage);
quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
headersDict = dict("string"); 

response="";
//Trigger the web service to update transaction ID or error message in entitlement table
response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "error",headersDict);

//Update Renewal Job table with newly generated Quote info for tracking number of Quotes generated in current batch
if(isnumber(transactionID))
{
renewalJobUpdatePayload = dict("string");
renewaljobUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_JOB_UPDATE'");
for each in renewaljobUpdate
{
usernameFlagUpdate = get(each,"Username");
passwordFlagUpdate = get(each,"Password");
fileLocationFlagUpdate = get(each,"File_Location");
soapendpointFlagUpdate = get(each,"SoapEndpoint");
}
put(renewalJobUpdatePayload,"USERNAME", usernameFlagUpdate);
put(renewalJobUpdatePayload,"PASSWORD", passwordFlagUpdate);
recordUpdateString = "";
recordUpdateString = recordUpdateString +"<bm:each_record>";
recordUpdateString = recordUpdateString +"<bm:Quote_Number>"+quoteNumber+"</bm:Quote_Number>";
recordUpdateString = recordUpdateString +"<bm:Batch_Date>"+currentsystemDate+"</bm:Batch_Date>";
recordUpdateString = recordUpdateString +"<bm:User>"+"Integration"+"</bm:User>";
recordUpdateString = recordUpdateString +"<bm:Transaction_ID>"+transactionID+"</bm:Transaction_ID>";
recordUpdateString = recordUpdateString +"<bm:SOURCE>"+source+"</bm:SOURCE>";
recordUpdateString = recordUpdateString +"<bm:LICENSEE_ACNT_NUM>"+licenseeNum+"</bm:LICENSEE_ACNT_NUM>";
recordUpdateString = recordUpdateString +"<bm:INST_OWNER_CUST_NUM>"+instOwnerName+"</bm:INST_OWNER_CUST_NUM>";
recordUpdateString = recordUpdateString +"<bm:SHIP_TO_COUNTRY>"+shipToCoutry+"</bm:SHIP_TO_COUNTRY>";
recordUpdateString = recordUpdateString +"<bm:OPERATING_UNIT>"+operatingUnit+"</bm:OPERATING_UNIT>";
recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
recordUpdateString = recordUpdateString +"<bm:OPTY_ID>"+optyID+"</bm:OPTY_ID>";
recordUpdateString = recordUpdateString +"</bm:each_record>";
put(renewalJobUpdatePayload,"forLoop", recordUpdateString);

defaultErrorMessage="";
quoteRequestRenewalJobUpdate=applytemplate(fileLocationFlagUpdate,renewalJobUpdatePayload,defaultErrorMessage);
quoteRequestRenewalJobUpdate = replace(quoteRequestRenewalJobUpdate,"&lt;","<");
quoteRequestRenewalJobUpdate= replace(quoteRequestRenewalJobUpdate,"&gt;",">");
quoteRequestRenewalJobUpdate = replace(quoteRequestRenewalJobUpdate,"&quot;","\"");
headersDict = dict("string"); 

response="";
//Trigger the web service to update BRCM_Renewal_Job table
response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalJobUpdate, "error",headersDict);

/*if (quoteNumber <> ""){
renewalnotificationresponse = util.productRenewalNotification(transactionID);


}*/
}
}
return recordUpdateString;