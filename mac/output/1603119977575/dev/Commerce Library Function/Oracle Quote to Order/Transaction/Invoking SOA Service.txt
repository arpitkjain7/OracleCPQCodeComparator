/*********************************************************************
Function Name: Invoking SOA Service
Description: This library function is used in Submit to Order and Batch to send request to SOA.
Author: Acharya Kumar Satyabrata
Date: 27 Feb 2019
// 06/15/2020    Shruti           VIPER-872-changes for stated renewal 
*********************************************************************/

res = "";
sessionId = "";//Session Id of the Current User
currentDate= getdate(false);
lineRequest="";
primaryQuote=string(primaryQuote_t);
createDate_l="";
lastUpdateDate_l="";
defaultErrorMessage="";
existingSupportStartDate="";
existingSupportExpirationDate="";
contractStartDt_l="";
contractEndDt_l="";
effectiveStartDt_l="";
lineExpirationDt_l="";
dtShipped_l="";
dropSupportDt_l="";
stabilizationDt_l="";
eOSDate="";
Username="";
Password="";
Filelocation="";
SOA_ENDPOINTURL="";
userpasscode="";
core=core_t;
statedRenewal = statedRenewal_t;
Details=bmql("SELECT Username, Password, File_Location,SoapEndpoint FROM INT_SYSTEM_DETAILS WHERE System='QUOTE_HEADER'");

for detail in Details{
Username=get(detail,"Username");
Password=get(detail,"Password");
Filelocation=get(detail,"File_Location");
SOA_ENDPOINTURL=get(detail,"SoapEndpoint");
userpasscode=Username+":"+Password;
}


flag=Flags;
counter=0;
submittedDate="";
approvalDate="";
closeDate="";
invoiceDate="";
createdDate="";
lastUpdatedDate="";
quoteEffectiveDate="";
quoteExpirationDate="";
contractStartDate="";
contractEndDate="";
if(createdDate_t<>""){
createdDate=datetostr(strtojavadate(createdDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}
if(lastUpdatedDate_t<>""){
lastUpdatedDate=datetostr(strtojavadate(lastUpdatedDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}
if(quoteEffectiveDate_t<>""){
quoteEffectiveDate=datetostr(strtojavadate(quoteEffectiveDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}
if(quoteExpirationDate_t<>""){
quoteExpirationDate=datetostr(strtojavadate(quoteExpirationDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}
if(contractStartDate_t<>""){
contractStartDate=datetostr(strtojavadate(contractStartDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}
if(contractEndDate_t<>""){
contractEndDate=datetostr(strtojavadate(contractEndDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}
if(closeDate_t<>""){
closeDate=datetostr(strtojavadate(closeDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}
if(invoiceDate_t<>""){
invoiceDate=datetostr(strtojavadate(invoiceDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}

if(approvalDate_t<>""){
approvalDate=datetostr(strtojavadate(approvalDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
}
if(submittedDate_t<>""){
submittedDate=datetostr(strtojavadate(submittedDate_t, "yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd HH:mm:ss"); 
}

//Changes done for sending Displayname of Account Classification to EBS for SYMINT-1246 by Arjun
if(core_t=="ZCA_CORE")
{
core="Core";
}
elif(core_t=="ZCA_NON_CORE")
{
core="Non-Core";
}
else
{
core="Commercial";
}

// 06/15/2020    Shruti           VIPER-872-changes for stated renewal 
if(statedRenewal == "yesRemovedGoingForward"){
 statedRenewal = "Yes - Removed Going Forward";
}
elif(statedRenewal == "yesNotRemovedGoingForward"){
 statedRenewal = "Yes - Not Removed Going Forward";
}

quoteRequest= "";
payload = dict("string");
put(payload,"flags", flag);
put(payload,"createdDate", createdDate);
put(payload,"lastUpdatedDate", lastUpdatedDate);
put(payload,"quoteEffectiveDate", quoteEffectiveDate);
put(payload,"quoteExpirationDate", quoteExpirationDate);
put(payload,"contractStartDate", contractStartDate);
put(payload,"contractEndDate", contractEndDate);
put(payload,"closeDate", closeDate);
put(payload,"approvalDate", approvalDate);
put(payload,"submittedDate", submittedDate);
put(payload,"invoiceDate", invoiceDate);
put(payload,"primaryQuote",primaryQuote);
put(payload,"core",core);
// 06/15/2020    Shruti           VIPER-872-changes for stated renewal 
put(payload,"statedRenewal",statedRenewal);

billingRequest = commerce.invokingBillingScheduleRequest();
put(payload,"billingRequest", billingRequest);

encoded=encodebase64(userpasscode);
auth="Basic" + " " + encoded;
defaultErrorMessage="";
quoteRequest=applytemplate(Filelocation,payload,defaultErrorMessage);
quoteRequest=replace(quoteRequest, "&lt;", "<");
quoteRequest=replace(quoteRequest, "&gt;", ">");
print quoteRequest;
headersDict = dict("string"); 
put(headersDict,"Content-Type","text/xml;charset=UTF-8"); 
put(headersDict,"Authorization",auth);
response="";
response = urldatabypost(SOA_ENDPOINTURL,quoteRequest, "error",headersDict);
//print quoteRequest;
print response;
orderResponseStatus = orderResponseStatus_t;

//getting xml to find the readxmlmultiple.

startIndex=find (response, "<MERGE_STATUS>");
endIndex=find (response, "</MERGE_STATUS>");
final = substring(response, startIndex, endIndex+15);
status="";
batchresponse="";
if(final=="<MERGE_STATUS>FAILED</MERGE_STATUS>")
{
batchresponse= "Failed : " + response;

}
pickup="";
if(Flags == "O" AND (final=="<MERGE_STATUS>FAILED</MERGE_STATUS>" OR response=="error"))
{
orderResponseStatus="Send to ERP Failed";
res = res + "1~orderResponseStatus_t~" + orderResponseStatus + "|";
status="APPROVED";
res = res + "1~status_t~" + status + "|";
pickup="Picked up for Ordering";
response= pickup + ": Response : " + response; 
res = res + "1~sOAPResponse_ct~" + response + "|";
}
elif(final=="<MERGE_STATUS>SUCCESS_(Online)</MERGE_STATUS>")
{
orderResponseStatus="Sent to ERP successfully";
res = res + "1~orderResponseStatus_t~" + orderResponseStatus + "|";
status="ORDER_SUBMITTED";
res = res + "1~status_t~" + status + "|";
pickup="Picked up for Ordering";
response= pickup + " : Response : " + response; 
res = res + "1~sOAPResponse_ct~" + response + "|";
}

if(final=="<MERGE_STATUS>SUCCESS_(Batch)</MERGE_STATUS>")
{
pickup="Picked Up for Batch";
batchresponse= pickup + " : Response : " + response;
res = res + "1~batchRequestResponse~" + batchresponse + "|";
}
if(Flags == "B" AND (final=="<MERGE_STATUS>FAILED</MERGE_STATUS>" OR response=="error"))
{
pickup="Batch Table Integration has failed";
response= pickup + " : Response : " + response; 
res = res + "1~batchRequestResponse~" + response + "|";
}


return res;