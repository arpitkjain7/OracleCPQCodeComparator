/************************************************************************************************************
Description: This library function is used to populate all the pricing related attributes of line items in a quote.
Return type: string
History:     Date          Author            Comment 
 01/02/2019    Satyabrata Acharya   Modified the library as per best practices
 02/18/2019    Raghavendra Kumar    Setting some more pricing related attributes
 03/11/2019    M Vamsi      Updating uplift factor as a percentage value
 04/02/2018    Ravi Kumar     Updating MSRP and extProposedNetPriceRequested for Renewals 
 04/12/2019    Keerthi              Setting uplift factor as part of BROCAD2-1099
 05/09/2019    Satyabrata Acharya   Optimized code to align with best practices and used string builder
 05/14/2019 Kavita Lolla     Merge populate approval flag library in this library for code optimization.
 06/24/2019 M Vamsi      Fix for BROCAD2-1617, updating salesmin value for support part based on covered product
 25/06/2019 Kavita Lolla     Included fix for BROCAD2-3389. Line 2089 - 2093 , 985 - 992 , 2781 - 2785. 
               Proposed price calculation for imported lines using hiddenProposedPrice_l.
 02/07/2019 Kavita Lolla     BROCAD2-3504. RenewalFlag should be true only if renew lines are present in Lines.
 03/07/2019 Ravi Kumar     BROCAD2-4748 MSRP Extended new attribute is added to calculte ext MSRP and updated existing MSRP Logic
 15/07/2019 Kavita Lolla     BROCAD2-5278 - Moving the code to update Renewal flag from Save action to Update financial summary action.
 25/07/2019 Satyabrata Acharya  BROCAD2-5502 - Restrict address selection to the same OU in quote header.
 25/07/2019  Ravi kumar     BROCAD2-5532 - Unit MSRP and Ext. MSRP attributes are becoming blank after Import 
 26/07/2019 Kavita Lolla  BROCAD2-1617 - Remove Null checks for Salesmin3.
 29/07/2019     M Vamsi   VIPER - 264 - Pricing Issue in Merge in Renewal Quotes for Subscription lines
 08/05/2019 M Vamsi   VIPER-304 - Ext. Contract/List Price not calculating correctly for auto-generated renewal line item
 08/08/2019 Satyabrata Acharya    VIPER-328 - Double save issue for Customer Pricing
 08/21/2019     Adithya Suresh          VIPER-355 - Proposed Price issue with Zero Price Products
 08/21/2019 Ravi Kumar     VIPER-278 - Added Condition to check renewalCreatedBy is not Integration User to avoid Global Pricing calculations 
      when EAR is zero and incase of Cloned Quote 'CreatedBy' is updated to Actual User instead of Integration
09/04/2019 Ravi Kumar  VIPER-412 - Regression Issue: When we Split Zero price products in renewal quote Standard Global Pricing is getting applied for that line item
10/04/2019 M Vamsi   VIPER-438 - Symantec - Installed at on quote lines should be editable
10/28/2019 Satyabrata Acharya    SYMINT-1657 added logic to blank out customer details values if operating unit is changed
12/04/2019   Keerthivasan A          SYMINT-2514  Integration with SOA when the line items are greater than 5000
01/02/2019 Arjun Singh  SYMINT-3206  Added the code for having discount 100% for Symantec Trail POC Quote   
 ************************************************************************************************************/
result = "";
dateFormat1 = "yyyy-MM-dd HH:mm:ss";
dateFormat2 = "yyyy-MM-dd HH:mm:ss";
salesminprice="";
sb=stringbuilder();
sb1=stringbuilder();
sb2=stringbuilder();
sb3=stringbuilder();
sb4=stringbuilder();
sb5=stringbuilder();
sb6=stringbuilder();
sb7=stringbuilder();
sb8=stringbuilder();
sb9=stringbuilder();
sb9a=stringbuilder();
sb10=stringbuilder();
sb11=stringbuilder();
sb12=stringbuilder();
sb13=stringbuilder();
sb14=stringbuilder();
sb15=stringbuilder();
sb16=stringbuilder();
sb17=stringbuilder();
sb18=stringbuilder();
sb19=stringbuilder();
sb20=stringbuilder();
sb21=stringbuilder();
sb22=stringbuilder();
sb23=stringbuilder();
sb24=stringbuilder();
sb25=stringbuilder();
sb26=stringbuilder();
sb27=stringbuilder();
sb28=stringbuilder();
sb29=stringbuilder();
sb30=stringbuilder();
sb31=stringbuilder();
sb32=stringbuilder();
sb33=stringbuilder();
busDivision = "";
//Variables for Populating Approval Flag
validation="false";
Customer = _transaction_customer_id;
BillTo = billToCustomerId_t;
EndCust = soldToCustomerAccountID_t;
QuoteDealType = lower(dealType_t);
searchString = "education";
parentPartDictionary = Dict("integer");
approveFlag = false;
//BROCAD-5278
//BROCAD2-3504-BEGIN
//renewalFlag = false;
//BROCAD2-3504-END
capacityFlag = true;
result = "";
dDRFlag = false;
//end
quantity=0;
min_qty=1;
dlim ="~";
dend ="|";
NDP = 1.0;
Curr_date = getdate();
ret = "false";
effectivestartDate_array=date[];
lineUnitListPrice_array=float[];
mpn_array=string[];
cpn_array=string[];
coveredpdt="";
Division = "";
StartDate = getdate();
EndDate = getdate();
currdate = getdate();
partPrice = "";
partNoDict = Dict("string");
response="";   
partPriceDict = Dict("string");
basePrice = "";
supp_rate = 0.0;
Contract_no="NA";
errorLines="";
dateFormat = "yyyy-MM-dd HH:mm:ss";
contractdetials=string[2];
supp_price = "";
final_price = "0.0";
listPrice="0.0";
proposedPrice = 0.0;
proposedunitprice=0.0;
totalUSD=0.0;
sumNewAnnualRenewalvalue =0.0;
SubscriptionPricing="0.0";
SubscriptionPricing1="0.0";
newAnnualRenewalValue =0.0;
dateFormatN = "yyyy-MM-dd HH:mm:ss";
AccountNums =_transaction_customer_id+"~"+billToCustomerId_t+"~"+_transaction_customer_id + "~" + endCustomerParentId_avg + "~";
param_per_unit_per_list_price = 0.0; //variable added on 2019/feb/18
param_proposed_net_unit_price_requested = 0.0; //variable added on 2019/feb/18
lineDiscount = 0;//variable added on 2019/feb/18
param_ext_contract_list_price = 0.0;//variable added on 2019/feb/18
param_ext_proposed_net_unit_price_requested = 0.0;//variable added on 2019/feb/18
extLineDiscount = 0.0;//variable added on 2019/feb/18
param_approver_recc_net_unit_price = 0.0;
param_approver_ext_recc_net_unit_price = 0.0;
mpn_arraymulti=string[];
currency = "";
total=0.0;
exch = "1";
salesminprice="";
supp_rate1 = 0.0;
unitMSRP = 0.0;
extMSRP = "";
totalMaintenanceFee = 0.0;
totalLicenseFee = 0.0;
totalExtPrice = 0.0;
currency = _system_current_document_currency_pref;
precision = 0;
//Merge approval flag
Customer = _transaction_customer_id;
BillTo = billToCustomerId_t;
EndCust = soldToCustomerAccountID_t;
approveFlag = false;
//BROCAD-5278
//BROCAD2-3504-BEGIN
//renewalFlag = false;
//BROCAD2-3504-END
capacityFlag = true;
result = "";
final_price1 = "";
dDRFlag = false;
coveredProductDictionary = Dict("string");
coveredProductsFromTableDictionary=Dict("string");
subscription_price = "0.0";
ratio = 1.0;
Days = 1;
propPrice = 0.0;
sub_type = "";
base_price1 = "0.0";
sub_factor = 0.0;
isPresentInPremierCodes = false;
isPresentInEssentialCodes = false;
validateSupportTypesOnLineItemsFlag = false;
fulfillmentSet = "";
totalFee = 0.0;
//variables declared for promotion multicheck
counter1=1;
counter2=1;
Promotion_var="Multi";
mpn_array1=string[];  //stores all the part numbers
Curr_date=getdate();
emptyarray=string[];
promo_array=string[]; //stores the promotion parts
//variables that are used in order to fetch the customer ids for customer pricing
BillToCustomerId=billToCustomerId_t;
EndCustomerId=_transaction_customer_id;
operatingUnit=operatingUnit_t;
BillParentId=billToParentId_avg;
BillGrandParentId=billToGrandParentId_avg;
EndParentId=endCustomerParentId_avg;
EndGrandParentId=endCustomerGrandParentId_avg;
eDIsymorder=eStoreEDI_t;
//validation rule: Validate Support Types on Line Items; adithya
resultSet1 = bmql("select Support_Level,Support_Type_Code from BRCM_Support_Rate where Support_Level Like '%Premier%' or Support_Level Like '%Premium%'");
resultSet2 = bmql("select Support_Level,Support_Type_Code from BRCM_Support_Rate where Support_Level Like '%Essential%'");

premierSupportCodesDictionary = Dict("string");
EssentialSupportCodesDictionary = Dict("string");

//SYMINT-2514 : Initializing Line Item Counter
numberOfLineItems = 0;

for each_record in resultSet1
{
 supportTypeCode = get(each_record,"Support_Type_Code");
 put(premierSupportCodesDictionary, supportTypeCode, supportTypeCode);
}

for each_record in resultSet2
{
 supportTypeCode = get(each_record,"Support_Type_Code");
 put(EssentialSupportCodesDictionary, supportTypeCode, supportTypeCode);
}
//************************ 
if(startswith(dealType_t,"bSN"))
{
 if (totalValueUSD_t > 250000)
 {
  dDRFlag = true;
 }
}
if(dDRFlag == false)
{
 if(restrictedCustomerFlag_t)
 {
  dDRFlag = true;
 }
}
//end merge

if(quoteType_t <> "renewalQuote")
{
 sb1=sbappend(sb1,"1~currency_t~", _system_current_document_currency_pref, "|");
}
//Precision stores how many digits are allowed after decimal point on the basis of the quote currency
res = bmql("SELECT Precision from Func_Curr_Prec_Map WHERE Functional_Currency=$_system_current_document_currency_pref");

for line in res
{
 precision=atoi(get(line,"Precision"));
}

exch=string(currencyExchange_t);
//Jira# 5502 : Restrict address selection to the same OU in quote header
operatingUnit = "";
//this query fetched the OU as per the Ship to Country in order to compare in case OU was changed after customer selection.
res = bmql("SELECT OU_Name FROM OU_ShiptTo_Mapping WHERE ShipToCountry = $shipToCountry_menu_t AND Group = $dealType_t");
for value in res
 {
 operatingUnit = get(value,"OU_Name");
 }
//end of code for Jira# 5502
//Checking null value of cutomer Id and also id part number not equals to cust then only creating Json Object
if(_transaction_customer_id<>"")
{
 EndCustomerId=_transaction_customer_id;
}
//JIRA VIPER-513; This auto sets Symorder flag to Y if Core classification is Commercial
if(core_t=="Commercial")
{
 eDIsymorder="Yes";
 
}
//JIRA VIPER-328; This is an extra line loop in order to fetch Bill To and End Customer Details in the runtime before the header level fields are set
for line in transactionLine{
 
 // SYMINT-2514 Calculating the Number of Line Items present in the quote
 if((line._model_name <> "Customer Search" and line._part_number =="") OR (line._part_number <> "Cust" and line._model_name == "")){
  // Calculating the Number of Line items while looping
  numberOfLineItems = numberOfLineItems + 1;
 }
 // End of SYMINT-2514
 
 if(quoteType_t<>"contractQuote")
 {
 
 append(mpn_array1,line._part_number); //getting all the part numbers and storing in an array for promotion multi check
 }
//restricting customer search parts that get added after customer search and also restricting model lines in case of configured parts
 
 if(line._part_number=="Cust" or line._model_name<>"Customer Search")
 { 
  obj=json();
  //If line item coment not equal to null fetching value of BillTo, End To using jsonget function  
  if(line._line_item_comment<>"") 
  {
   teststring=line._line_item_comment;
   
   obj=json(teststring);  
   billToCust=jsonget(obj,"BILL_TO");
   endTo=jsonget(obj,"END_TO");
   // This function is called only fo non-contract quote so adding the condtion 
   //Jira# 5502 operating unit check is to make sure address parsing is done only when OU was not changed after customer selection
   if(quoteType_t<>"contractQuote" AND operatingUnit_t==operatingUnit){
   //Checking if there is value in Bill to then fetching all the values from ship to like name,email id,etc using jsonget

   if(isnull(billToCust)<>true)
   {
    BillToCustomerId=jsonget(json(billToCust),"Customer Id");
    BillParentId=jsonget(json(billToCust), "Customer Parent");
    BillGrandParentId=jsonget(json(billToCust), "Customer Grandparent");
   }
   }
   //Checking if there is value in End to then fetching all the values from end to using jsonget
   
   if(isnull(endTo)<>true)
   {
    EndCustomerId= jsonget(json(EndTo),"Customer Id");
    EndParentId = jsonget(json(EndTo),"Customer Parent");
    EndGrandParentId = jsonget(json(EndTo),"Customer Grandparent");
   }

  }

 }

}
//start of promotion multi check
if(quoteType_t<>"contractQuote")
{
 results2 = bmql("select Start_Date,End_Date,MPN from BRCM_Promotion_Tb where Promotion_Type=$Promotion_var");
 for res2 in results2 
  {
        if(strtojavadate(get(res2,"Start_Date"),"dd/MM/yyyy") <= Curr_date AND strtojavadate(get(res2,"End_Date"),"dd/MM/yyyy") >= Curr_date )
   {
   counter1=counter1+1;
   if(findinarray(mpn_array1,get(res2,"MPN"))<>-1){
   append(promo_array,get(res2,"MPN"));
   counter2=counter2+1;
   }
   }
     }

if(counter1==counter2)
 {
 mpn_arraymulti= promo_array;
 }
}

//end of promotion multicheck code

//Contract Quote Logic
if(quoteType_t=="contractQuote")
{
 for line in transactionLine
 {   
   
  
  licensetype=line.licenseType_l;
  //constraint rule :Constrain Education Line Items; kacharya
  if(find(QuoteDealType, searchString) >= 0)
  {
   if(line._part_number <> "")
   {
    if(not containsKey(parentPartDictionary,line._part_number))
    {
     put(parentPartDictionary, line._part_number, line._price_quantity);
    }
   }
  }
  lineold=getoldvalue("_line_item_comment",atoi(line._document_number));
  contractenddateold=getoldvalue("contractEndDate_l",atoi(line._document_number));
  contractstartdateold=getoldvalue("contractStartDate_l",atoi(line._document_number));
  coveredold=getoldvalue("coveredProduct_l",atoi(line._document_number));
  licenseold=getoldvalue("licenseType_l",atoi(line._document_number));
  //if(line.lineItemComment_avg<>line._line_item_comment){
   if(line._line_item_comment<>"" and line._part_number<>"Cust")
   {
    sb1=stringbuilder(sb1,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchConfigAttributesFromCommerce_brcm(line._document_number, line._part_number, line._line_item_comment, line.effectiveStartDate_l, line.lineExpirationDate_l, line._model_name));
    //output1=sbtostring(sb1);
   }
  //}
  if(billToCustomerId_t=="" or soldToCustomerAccountID_t=="" or shipToPartyID_t=="" or _transaction_customer_id=="" or line.lineItemComment_avg<>line._line_item_comment){
   if(line._part_number=="Cust" AND line._model_name==""){ 
    sb2=stringbuilder(sb2,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchCustomerSearchDetails_brcm(line._model_name, line._part_number, line._line_item_comment));
    //output2=sbtostring(sb2);
   }
  }
  //Condition for Defer Pricing Logic (Currently not in use)
  if(avoidPricingCalculations_t == false){
  min_qty=line._price_quantity;
  final_price="0";
  if(line._part_number<>"Cust" AND line._model_name==""){
   coveredProduct_l=line.coveredProduct_l;
   if(quoteType_t=="contractQuote")
   {
    effectivestartDate=strtojavadate(line.effectiveStartDate_l,"yyyy-MM-dd HH:mm:ss");


    //for each in mpn_array
    // {

    i=0;
    find_var=findinarray(mpn_array,line._part_number);
    append(mpn_array,line._part_number);
    if(find_var<>-1)
    {

     if(comparedates(effectivestartDate,effectivestartDate_array[i])==0 and cpn_array[i]==line.cPN_l) 
     {

      ret = "true";
     }  
     //}
     i=i+1;
    }
    //append(mpn_array,line._part_number);
    append(effectivestartDate_array,effectivestartDate);
    append(cpn_array,line.cPN_l);


    sb3=stringbuilder(sb3,"1" , dlim , "contractDateValidation_avg" , dlim , ret , dend);
    //output3=sbtostring(sb3);
   }
   supportType_l=line.supportType_l;
   accountbuilder=stringbuilder(_transaction_customer_id,"~",billToCustomerId_t,"~",_transaction_customer_id , "~" , endCustomerParentId_avg , "~" , endCustomerGrandParentId_avg , "~" , line.cPN_l , "~" ,line.effectiveStartDate_l , "~" , line.effectiveStartDate_l , "~" , routeToMarket_t , "~" , billToParentId_avg ,"~" , billToGrandParentId_avg , "~" , quoteType_t);
   AccountNums=sbtostring(accountbuilder);
   if(line.contractStartDate_l<>"" )
   {
    StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
   }
   if(line.contractEndDate_l<>"" ){
    EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
   }
   
   final_price=string(line.perUnitPerListPrice_l);
   if(line.hiddenPrice_l==0.0)
   {
    if(line._price_list_price_each==0.0)
    {if(getoldvalue(routeToMarket_t)<>routeToMarket_t or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.00") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0") OR (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.0000") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="") or (getoldvalue("contractEndDate_l",atoi(line._document_number))<>line.contractEndDate_l) OR (getoldvalue("contractStartDate_l",atoi(line._document_number))<>line.contractStartDate_l) OR (getoldvalue("coveredProduct_l",atoi(line._document_number))<>line.coveredProduct_l) OR (getoldvalue("licenseType_l",atoi(line._document_number))<>line.licenseType_l))
    {
     if(line.coveredProduct_l=="")
     {

      Days=getdiffindays(StartDate,EndDate)+1;
      partnumber=line._part_number;

      subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
      for res2 in subset1{
       if(get(res2 ,"Start_Date")<>"" and get(res2 ,"End_Date")<>"")
       {
        if(strtojavadate(get(res2 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res2 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
        {

         Contract_no="NA";
         contractdetials=string[2];
         put(partNoDict,"Item1",partnumber);

         partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
         if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l==""){

          if(find(get(partPriceDict,"Item1"),"~")<>-1)
          {
           contractdetials= split(get(partPriceDict,"Item1"), "~");
           Contract_no=contractdetials[1];
          }
          else
          {
           contractdetials[0]=get(partPriceDict,"Item1");
           Contract_no="NA";
          }
          partPrice=string(atof(contractdetials[0])*atof(exch));


          final_price=String(round(atof(partPrice),precision));
          sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
          //added new variable for Jira#1617
          listPrice = string(round(atof(final_price),precision));
          //output4=sbtostring(sb4);

         }
        }
       }
      }
     }
     /*******************************************************************************
      * Calculation of Contract/List Unit Price for Standalone Support/Maintenance
      * SKUs
      ******************************************************************************/
     else
     {
      Days=getdiffindays(StartDate,EndDate)+1;

      basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredProduct_l");
      supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType_l");
      subset=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredProduct_l ORDER BY Start_Date ASC");
      for res2 in basepriceset{
       Division=get(res2,"Business_Div");
      }
      for res1 in subset{
       if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
       {              basePrice=get(res1,"Base_Price");
       NDP=atof(get(res1,"Base_Support_Value"));


       }
      }
      if(Division=="CAD" or Division=="SED")
      {
       Contract_no="NA";
       contractdetials=string[2];
       put(partNoDict,"Item1",coveredProduct_l);
       partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
       if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l==""){

        if(find(get(partPriceDict,"Item1"),"~")<>-1)
        {
         contractdetials= split(get(partPriceDict,"Item1"), "~");
         Contract_no=contractdetials[1];
        }
        else
        {
         contractdetials[0]=get(partPriceDict,"Item1");
         Contract_no="NA";
        }

        partPrice=string(atof(contractdetials[0])*atof(exch));


       }

       For outputs in supportset{

        supp_rate=atof(get(outputs,"Support_Rate"));
        if(partPrice<>""){
         supp_price=String((round(atof(partPrice)*supp_rate,precision))*NDP*Days/365);

        }

        final_price=String(atof(supp_price));
        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(supp_price)*365/Days,precision)),"|");
        //added new variable for Jira#1617
        listPrice = String(round(atof(supp_price)*365/Days,precision));

       }
      }
      elif(Division=="BSN"){
       For outputs in supportset{
        supp_rate=atof(get(outputs,"Support_Rate"));
        supp_price=String((atof(basePrice)*supp_rate)*NDP);

        final_price=String(atof(supp_price)*atof(exch));
        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(basePrice)*atof(exch),precision)),"|");
        //added new variable for Jira#1617
        listPrice = String(round(atof(basePrice)*atof(exch),precision));
        //output4=sbtostring(sb4);
       }
      }
      //}

     }
    }
    }
    /** ************************************************************************************ */
    else
    {

     if(line._model_name=="" AND line._parent_doc_number<>""){

      final_price=String(line._price_list_price_each);
      sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(line._price_list_price_each,precision)),"|");
      //added new variable for Jira#1617
      listPrice = String(round(line._price_list_price_each,precision));
      //output4=sbtostring(sb4);
      param_per_unit_per_list_price = line._price_list_price_each;
      coveredpdt=line.coveredProduct_l;
      licensetype=line.licenseType_l;
      supportType=line.supportType_l;
      obj=json();
      if(line._line_item_comment<>"")
      {
       teststring=line._line_item_comment;
       obj=json(teststring);
       child=jsonget(obj,"child");
       childObj=json(child);
       PartNumber=jsonget(obj,"PartNumber");
       licensetype=jsonget(childObj,"selectLicenseType");
       supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
       supportType=jsonget(childObj,"supportType");
       transactionTypeM=jsonget(childObj,"transactionType");
       if (line._part_number == supportPartsPicklist)
       {
        coveredpdt=PartNumber;
       }

       if(jsonget(childObj,"startDate")<>"" ){
        StartDate=strtojavadate(jsonget(childObj,"startDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }

       if(jsonget(childObj,"endDate")<>"" ){
        EndDate=strtojavadate(jsonget(childObj,"endDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }
      }

      //For running the pricing logic for items added using configurator
      if(coveredpdt=="")
      {
       if(line.contractStartDate_l<>"" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l<>"" ){
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
       partnumber=line._part_number;

       subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for res2 in subset1{
        if(get(res2 ,"Start_Date")<>"" and get(res2 ,"End_Date")<>"")
        {
         if(strtojavadate(get(res2 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res2 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
         {

          Contract_no="NA";
          contractdetials=string[2];
          put(partNoDict,"Item1",partnumber);

          partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
          if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

           if(find(get(partPriceDict,"Item1"),"~")<>-1)
           {
            contractdetials= split(get(partPriceDict,"Item1"), "~");
            Contract_no=contractdetials[1];
           }
           else
           {
            contractdetials[0]=get(partPriceDict,"Item1");
            Contract_no="NA";
           }
           partPrice=string(atof(contractdetials[0])*atof(exch));


           final_price=String(round(atof(partPrice),precision));
           sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
           //added new variable for Jira#1617
           listPrice = string(round(atof(final_price),precision));
           //output4=sbtostring(sb4);

          }

         }
        }
       }
      }
      /*******************************************************************************
       * Calculation of Contract/List Unit Price for Support/Maintenance
       * SKUs
       ******************************************************************************/
      else
      {

       Days=getdiffindays(StartDate,EndDate)+1;
       basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredpdt");
       supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType");
       subset=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredProduct_l ORDER BY Start_Date ASC");
       for res2 in basepriceset{
        Division=get(res2,"Business_Div");
       }
       for res1 in subset{
        if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
        {              basePrice=get(res1,"Base_Price");
        NDP=atof(get(res1,"Base_Support_Value"));


        }
       }
       if(Division=="CAD" or Division=="SED")
       { 
        Contract_no="NA";
        contractdetials=string[2];
        put(partNoDict,"Item1",coveredpdt);
        partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         partPrice=string(atof(contractdetials[0])*atof(exch));


        }

        For outputs in supportset{

         supp_rate=atof(get(outputs,"Support_Rate"));
         if(partPrice<>""){
          supp_price=String((round(atof(partPrice)*supp_rate,precision))*NDP*Days/365);

         }

         final_price=String(atof(supp_price));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(supp_price)*365/Days,precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(supp_price)*365/Days,precision));
         //output4=sbtostring(sb4);
        }
       }
       elif(Division=="BSN"){
        For outputs in supportset{
         supp_rate=atof(get(outputs,"Support_Rate"));
         supp_price=String((atof(basePrice)*supp_rate)*NDP);

         final_price=String(atof(supp_price)*atof(exch));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(basePrice)*atof(exch),precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(basePrice)*atof(exch),precision));
         //output4=sbtostring(sb4);
        }
       }
      }
      //End of code
     }
    }
   }
   else
   { if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
   if(licenseType=="Subscription" or coveredpdt<>""){
     final_price=String(line.hiddenPrice_l*(Days/365.0));
   }
   else{
     final_price=String(line.hiddenPrice_l);
   }
   partNo=line._part_number;
   sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(line.hiddenPrice_l,precision)),"|");
   //added new variable for Jira#1617
   listPrice = String(round(line.hiddenPrice_l,precision));
   //output4=sbtostring(sb4);

   }


   //Calling Eligible Discounts Calculator
   documentnum=line._document_number;
   partNumber  = line._part_number;
   teststring=line._line_item_comment;
   env_selected=line.enterEnvironment_l;
   //coveredpdt=line.coveredProduct_l;
   quantity = min_qty;
   
   //To calculate Ext Contract/List Price
   ExtListPrice =atof(final_price)*quantity;
   if((getoldvalue("enterEnvironment_l",atoi(line._document_number))<>line.enterEnvironment_l) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(line._price_quantity)) OR (getoldvalue("_line_item_comment",atoi(line._document_number))<>line._line_item_comment) or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))<>final_price) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(min_qty))  OR (getoldvalue("extContractListPrice_l",atoi(line._document_number))=="0"))
   {
    if(line._part_number<>"")
    { sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
    sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");
    totalExtPrice = totalExtPrice + ExtListPrice;
    }
   }
   else{
    if(line._part_number<>"")
    { ExtListPrice = line.extContractListPrice_l;
    sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
    sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");
    totalExtPrice = totalExtPrice + ExtListPrice;
    }
   }

   //Calling Requested Discounts Calculator
   requestedDiscount=line.requestedDiscount_l;
   
   //To Calculate Requested Discount and Ext Proposed Price
   if(final_price<>"0.0" AND round(requestedDiscount,0)==round(line.customDiscountValue_l,0) AND line.proposedNetUnitPriceRequested_l<>0.0 AND round(line.proposedNetUnitPriceRequested_l,4)<>round(line.proposedNetPriceRequestedHidden_ct,4) /*AND (line.hiddenProposedPrice_l == -1)*/){
    if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
     requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l*(Days/365.0),precision))*100/(round(ExtListPrice/quantity,precision)); 
    }
    else{
     requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l,precision))*100/(round(ExtListPrice/quantity,precision));
    }
    proposedPrice = round(ExtListPrice - ((ExtListPrice * requestedDiscount)/100),precision); 
   }
   
   
   
   if(line._model_name == "")
   {//if((getoldvalue("extProposedNetPriceRequested_l",atoi(line._document_number))<>string(ExtListPrice)) or (getoldvalue("requestedDiscount_l",atoi(line._document_number))<>string(requestedDiscount)) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(quantity))){
    proposedPrice=round(commerce.calculateProposedPrice_brcm(ExtListPrice,quantity,requestedDiscount),precision);
   //}else{
    //proposedPrice=line.extProposedNetPriceRequested_l;

   //}
   //added the comparison of requested discount and custom discount so that import/export proposed price do not affect discounts 
   //and proposed price for EURO and other currencies that have "," instead of "."
   
   if(line.hiddenProposedPrice_l <> -1 AND round(requestedDiscount,0)<>round(line.customDiscountValue_l,0))
    { 
    if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
    
     if(quantity <> 0 and round(ExtListPrice,4) <> 0.0 AND round(line.requestedDiscount_l,0)==round(line.customDiscountValue_l,0)){
      if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
      
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l*(Days/365.0),precision))*100/(round(ExtListPrice,precision)/quantity); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity*(Days/365.0),precision);
      
      
      }else{
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l,precision))*100/(round(ExtListPrice/quantity,precision)); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity,precision);
      
      }
     }
     
     sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");
    }
    
   //Changes made as per VIPER-355  -  Added additional conditions to handle zero priced products based on license type or covered product
   if(final_price=="0" or final_price =="0.0000" or final_price =="0.0"){
    if(round(atof(final_price),0) == 0 and round(ExtListPrice,0)==0){

     if(licensetype=="Subscription" or coveredpdt<>"")
     {
      proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity*(Days/365.0),precision);
      requestedDiscount=0;
     }
     else{
      proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity,precision);
      requestedDiscount=0;
     }    
    }
   }
    
   sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");  //Placed outside to set for all scenarios
   totalUSD=totalUSD + (proposedPrice/atof(exch));
   if(coveredpdt <> ""){
    totalMaintenanceFee = totalMaintenanceFee + round(proposedPrice,precision);
   }
   else{
    totalLicenseFee = totalLicenseFee + round(proposedPrice,precision);
    //sb6=stringbuilder(sb6,line._document_number,"~totalFee_l~",string(round(proposedPrice,precision)),"|");
   }
   /*
   if(line.fulfillmentSet_l <> "" and line.fulfillmentSet_l == fulfillmentSet and coveredpdt <> ""){
    totalFee = totalFee + round(proposedPrice,precision);
    sb6=stringbuilder(sb6,string((atoi(line._document_number)-1)),"~totalFee_l~",string(totalFee),"|");
   }
   else{
    fulfillmentSet = line.fulfillmentSet_l;
    totalFee = round(proposedPrice,precision);
   }
   */
   //To Calculate Proposed Net Unit Price
   if(licensetype=="Subscription" or coveredpdt<>"")
    {
    
    TermsDays = 0.0;
    TermsDays=getdiffindays(StartDate,EndDate)+1.0;
    DivFactor=TermsDays/365.0;
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
    }
    
   else 
    {
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round(proposedPrice/min_qty,precision)),"|");
    
    //output6=sbtostring(sb6);
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round(proposedPrice/min_qty,precision)),"|");
    //output7=sbtostring(sb7);
    }
   if(requestedDiscount<=0 and round(atof(final_price),0) == 0){
    requestedDiscount=0;
   }
   sb8=stringbuilder(sb8,line._document_number,"~requestedDiscount_l~",string(requestedDiscount),"|");
   //output8=sbtostring(sb8);
   sb9=stringbuilder(sb9,line._document_number,"~extProposedNetPriceRequested_l~",string(proposedPrice),"|");
   //output9=sbtostring(sb9);

   // Adding changes for New Annual Renewal
   sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,proposedPrice,line._document_number,line._part_number,line._model_name,line.contractEndDate_l,line.contractStartDate_l,line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));
   //output9a=sbtostring(sb9a);

   lineDiscount = atof(final_price) - proposedPrice/min_qty;
   if(requestedDiscount<=0){
    lineDiscount=0;
   }
   }
   sb10=stringbuilder(sb10,line._document_number,"~lineDiscountAmount_l~",string(lineDiscount),"|");
   //output10=sbtostring(sb10);
   sb11=stringbuilder(sb11,line._document_number,"~customDiscountValue_l~",string(requestedDiscount),"|");
   //output11=sbtostring(sb11);
   if(requestedDiscount<=0){
    extLineDiscount=0;
   }
  }
 }
 }
 sb = sbappend(sb,sb1,sb2,sb3,sb4,sb5,sb6,sb7,sb9, sb9a, sb8,sb10,sb11,result);
 result= sbtostring(sb);
}
//result= sbtostring(sb);
//merge approval flag
if(NOT startswith(dealType_t,"bSN"))
{
 dDRFlag = false;
}
//BROCAD-5278
/*if(renewalFlag)
{
//BROCAD2-3504-BEGIN
 if(aRR_t >= 99.7)
//BROCAD2-3504-END
 {
  renewalFlag = false;
 }
}*/
if(capacityFlag and NOT capacityDeviation_t)
{
 capacityFlag = false;
}

//validation rule: Validate Support Types on Line Items; adithya
sb2=stringbuilder(result,"1~validateSupportTypesOnLineItemsFlag_t~",string(validateSupportTypesOnLineItemsFlag),"|");
result=sbtostring(sb2);

//validation rule: Validate Covered Products On Lines; adithya
coveredPartArray = keys(coveredProductDictionary);
resultSet = bmql("select MPN,Support_Required from BRCM_Part_Master_Ext where MPN IN $coveredPartArray");
countOfRecords = 0;
for each_record in resultSet
{
 countOfRecords = countOfRecords + 1;
 part_number = get(each_record,"MPN");
 put(coveredProductsFromTableDictionary,part_number,part_number);
}
noOfProducts = sizeofarray(coveredPartArray);
if(countOfRecords <> noOfProducts)
{
 sb=stringbuilder(sb,"1~validateCoveredProductsOnLinesFlag_t~","true","|");
}
else{
 sb=stringbuilder(sb,"1~validateCoveredProductsOnLinesFlag_t~","false","|");
}

//constrain : Constrain Education Line Items
if(find(QuoteDealType, searchString) >= 0)
{
 parentPartArray = keys(parentPartDictionary);
 yesLiteral = "Y";
 resultSet = bmql("select MPN,Support_Required from BRCM_Part_Master_Ext where MPN IN $parentPartArray and Support_Required = $yesLiteral");
 count = 0;
 for record in resultSet
 {
  count = count + 1;
 }
 if(count <> 0){
  validation="true";
 }
}

sb=stringbuilder(result,commerce.updateBillingSchedule2(totalMaintenanceFee, totalLicenseFee), "1" , dlim , "totalValueUSD_t" , dlim , string(totalUSD) , dend, "1" , dlim , "totalValueUSDFloat_t" , dlim ,string(totalUSD) , dend, "1" , dlim , "totalProposedNetPriceLC_t" , dlim , string(total) , dend, "1" , dlim , "totalProposedNetPriceUSD_t" , dlim , string(totalUSD) , dend, "1" , dlim , "totalProposedNetPriceUSDFloat_t" , dlim , string(totalUSD) , dend,"1~totalExtListPrice_t~",string(totalExtPrice),"|","1~errorLines_t~",errorLines,"|","1~constrainEducationLineItems_t~",validation,"|", "1~capacityApprovalFlag_t~", String(capacityFlag), "|", "1~lineApprovalFlag_t~", String(approveFlag), "|", "1~dDRFlag_t~", String(dDRflag), "|",  "1~getTotalLicenseFee_t~", String(totalLicenseFee), "|", "1~getTotalMaintanenceFee_t~", String(totalMaintenanceFee), "|","1~eStoreEDI_t~",eDIsymorder,"|","1~totalLineItems_t~",String(numberOfLineItems),"|");
result=sbtostring(sb);
//end merge
return result;