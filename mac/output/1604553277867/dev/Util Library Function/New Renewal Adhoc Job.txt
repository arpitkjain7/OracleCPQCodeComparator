/************************************************
/Rule Name: Renewal Adhoc Job
/Description: Existing Renewal Program is Redesigned for Adhoc Quote Creation
/Author: Ravi / Vamsi
/Creation Date: 05-May-2020
History:
 Date          Author            Comment 
 25/09/2019    M Vamsi   VIPER-452 Auto create Renewal quotes based on the accout classification 
 27/09/2019    Ravi   VIPER - 452 - Trigger Sync to Opty and Submit To Order actions based on account type 
 16/01/2020    Ravi   SYMINT-3713 - Auto populate Route to Market, eStore flag, Quote Output Type for SED renewals
 01/13/2020    M Vamsi   SYMINT-3142 - Fetch Site Address Details on System Generated Renewal Quotes for Core / Non Core and commercial accounts
 03/02/2020    M Vamsi   SYMINT-5528 - Support Provider - Systematically Populate on Renewal Quotes
 03/26/2020    Arjun   SYMINT-6695 - Replacing tag Supportprovider_l with supportSiteID_l
 04/16/2020    M Vamsi   VIPER-778 - Resolve 20A upgrade issue
 05/08/2020    Ravi Kumar  VIPER - 818 - Create Renewal Ad-hoc job to generate renewal quotes based on selected Contracts
   06/15/2020    Shruti           VIPER-872-changes for stated renewal 
   07/10/2020  Satyabrata               VIPER-920 Adhoc Renewal process enhancements
   07/13/2020  Satyabrata               VIPER-926 Adhoc Renewal process enhancements
   09/21/2020 Kavita Lolla  VIPER-1000 - Defaulting output type to Symantec template as ENT are getting decommissioned
*/

//Variable Declaration
batchNumber = ""; 
previousGroupId = "";
payload = dict("string");
lang = dict("string");
fields = dict("string");
username = "";
password = "";
quoteNumber = "";
fileLocation = "";
fileLocation1 = "";
soapendpoint = "";
status = "IN_PROGRESS";
autoRenewal = "";
quoteName = "";
transactionID = "";
billToCustomer = "";
billToCustomerNumber = "";
soldToCustomer = "";
soldToCustomerNumber = "";
endCustomerERPName = "";
endCustomerERPID = "";
outputType = "";
//VIPER-1000 - setting default language to english
language="";
//VIPER-1000 - End
dealType = "";
startDate = "";
endDate = "";
quoteEffectiveDate = "";
quoteExpirationDate = "";
billtocontactemail = "";
sb = stringbuilder();
shipToCountryMenu = "";
linecurrency = "";
endCustomerID = "";
optyID = "";
optyNumber = "";
paymentTerm = "";
coreAccount = "ZCA_CORE";
paymentPlan = "";
createdBy = "Integration User";
autoBook = "false";
eStoreEDI = "No";
businessDivision = "";
quoteAndContractValidation = "no";
licenseeAccNum = "";
LicenseeName = "";
headersDict = dict("string"); 
usernameFlagUpdate = "";
passwordFlagUpdate = "";
fileLocationFlagUpdate = "";
soapendpointFlagUpdate = "";
usernameFlagDeploy = "";
passwordFlagDeploy = "";
fileLocationFlagDeploy = "";
soapendpointFlagDeploy = "";
finalPartToadd = recordset();
classificationCd = "";
dealType1 = "";
source = "";
licenseeNum = "";
licenseeNum1 = "";
//Begin : SYMINT-3713
partyID1 = "";
partnerName1 = "";
//End : SYMINT-3713
instOwnerName = "";
shipToCoutry = "";
operatingUnit = "";
recordUpdateString = "";
accounttype = "ZCA_CORE";
soldtositenumber = "";
billtositeNumber = "";
billtocountry = "";
shiptositeNumber = "";
shiptocountry = "";
shiptoCustomer = "";
shipToCntctMail = "";
endCustomerSiteNum = "";
approvalDate = "";
submittedDate = "";
soldToCntctMail = "";
soldToContactName = "";
shipToCustomerSite = "";
shipToContactName  = "";
partner2 = "";
quoteOwner = "";
createtransactionRequest = "";
shipToAddress = "";
shipToAddress_2 = "";
shipToCity = "";
shipToState = "";
shipToZip = "";
shipToCountry = "";
billToAddress = "";
billToCity = "";
billToState = "";
billToZip = "";
soldToAddress = "";
soldToAddress2 = "";
soldToCity = "";
soldToState = "";
soldToCountry = "";
soldToZip = "";
quoteOwnerMail = "integration.user@broadcom.com";
newQuoteOwner = "";
endCustomerParentId = "";
endCustomerGlobalParentName = "";
endCustomerGrandParentId = "";
renewalOwnerID = "";
routeToMarket = "";
supportProvider = "";
renewalQtr = "";
statedRenewal = "";
sNO = "11";
linestobeprocessed = 0;
classification_CD = "";
classificationFlag = "";
RenewalBatchStart = datetostr(getdate());
renewalResult = bmql("select Days_Before_Renewal from BRCM_Renewal_Before");
 //Retrieve existing Batch Number and increment to create all renewal Quotes under the new batch Number for the current job
       batchNumberResult = bmql("select Batch_Number from Renewal_Batch_Detail order by Batch_Number DESC");
    for batch in batchNumberResult
    {
            batchNumber = get(batch,"Batch_Number");
  break;
    }
batchNumber = string(atoi(batchNumber)+1);
renewalBatchDetailUpdatePayload = dict("string");
 renewalBatchDetailUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Batch_Detail_Update'");
   for each in renewalBatchDetailUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalBatchDetailUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalBatchDetailUpdatePayload,"Password", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SNO>"+sNO+"</bm:SNO>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Start_Time>"+currentsystemDate+"</bm:Batch_Start_Time>";
   recordUpdateString = recordUpdateString +"<bm:Program_ID>"+Program_ID+"</bm:Program_ID>";
   recordUpdateString = recordUpdateString +"<bm:Status>"+"In Progress"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   
   
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalBatchDetailUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalBatchDetailUpdate=applytemplate(fileLocationFlagUpdate,renewalBatchDetailUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&lt;","<");
   quoteRequestRenewalBatchDetailUpdate= replace(quoteRequestRenewalBatchDetailUpdate,"&gt;",">");
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update BRCM_Renewal_Job table
   print "======================== Renewal Batch Detail Update Start request";
   print quoteRequestRenewalBatchDetailUpdate;
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalBatchDetailUpdate, "error",headersDict);
   print "======================== Renewal Batch Detail Update Start response";
   print response;
//insertRtoDashboard = bmql("insert into RENEWAL_DASHBOARD (Batch_Number,Start_Date,Status) values ($batchNumber,$RenewalBatchStart,$status)");
//start of group id commenting
//Insert details of renewal job triggered into Dashboard
//Fetching GROUP_ID from BRCM_Entitlements table 
/*fetchGroups = bmql("select GROUP_ID from BRCM_Entitlement_1 where GROUP_ID <> 0 and QUOTE_NUMBER IS NULL and GROUP_ID >= $StartGrpID and GROUP_ID <= $EndGrpID");
print fetchGroups;
for group in fetchGroups
{
 groupID = get(group, "GROUP_ID");
 
 
 if(previousGroupId <> groupID)
 {*/
//end of group id commenting
  sb = stringbuilder();
  createtransactionRequest = "";
  payload_1 =dict("string");
  quoteRequest= "";
  payload = dict("string");
  partItemstring = "";
  defaultErrorMessage_1="";
  count = 1;
  newQuoteOwner = "";
  endCustomerParentId = "";
  endCustomerGlobalParentName = "";
  endCustomerGrandParentId = "";
  totalEAR = 0.0;
  //fetching all the required information from different tables to create quote based on GROUP_ID
  //SYMINT-3142- Start - Fetching all the required address details from Asset_EXT table
  //SYMINT-5528- Start - Fetching Support Provider details from Asset EXT tables
  //06/15/2020    Shruti           VIPER-872-changes for stated renewal 
  //06/30/2020    Satyabrata   VIPER-920-Update Adhoc Renewal Job to allow user to create renewal for Expired Contract
  //07/10/2020    Satyabrata       VIPER-926-Adhoc Renewal process enhancements
  finalPartToadd = bmql("select RENEWAL_ASSETS.SOLD_TO_ADDRESS,RENEWAL_ASSETS.SOLD_TO_ADDRESS_2,RENEWAL_ASSETS.SOLD_TO_CITY,RENEWAL_ASSETS.SOLD_TO_STATE,RENEWAL_ASSETS.SOLD_TO_COUNTRY,RENEWAL_ASSETS.SOLD_TO_ZIPCODE,RENEWAL_ASSETS_EXT.STATED_RENEWAL,RENEWAL_ASSETS_EXT.SUPPORT_PROVIDER,RENEWAL_ASSETS.CONTRACT_LINE_NUM,RENEWAL_ASSETS.SOURCE,RENEWAL_ASSETS.LICENSEE_ACNT_NUM,RENEWAL_ASSETS.CLASSIFICATION_CD,RENEWAL_ASSETS_EXT.VC_PRDCT_INSTS_ID,RENEWAL_ASSETS_EXT.SHIP_TO_CUST_NUMBER,RENEWAL_ASSETS_EXT.SHIP_TO_CNTCT_EMAIL,RENEWAL_ASSETS_EXT.SOLD_TO_CNTCT_NAME , RENEWAL_ASSETS_EXT.SHIP_TO_CUST_NAME,RENEWAL_ASSETS_EXT.SHIP_TO_CNTCT_NAME,RENEWAL_ASSETS_EXT.PARTNER_2,RENEWAL_ASSETS_EXT.LICENSEE_NAME,RENEWAL_ASSETS_EXT.CONTRACT_END_DATE,BRCM_Part_Master.MPN,BRCM_Part_Master.Product_Name,BRCM_Part_Master.Migration_Type,RENEWAL_ASSETS_EXT.Sell_To_Site_Number,RENEWAL_ASSETS_EXT.Bill_To_Site_Number,RENEWAL_ASSETS_EXT.Bill_To_Country,RENEWAL_ASSETS_EXT.Ship_To_Site_Number, BRCM_Part_Master.Replacement_Product,BRCM_Part_Master.Replacement_Pdt_Val,BRCM_Part_Master.Qty_Ratio_Conversion, BRCM_Part_Master.Upgrade_Material,RENEWAL_ASSETS.INST_POSTAL_CODE,RENEWAL_ASSETS.UNIT_PRICE,RENEWAL_ASSETS.LICENSE_TYPE,RENEWAL_ASSETS.EXP_ANNUAL_RENEWAL,RENEWAL_ASSETS.LICENSE_METRIC,RENEWAL_ASSETS.ENV_TYPE,RENEWAL_ASSETS.SPECIAL_METRIC_TYPE,RENEWAL_ASSETS.METRIC_QUANTITY,RENEWAL_ASSETS.INST_CITY,RENEWAL_ASSETS_EXT.OPERATING_SYS,RENEWAL_ASSETS.INST_ADDR1,RENEWAL_ASSETS.INST_ADDR2,RENEWAL_ASSETS.INST_ADDR3,RENEWAL_ASSETS.INST_COUNTRY,RENEWAL_ASSETS.INST_OWNER_CUST_NUM,RENEWAL_ASSETS.INST_OWNER_NAME,RENEWAL_ASSETS.SHIP_DATE,RENEWAL_ASSETS.EOS_DATE,RENEWAL_ASSETS.EXISTING_SUPPORT_TYP,RENEWAL_ASSETS_EXT.SHIP_TO_ADDRESS,RENEWAL_ASSETS_EXT.SHIP_TO_ADDRESS_2,RENEWAL_ASSETS_EXT.SHIP_TO_CITY,RENEWAL_ASSETS_EXT.SHIP_TO_STATE,RENEWAL_ASSETS_EXT.SHIP_TO_ZIP,RENEWAL_ASSETS_EXT.BILL_TO_ADDRESS,RENEWAL_ASSETS_EXT.BILL_TO_CITY,RENEWAL_ASSETS_EXT.BILL_TO_STATE,RENEWAL_ASSETS_EXT.BILL_TO_ZIP,RENEWAL_ASSETS.EXISTING_QUANTITY,RENEWAL_ASSETS.SERVICE_ITEM,RENEWAL_ASSETS.SERIAL_NUMBER,RENEWAL_ASSETS.CONTRACT_NUMBER,RENEWAL_ASSETS.ENTITLEMENT_STR_DT,RENEWAL_ASSETS.ENTITLEMENT_EXP_DT,RENEWAL_ASSETS.COVERED_ITEM,RENEWAL_ASSETS.COVERED_ITEM_DESC,RENEWAL_ASSETS.COVERED_PRDCT_FAMILY,RENEWAL_ASSETS.BILL_TO_CUST_NAME,RENEWAL_ASSETS.BILL_TO_CUST_NUMBER,RENEWAL_ASSETS.SOLD_TO_CUST_NAME,RENEWAL_ASSETS.SOLD_TO_CUST_NUMBER,RENEWAL_ASSETS.TOT_QUANTITY,RENEWAL_ASSETS.INSTANCE_IDENTIFIER,RENEWAL_ASSETS.SHIP_TO_COUNTRY,RENEWAL_ASSETS.OPERATING_UNIT,RENEWAL_ASSETS_EXT.LINE_CURRENCY,RENEWAL_ASSETS_EXT.BILL_TO_CNTCT_EMAIL,RENEWAL_ASSETS_EXT.SOLD_TO_CNTCT_EMAIL,RENEWAL_ASSETS.INST_OWN_SITE_NUM,Renewal_Staging.Primary_Contract from Renewal_Staging INNER JOIN RENEWAL_ASSETS ON RENEWAL_ASSETS.CONTRACT_NUMBER = Renewal_Staging.CONTRACT_NUMBER INNER JOIN BRCM_Part_Master ON RENEWAL_ASSETS.SERVICE_ITEM = BRCM_Part_Master.MPN INNER JOIN RENEWAL_ASSETS_EXT ON RENEWAL_ASSETS.SERIAL_NUMBER = RENEWAL_ASSETS_EXT.SERIAL_NUMBER and RENEWAL_ASSETS.CONTRACT_LINE_NUM = RENEWAL_ASSETS_EXT.CONTRACT_LINE_NUM and RENEWAL_ASSETS.CONTRACT_NUMBER = RENEWAL_ASSETS_EXT.CONTRACT_NUMBER where RENEWAL_ASSETS.TRANSACTION_ID IS NULL and (RENEWAL_ASSETS_EXT.ACTIVE_STATUS = 'Active' OR RENEWAL_ASSETS_EXT.ACTIVE_STATUS = 'Expired') and RENEWAL_ASSETS.TOT_QUANTITY > 0 and RENEWAL_ASSETS_EXT.LINE_CURRENCY <> 'VES' and Renewal_Staging.USER_ID=$currentUser AND RENEWAL_ALLOWED='Y'");
  //print finalPartToadd;
  //SYMINT-5528- end
  //SYMINT-3142 - END
  //Iterating over the resultset that was fetched.
  
  
  for eachPart in finalPartToadd
  {
   // re-initializing variables for every quote
   supportPart = "";
   Quantity="";
   quoteRequest= "";
   jsonObj = json();
   transactionID_t = "";
   
   transactionID="";
   linestobeprocessed = linestobeprocessed +1;
   supportProvider = "";
   createtransactionRequest = "";
   headersDict = dict("string"); 
   currentsystemDate = datetostr(getdate());
   contractStartDate_1 = "";
   contractStartDate_1_str = "";
   response="";
   recordUpdateString = "";
   linecurrency = "";
   dealType = "";
   licenseeNum ="";
   licenseeNum1 = "";
   //Begin : SYMINT-3713
   partyID1 = "";
   partnerName1 = "";
   //End : SYMINT-3713
   billCustNumber = "";
   endCustomerID = "";
   optyID = "";
   optyNumber = "";
   startDate = "";
   paymentTerm = "";
   outputType="";
   billToCustomer = "";
   quoteName = "";
   billToCustomerNumber = "";
   soldToCustomer = "";
   soldToCustomerNumber = "";
   quoteEffectiveDate = "";
   contractStartDate_1 = "";
   startDate = "";
   endDate = "";
   endCustomerERPName = "";
   endCustomerERPID = "";
   endOfsupportDate = "";
   gBU_Driver = "";
   quoteExpirationDate = "";
   contractEndDate_1 = "";
   contractheaderEndDate1 = "";
   quotetype = "";
   source = "";
   ownerName = "";
   shipToCoutry = "";
   operatingUnit = "";
   licenseeNum = "";
   licenseeNum1 = "";
   instOwnerName = "";
   //06/15/2020    Shruti           VIPER-872-changes for stated renewal 
   statedRenewal = "";
   billtocontactemail = "";
   //shipToCountryMenu = "";
   status = "IN_PROGRESS";
   paymentPlan = "";
   createdBy = "Integration User";
   autoBook = "false";
   eStoreEDI = "No";
   dealType1 = "";
   lineApprovalStatus ="";
   businessDivision = "";
   coreAccount = "ZCA_CORE";
   quoteAndContractValidation = "no";
   classificationCd = "";
   accounttype = "ZCA_CORE";
   licenseeAccNum = "";
   LicenseeName = "";
   autoRenewal = "";
   soldtositenumber = "";
   billtositeNumber = "";
   billtocountry = "";
   shiptositeNumber = "";
   shiptocountry = "";
   shiptoCustomer = "";
   shipToCntctMail = "";
   endCustomerSiteNum = "";
   approvalDate = "";
   submittedDate = "";
   soldToCntctMail = "";
   soldToContactName = "";
   shipToCustomerSite = "";
   shipToContactName  = "";
   partner2 = "";
   quoteOwner = "";
   routeToMarket = "";
   shipToAddress = "";
   shipToAddress_2 = "";
   shipToCity = "";
   shipToState = "";
   shipToZip = "";
   shipToCountry = "";
   billToAddress = "";
   billToCity = "";
   billToState = "";
   billToZip = "";
   soldToAddress = "";
   soldToAddress2 = "";
   soldToCity = "";
   soldToState = "";
   soldToCountry = "";
   soldToZip = "";
   renewalOwnerID = "";
   //classification_CD = "";
   //renewalQtr = "";
   quoteOwnerMail = "integration.user@broadcom.com";
   partNo = get(eachPart,"SERVICE_ITEM");
   qty =get(eachPart, "TOT_QUANTITY");
   linecurrency = get(eachPart,"LINE_CURRENCY");
   
   if(get(eachPart,"ENTITLEMENT_EXP_DT") <> "" and NOT isnull(get(eachPart,"ENTITLEMENT_EXP_DT")))
   {
    contractStartDate = adddays(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"),1);
    stringStartDate = datetostr(contractStartDate,"yyyy-MM-dd");
    startDate = datetostr(contractStartDate,"yyyy-MM-dd");
   }
   if(get(eachPart,"SOURCE") == "BSN")
   {
    dealType = "bSNRenewal";
   
   }
   elif(get(eachPart,"SOURCE") == "CA")
   {
    dealType = "cADRenewal";
   
   }
   elif(get(eachPart,"SOURCE") == "SYM")
   {
    dealType = "cADRenewal";
   }
   dealType1 = dealType +"~"+ linecurrency +"~"+startDate;
   licenseeNum = get(eachPart,"LICENSEE_ACNT_NUM");
   if(classification_CD == "" and classificationFlag <> "Yes"){
    classificationFlag = "Yes";
   renewalOwnerClassificationResponse = util.renewalOwnerForCommercial_t(licenseeNum, "");
   
   if(NOT isnull(renewalOwnerClassificationResponse) and trim(renewalOwnerClassificationResponse) <> "")
   {
    renewalOwnerClassificationDetails = split(renewalOwnerClassificationResponse,"~");
    renewalOwnerID = renewalOwnerClassificationDetails[0];
    
    if(NOT isnull(renewalOwnerClassificationDetails[1]) and trim(renewalOwnerClassificationDetails[1]) <> "")
    {
    classification_CD = renewalOwnerClassificationDetails[1];
    }
    
    if(renewalOwnerID <> "")
    {
     quoteOwnerDetails = bmql("select Users, EMailID from BRCM_Users where PartyResourceId = $renewalOwnerID");
     for quoteOwnerDetail in quoteOwnerDetails
     {
      quoteOwner = get(quoteOwnerDetail,"Users");
      quoteOwnerMail = get(quoteOwnerDetail,"EMailID");
     }
     if(quoteOwner <> "")
     {
     newQuoteOwner = quoteOwner+"~"+quoteOwnerMail;
     }
     else
     {
      quoteOwner = "Integration User";
     }
     
    }
   }
   }
   
   
   
   //added as part of enhancement 5396
   billCustNumber = get(eachPart,"BILL_TO_CUST_NUMBER");
   licenseeNum1 = licenseeNum + "~" + billCustNumber;
   partItemstring = partItemstring +"<bm:partItem>";
   partItemstring = partItemstring +"<bm:part>"+partNo+"</bm:part>";
   partItemstring = partItemstring +"<bm:quantity>"+qty+"</bm:quantity>";
   partItemstring = partItemstring +"<bm:price_book_var_name>_default_price_book</bm:price_book_var_name>";
   partItemstring = partItemstring +"</bm:partItem>";
  
  
  
   quoteEffectiveDate = datetostr(_current_date,"yyyy-MM-dd HH:mm:ss");
   contractStartDate_1 = get(eachPart,"ENTITLEMENT_EXP_DT");
   if(contractStartDate_1 <> "" and NOT isnull(contractStartDate_1))
   {
    contractStartDate_1_str = datetostr(strtojavadate(contractStartDate_1,"yyyy-MM-dd"),"yyyy-MM-dd HH:mm:ss");
   }
   stringStartDate = "";
   if(contractStartDate_1 <> "" and NOT isnull(contractStartDate_1))
   {
    contractStartDate = adddays(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"),1);
    stringStartDate = datetostr(contractStartDate,"yyyy-MM-dd");
    startDate = datetostr(contractStartDate,"yyyy-MM-dd HH:mm:ss");
    //Add 365 days to get Contract End Date
    contractEndDate = adddays(strtojavadate(startDate,"yyyy-MM-dd"),365);
    endDate = datetostr(contractEndDate,"yyyy-MM-dd HH:mm:ss");
    //Changes made as part of VIPER - 281 - As Contract End date should always be a day less than contract start date
    //Changes made as part of VIPER - 281 - Compare days,month of contract start and end date and take a day off from contract end date if contract start and end date has same days and month.
    endMonth = substring(endDate,5,7);
    endDays = substring(endDate,8,10);
    startMonth = substring(startDate,5,7);
    startDays = substring(startDate,8,10);
    if( startDays == endDays and startMonth == endMonth)
    {
    contractEndDate = minusdays(contractEndDate,1);
    endDate = datetostr(contractEndDate,"yyyy-MM-dd HH:mm:ss");
    }
    // Logic to fetch Quarter data from Renewal QTR Table based on entitlement expiration date
    if(trim(renewalQtr) == "" OR isnull(renewalQtr))
    {
     calendarExpirationDate = get(eachPart,"ENTITLEMENT_EXP_DT");
     quarterResults = bmql("select QTR_NAME from RENEWAL_QTR_DATA where CALENDAR_DATE = $calendarExpirationDate");
     for quarter in quarterResults
     {
      renewalQtr = get(quarter,"QTR_NAME");
     }
    }
    
   }
   
   
   billToCustomer = get(eachPart,"BILL_TO_CUST_NAME");
   billToCustomerNumber = get(eachPart,"BILL_TO_CUST_NUMBER");
   //06/15/2020    Shruti           VIPER-872-changes for stated renewal 
   statedRenewal = get(eachPart,"STATED_RENEWAL");
   billtocontactemail = get(eachPart,"BILL_TO_CNTCT_EMAIL");
   soldToCustomer = get(eachPart,"SOLD_TO_CUST_NAME");
   soldToCustomerNumber = get(eachPart,"SOLD_TO_CUST_NUMBER");
   endCustomerERPName = get(eachPart,"INST_OWNER_NAME");
   endCustomerERPID = get(eachPart,"INST_OWNER_CUST_NUM");
   endOfsupportDate = get(eachPart,"EOS_DATE");
   instOwnerName = get(eachPart,"INST_OWNER_NAME");
   licenseeNum = get(eachPart,"LICENSEE_ACNT_NUM");
   linecurrency = get(eachPart,"LINE_CURRENCY");
   //shipToCountryMenu = get(eachPart,"SHIP_TO_COUNTRY");
   /*Bill to and Sold to Details for Order Submission*/
   soldtositenumber = get(eachPart,"Sell_To_Site_Number");
   billtositeNumber = get(eachPart,"Bill_To_Site_Number");
   billtocountry = get(eachPart,"Bill_To_Country");
   shiptositeNumber = get(eachPart,"Ship_To_Site_Number");
   shipToCoutry = get(eachPart,"SHIP_TO_COUNTRY");
   operatingUnit = get(eachPart,"OPERATING_UNIT");
   shiptoCustomer = get(eachPart,"SHIP_TO_CUST_NUMBER");
   shipToCntctMail = get(eachPart,"SHIP_TO_CNTCT_EMAIL");
   soldToCntctMail = get(eachPart,"SOLD_TO_CNTCT_EMAIL");
   endCustomerSiteNum = get(eachPart,"INST_OWN_SITE_NUM");
   soldToContactName = get(eachPart,"SOLD_TO_CNTCT_NAME");
   shipToCustomerSite = get(eachPart,"SHIP_TO_CUST_NAME");
   shipToContactName  = get(eachPart,"SHIP_TO_CNTCT_NAME");
   partner2 = get(eachPart,"PARTNER_2");
   productInstanceID = get(eachPart,"VC_PRDCT_INSTS_ID");
   //SYMINT-3142 - Start - assigning values to variables
   shipToAddress = get(eachPart,"SHIP_TO_ADDRESS");
   shipToAddress_2 = get(eachPart,"SHIP_TO_ADDRESS_2");
   shipToCity = get(eachPart,"SHIP_TO_CITY");
   shipToState = get(eachPart,"SHIP_TO_STATE");
   shipToZip = get(eachPart,"SHIP_TO_ZIP");
   shipToCountry = get(eachPart,"SHIP_TO_COUNTRY");
   billToAddress = get(eachPart,"BILL_TO_ADDRESS");
   billToCity = get(eachPart,"BILL_TO_CITY");
   billToState = get(eachPart,"BILL_TO_STATE");
   billToZip = get(eachPart,"BILL_TO_ZIP");
   soldToAddress = get(eachPart,"SOLD_TO_ADDRESS");
   soldToAddress2 = get(eachPart,"SOLD_TO_ADDRESS_2");
   soldToCity = get(eachPart,"SOLD_TO_CITY");
   Primary_Contract = get(eachPart,"Primary_Contract");
   soldToState = get(eachPart,"SOLD_TO_STATE");
   soldToCountry = get(eachPart,"SOLD_TO_COUNTRY");
   soldToZip = get(eachPart,"SOLD_TO_ZIPCODE");
   existingQuantity = get(eachPart,"TOT_QUANTITY");
   expAnnualrenewal = get(eachPart,"EXP_ANNUAL_RENEWAL");
   totalEAR = totalEAR + atof(expAnnualrenewal);
   totalEARStr = formatascurrency(totalEAR,linecurrency);
   
   if(atoi(existingQuantity) <> 0 and expAnnualrenewal <> "")
   {
    previousprice = round(atof(expAnnualrenewal)/atoi(existingQuantity),4);
    
    expAnnualrenewal = formatascurrency(atof(expAnnualrenewal), linecurrency);
    
   }
   else
   {
    previousprice = 0.0;
    
    expAnnualrenewal = formatascurrency(0.0, linecurrency);
    
   }
  
   //SYMINT-5528 - Start - assigning values to variables
   supportProvider = get(eachPart,"SUPPORT_PROVIDER");
   //SYMINT-5528- end
   //SYMINT-3142 - end
   //retrieving ship to country based on operating unit and deal type.
   if(trim(shipToCountryMenu) == "" OR isnull(shipToCountryMenu))
   {
   shipToOUResult = bmql("select ShipToCountry from OU_ShiptTo_Mapping where OU_Name = $operatingUnit and Group = $dealType");
   for shipToOU in shipToOUResult
   {
    shipToCountryMenu = get(shipToOU,"ShipToCountry");
   }
   }
   
   
   if( dealType == "bSNRenewal")
   {
    source = "BSN";
    dealType = "bSNRenewal";
    outputType = "bSNRenewal";
    businessDivision = "Broadcom/BSN";
    quoteEffectiveDate_1 = "";
    quoteExpirationDate = "";
   if(quoteEffectiveDate <> "" and NOT isnull(quoteEffectiveDate))
   {
    quoteEffectiveDate_1 = substring(quoteEffectiveDate,0,10);
    quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),90),"yyyy-MM-dd HH:mm:ss");
   }
   quoteName = endCustomerERPName + " / " + "Renewal" + " / " + stringStartDate;
   }
   //For CA Quotes assign endCustomerERPID as licenseAccountNo
   if(dealType == "cADRenewal")
   {
    endCustomerERPID = get(eachPart,"LICENSEE_ACNT_NUM");
    endCustomerERPName = get(eachPart,"LICENSEE_NAME");
    businessDivision = "CA";
    //print "========== inside cad renewal";
    //print endCustomerERPName;
    source = "CA";
    dealType = "cADRenewal";
    //VIPER-1000 - Begin - Defaulting output type to Symantec template as ENT are getting decommissioned
   // outputType = "cADirectDealRenewalOnly";
    outputType = "Symantec Direct Quote Output";
    language = "english";
    //VIPER-1000 - End
    routeToMarket = "direct";
   if(EndOfSupportDate <> "" and NOT isnull(EndOfSupportDate))
   {
    endOfSupportDate_1 = substring(EndOfSupportDate,0,10);
   }
   //quoteName = endCustomerERPName + ":" + "Renewal" + ":" + stringStartDate;
   quoteName = endCustomerERPName + " / " + "CA" + " / " + renewalQtr  + " / " + totalEARStr;
   
   /*if(quoteEffectiveDate <> "" and NOT isnull(quoteEffectiveDate))
   {
    quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),365),"yyyy-MM-dd HH:mm:ss");
   }*/
   //added this for making quoteExpirationDate to same as support end date; Kacharya; Jira-572
   //quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
   if(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd")<=strtojavadate(datetostr(getDate(),"yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd"))
   {
    quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),30),"yyyy-MM-dd HH:mm:ss");
   }
   else
   {
   quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
   }
   }
   if(dealType == "cADRenewal" and classification_CD == "Commercial" and get(eachPart,"SOURCE") == "SYM")
   {
    approvalDate = datetostr(_current_date,"yyyy-MM-dd HH:mm:ss");
    submittedDate = datetostr(_current_date,"yyyy-MM-dd HH:mm:ss");
    source = "SYM";
    accounttype = "Commercial";
    coreAccount = "Commercial";
    licenseeAccNum = endCustomerERPID;
    LicenseeName = endCustomerERPName;
    status = "ORDER_SUBMITTED";
    paymentPlan = "paidInFull";
    businessDivision = "Symantec"; 
    quoteAndContractValidation = "yes";
    autoBook = "true";
    eStoreEDI = "Yes";
    outputType = "Symantec Indirect Quote Output";
    //VIPER-1000 - Setting language attribute to english
    language = "english";
    //VIPER-1000 - End
    quoteOwner = createdBy;
    routeToMarket = "tier2";
    quoteName = endCustomerERPName + " / " + "SYM" + " / "  + renewalQtr  + " / "+ totalEARStr;
    /*
    if(quoteEffectiveDate <> "" and NOT isnull(quoteEffectiveDate))
    {
     quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),60),"yyyy-MM-dd HH:mm:ss");
    }*/
    //added this for making quoteExpirationDate to same as support end date; Kacharya; Jira-572
    if(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd")<= strtojavadate(datetostr(getDate(),"yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd"))
    {
    quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),30),"yyyy-MM-dd HH:mm:ss");
    }
    else
    {
    quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
    }
    
    //Added this to set QuoteExpirationDate to ENTITLEMENT_EXP_DT + 90 by Arjun; VIPER-639
    //quoteExpirationDate = datetostr(adddays(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"),90), "yyyy-MM-dd HH:mm:ss");
    //quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
    //modification done to quote expiration date for Q1 and Q4 commercial; VIPER-687; Kacharya
    //quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),120), "yyyy-MM-dd HH:mm:ss");
    
    if (status == "APPROVED")
    {
    
     lineApprovalStatus = "APPROVED";
    }
   }
   if(dealType == "cADRenewal" and get(eachPart,"SOURCE") == "SYM" and (classification_CD == "ZCA_CORE" OR classification_CD == "ZCA_NON_CORE"))
   {
    
    source = "SYM";
    status = "IN_PROGRESS";
    //Begin : SYMINT-3713
    routeToMarket = "tier2";
    eStoreEDI = "Yes";
    outputType = "Symantec Indirect Quote Output";
    //VIPER-1000 - Setting language attribute to english
    language = "english";
    //VIPER-1000 - End
    //End: SYMINT-3713
    /*
    quoteOwnerMail = trim(get(eachPart,"ASSET_OWNER"));
    if(quoteOwnerMail <> "")
    {
     quoteOwnerDetails = bmql("select Users, PartyResourceId from BRCM_Users where EMailID = $quoteOwnerMail");
     for quoteOwnerDetail in quoteOwnerDetails
     {
      quoteOwner = get(quoteOwnerDetail,"Users");
      partyID1 = get(quoteOwnerDetail,"PartyResourceId");
     }
     if(quoteOwner <> "")
     {
     newQuoteOwner = quoteOwner+"~"+quoteOwnerMail;
     }
     else
     {
      quoteOwner = "Integration User";
     }
     
    }
    */ 
    // quote owner will come from OEC
    //quoteOwner = "Integration User";
    businessDivision = "Symantec";
    
    //quoteName = endCustomerERPName + ":" + "Renewal" + ":" + stringStartDate;
    quoteName = endCustomerERPName + " / " + "SYM" + " / "  + renewalQtr  + " / "+ totalEARStr;
    quoteExpirationDate = "";
    //added this for making quoteExpirationDate to same as support end date; Kacharya; Jira-572
    //quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
    if(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd")<= strtojavadate(datetostr(getDate(),"yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd"))
    {
    quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),30),"yyyy-MM-dd HH:mm:ss");
    }
    else
    {
    quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
    }
   }
 
  
  autoRenewal = "no";
  trans = "";
  returnString = "";
  
   count = count +1;
   line1 = get(eachPart, "INST_ADDR1");
   line2 = get(eachPart, "INST_ADDR2");
   line3 = get(eachPart, "INST_ADDR3");
   fullAddress = line1 + ", "+line2 + ", "+line3;
   fullAddress = substring(fullAddress, 0, 254);
    
   licenseType = get(eachPart,"LICENSE_TYPE");
   licenseMetric = get(eachPart,"LICENSE_METRIC");
   environmentCode = get(eachPart,"ENV_TYPE");
   if(licenseType == "P" or licenseType == "p")
   {
           licenseType = "Perpetual";
   }
   if(licenseType == "S" or licenseType == "s")
   {
           licenseType = "Subscription";
   }
   if(licenseType == "L" or licenseType == "l")
   {
           licenseType = "UMF";
   }
   if(environmentCode == "PD" or environmentCode == "pd")
   {
           environmentCode = "Production";
   }
   if(environmentCode == "NP" or environmentCode == "np")
   {
           environmentCode = "Non Production";
   }
   if(environmentCode == "DR" or environmentCode == "dr")
   {
           environmentCode = "Disaster Recovery";
   }
   if(environmentCode == "PL" or environmentCode == "pl")
   {
           environmentCode = "Production Limited Use";
   }
   if(environmentCode == "NL" or environmentCode == "nl")
   {
           environmentCode = "Non Production Limited Use";
   }
   specialMetricType = get(eachPart,"SPECIAL_METRIC_TYPE");
   metricQuantity = get(eachPart,"METRIC_QUANTITY");
   //sb = sbappend(sb,"<bm:transactionLine bm:bs_id=\""+"CPQ-0000"+"\" bm:buyer_company_name=\"avagotechtest2\" bm:buyer_user_name=\"kmrinal\" bm:currency_pref=\""+linecurrency+"\" bm:data_type=\"2\" bm:document_name=\"Transaction Line\" bm:document_number=\""+string(count)+"\" bm:document_var_name=\"transactionLine\" bm:process_var_name=\"oraclecpqo\" bm:supplier_company_name=\"avagotechtest2\">");
   sb = sbappend(sb, "<bm:transactionLine bm:bs_id=\""+"CPQ-0000"+"\" bm:buyer_company_name=\"avagotechtest2\" bm:buyer_user_name=\"Integration User\" bm:currency_pref=\""+linecurrency+"\" bm:data_type=\"2\" bm:document_name=\"Transaction Line\" bm:document_number=\""+string(count)+"\" bm:document_var_name=\"transactionLine\" bm:process_var_name=\"oraclecpqo\" bm:supplier_company_name=\"avagotechtest2\">");
   //sb = sbappend(sb, "<bm:_document_number>"+jsonget(line,"_document_number")+"</bm:_document_number>");
   sb = sbappend(sb, "<bm:_price_book_var_name>_default_price_book</bm:_price_book_var_name>");
   sb = sbappend(sb,  "<bm:_price_quantity>"+get(eachPart,"TOT_QUANTITY")+"</bm:_price_quantity>");
   //sb = sbappend(sb,  "<bm:existingQuantity_l>"+jsonget(line,"quantity")+"</bm:existingQuantity_l>");
   sb = sbappend(sb,  "<bm:contractStartDate_l>"+startDate+"</bm:contractStartDate_l>");
   sb = sbappend(sb,  "<bm:existingSupportStartDate_l>"+datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_STR_DT"),"yyyy-MM-dd"),"yyyy-MM-dd HH:mm:ss")+"</bm:existingSupportStartDate_l>");
   sb = sbappend(sb,  "<bm:existingSupportExpirationDate_l>"+contractStartDate_1_str+"</bm:existingSupportExpirationDate_l>");
   sb = sbappend(sb,  "<bm:contractEndDate_l>"+endDate+"</bm:contractEndDate_l>");
   //sb = sbappend(sb,  "<bm:contractEndDate_l>"+endDate+"</bm:contractEndDate_l>");
   sb = sbappend(sb,  "<bm:priorContract>"+get(eachPart,"CONTRACT_NUMBER")+"</bm:priorContract>");
   sb = sbappend(sb,  "<bm:mPN_l>"+get(eachPart,"MPN")+"</bm:mPN_l>");
   sb = sbappend(sb,  "<bm:productName_l>"+get(eachPart,"Product_Name")+"</bm:productName_l>");
   sb = sbappend(sb,  "<bm:migrationType_l>"+get(eachPart,"Migration_Type")+"</bm:migrationType_l>");
   // sb = sbappend(sb,  "<bm:baseMaterial_1>"+jsonget(line,"baseMaterial")+"</bm:baseMaterial_1>");
   sb = sbappend(sb,  "<bm:productReplacementCode1_l>"+get(eachPart,"Replacement_Product")+"</bm:productReplacementCode1_l>");
   sb = sbappend(sb,  "<bm:coveredProduct_l>"+get(eachPart,"COVERED_ITEM")+"</bm:coveredProduct_l>");
   sb = sbappend(sb,  "<bm:cPProductFamily_l>"+get(eachPart, "COVERED_ITEM_DESC")+"</bm:cPProductFamily_l>");
   sb = sbappend(sb,  "<bm:productReplacementCode2_l>"+get(eachPart,"Replacement_Pdt_Val")+"</bm:productReplacementCode2_l>");
   sb = sbappend(sb,  "<bm:quantityRatioConversion_l>"+get(eachPart,"Qty_Ratio_Conversion")+"</bm:quantityRatioConversion_l>");
   sb = sbappend(sb,  "<bm:upgradeMaterial_l>"+get(eachPart,"Upgrade_Material")+"</bm:upgradeMaterial_l>");
   sb = sbappend(sb,  "<bm:dateShipped_l>"+get(eachPart,"EOS_DATE")+"</bm:dateShipped_l>");
   sb = sbappend(sb,  "<bm:serial_l>"+get(eachPart,"SERIAL_NUMBER")+"</bm:serial_l>");
   sb = sbappend(sb,  "<bm:serialNumberTemporary_l>"+get(eachPart,"SERIAL_NUMBER")+"</bm:serialNumberTemporary_l>");
   if(licenseType <> "" and NOT isnull(licenseType))
   {
    sb = sbappend(sb,  "<bm:licenseType_l>"+licenseType+"</bm:licenseType_l>");
   }
   sb = sbappend(sb,  "<bm:licenseMetric_l>"+licenseMetric+"</bm:licenseMetric_l>");
   if(environmentCode <> "" and NOT isnull(environmentCode))
   {
    sb = sbappend(sb,  "<bm:enterEnvironment_l>"+environmentCode+"</bm:enterEnvironment_l>");
   }
   sb = sbappend(sb,  "<bm:nonStandardLicenseMetric_l>"+specialMetricType+"</bm:nonStandardLicenseMetric_l>");
   sb = sbappend(sb,  "<bm:nonStandardQty_l>"+metricQuantity+"</bm:nonStandardQty_l>");
   sb = sbappend(sb,  "<bm:priorContractLineItem_l>"+get(eachPart,"CONTRACT_LINE_NUM")+"</bm:priorContractLineItem_l>");
   //sb = sbappend(sb,  "<bm:extProposedNetPriceRequested_l>"+jsonget(line,"previousprice")+"</bm:extProposedNetPriceRequested_l>");
   sb = sbappend(sb,  "<bm:eOSDate_l>"+get(eachPart,"SHIP_DATE")+"</bm:eOSDate_l>");
   sb = sbappend(sb,  "<bm:siteIDStreetAddress_l>"+fullAddress+"</bm:siteIDStreetAddress_l>");
   sb = sbappend(sb,    "<bm:installedAtCustomerNumber_l>"+get(eachPart,"INST_OWNER_CUST_NUM")+"</bm:installedAtCustomerNumber_l>");  
   sb = sbappend(sb,  "<bm:siteID_l>"+get(eachPart,"INST_OWN_SITE_NUM")+"</bm:siteID_l>");
   sb = sbappend(sb,  "<bm:siteIDCityStateZip_l>"+get(eachPart,"INST_CITY")+"</bm:siteIDCityStateZip_l>");
   sb = sbappend(sb,  "<bm:siteIDZip_l>"+get(eachPart,"INST_POSTAL_CODE")+"</bm:siteIDZip_l>");
   sb = sbappend(sb,  "<bm:siteIDCountry_l>"+get(eachPart,"INST_COUNTRY")+"</bm:siteIDCountry_l>");
   sb = sbappend(sb,  "<bm:supportType_l>"+get(eachPart,"EXISTING_SUPPORT_TYP")+"</bm:supportType_l>");
   sb = sbappend(sb,  "<bm:previousPrice_l>"+formatascurrency(previousprice, linecurrency)+"</bm:previousPrice_l>");
   sb = sbappend(sb,  "<bm:lineApprovalStatus_l>"+lineApprovalStatus+"</bm:lineApprovalStatus_l>");
   sb = sbappend(sb,  "<bm:existingQuantity_l>"+get(eachPart, "EXISTING_QUANTITY")+"</bm:existingQuantity_l>");
   sb = sbappend(sb,  "<bm:hiddenPrice_l>"+string(previousprice)+"</bm:hiddenPrice_l>");
   sb = sbappend(sb,  "<bm:lineExpirationDate_l>"+quoteExpirationDate+"</bm:lineExpirationDate_l>");
   sb = sbappend(sb,  "<bm:transactionTypeM_l>Renew</bm:transactionTypeM_l>");
   sb = sbappend(sb,  "<bm:expiringAnnualRenewal_l>"+expAnnualrenewal+"</bm:expiringAnnualRenewal_l>");
   sb = sbappend(sb,  "<bm:renewalCreatedBy_l>Integration User</bm:renewalCreatedBy_l>");
   sb = sbappend(sb,  "<bm:itemInstanceId_l>"+productInstanceID+"</bm:itemInstanceId_l>");
   //SYMINT-5528 - Start - Adding address variables to payload
   //Replacing tag Supportprovider_l with supportSiteID_l for SYMINT-6695 by Arjun 26-Mar-20
   sb = sbappend(sb,  "<bm:supportSiteID_l>"+supportProvider+"</bm:supportSiteID_l>");
   //SYMINT-5528- end
   sb = sbappend(sb, "</bm:transactionLine>");
      print "Primary_Contract" + Primary_Contract;
   if(Primary_Contract == "Yes")
   {
   //Get Update Transaction Web Service details from INT_SYSTEM_DETAILS data table
  result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_UPDATE_SYM'");
  for r in result
  {
   username = get(r,"Username");
   password = get(r,"Password");
   fileLocation1 = get(r,"File_Location");
   print "File Location" + fileLocation;
   soapendpoint = get(r,"SoapEndpoint");
  }
   //Quote Header Payload
   print "dealType" + dealType;
   print "outputType" + outputType;
   print "routeToMarket" + routeToMarket;
   
  put(payload,"USERNAME", username);
  put(payload,"status", status);
  // 06/15/2020    Shruti           VIPER-872-changes for stated renewal 
if(statedRenewal == "Yes - Removed Going Forward"){
 statedRenewal = "yesRemovedGoingForward";
}
elif(statedRenewal == "Yes - Not Removed Going Forward"){
 statedRenewal = "yesNotRemovedGoingForward";
}
  put(payload,"statedRenewal",statedRenewal);
  put(payload,"autorenewalnotification", autoRenewal);
  put(payload,"PASSWORD", password);
  put(payload,"billtocustomername",billToCustomer);
  put(payload,"billtocustomerno",billToCustomerNumber);
  put(payload,"soldtocustomername",soldToCustomer);
  put(payload,"soldtocustomerno",soldToCustomerNumber);
  put(payload,"companyname",endCustomerERPName);
  put(payload,"customerERPID",endCustomerERPID);
  //put(payload,"Transaction_ID",transactionID);
  put(payload,"BuyerCompanyName",CustomerCompanyName);
  put(payload,"SupplierCompanyName",SupplierCompanyName);
  put(payload,"QuoteOutputType",outputType);
  //VIPER-1000 - Adding language to the payload.
  put(payload,"language",language);
  //VIPER-1000 - End
  put(payload,"DealType",dealType);
  put(payload,"contractstartdate",startDate);
  put(payload,"contractenddate",endDate);
  put(payload,"quoteEffectiveDate",quoteEffectiveDate);
  put(payload,"quoteExpirationDate",quoteExpirationDate);
  put(payload,"createdDate",quoteEffectiveDate);
  put(payload,"closedate",startDate);
  put(payload,"billtocontactemail",billtocontactemail);
  //put(payload,"functionalcurrency",functionalcurrency);
  //put(payload,"forloop",sbtostring(sb));
  put(payload,"shipToCountryMenu",shipToCountryMenu);
  put(payload,"linecurrency",linecurrency);
  put(payload,"functionalcurrency",linecurrency);
  
  put(payload,"paymentPlan",paymentPlan);
  put(payload,"createdBy",createdBy);
  put(payload,"autoBook",autoBook);
  put(payload,"eStoreEDI",eStoreEDI);
  put(payload,"businessDivision",businessDivision);
  put(payload,"quoteAndContractValidation",quoteAndContractValidation);
  put(payload,"licenseeERPAccountno",licenseeAccNum);
  put(payload,"LicenseeName",LicenseeName);
  /*Order Submission Payload*/
  put(payload,"soldtositenumber",soldtositenumber);
  put(payload,"billtositeNumber",billtositeNumber);
  put(payload,"billtocountry",billtocountry);
  put(payload,"shiptositeNumber",shiptositeNumber);
  put(payload,"shiptoCustomer",shiptoCustomer);
  put(payload,"shipToCntctMail",shipToCntctMail);
  put(payload,"endCustomerSiteNum",endCustomerSiteNum);
  put(payload,"submittedDate",submittedDate);
  put(payload,"approvalDate",approvalDate);
  put(payload,"shipToCoutry",shipToCoutry);
  put(payload,"soldToCntctMail",soldToCntctMail);
  put(payload,"soldToContactName",soldToContactName);
  put(payload,"shipToCustomerSite",shipToCustomerSite);
  put(payload,"shipToContactName",shipToContactName);
  put(payload,"partner2",partner2);
  put(payload,"quoteOwner",quoteOwner);
  put(payload,"autoGeneratedRenewalHDRFlag","SYM");
  
  put(payload,"endCustomerGlobalParentName",endCustomerGlobalParentName);
  put(payload,"endCustomerParentId",endCustomerParentId);
  put(payload,"endCustomerGrandParentId",endCustomerGrandParentId);
  put(payload,"routeToMarket",routeToMarket);
  //SYMINT-3142 - Start - Adding address variables to payload
  put(payload,"shipToAddress",shipToAddress);
  put(payload,"shipToAddress_2",shipToAddress_2);
  put(payload,"shipToCity",shipToCity);
  put(payload,"shipToState",shipToState);
  put(payload,"shipToZip",shipToZip);
  put(payload,"shipToCountry",shipToCountry);
  put(payload,"billToAddress",billToAddress);
  put(payload,"billToCity",billToCity);
  put(payload,"billToState",billToState);
  put(payload,"billToZip",billToZip);
  put(payload,"soldToAddress",soldToAddress);
  put(payload,"soldToAddress2",soldToAddress2);
  put(payload,"soldToCity",soldToCity);
  put(payload,"soldToState",soldToState);
  put(payload,"soldToCountry",soldToCountry);
  put(payload,"soldToZip",soldToZip);
  put(payload,"renewalBatchNumber",batchNumber);
  //SYMINT-3142 - end
  }
  }
  
  //retrieving username and password for web service authentication, file loaction and enp point URL from data table for the corresponding function call 
  result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_CREATE_TRANSACTION'");
  for r in result
  {
   username = get(r,"Username");
   password = get(r,"Password");
   fileLocation = get(r,"File_Location");
   soapendpoint = get(r,"SoapEndpoint");
  }
  //Forming Create Transaction Payload
  put(payload_1,"USERNAME", username);
  put(payload_1,"PASSWORD", password);
  put(payload_1,"PASSWORD", password);
  put(payload_1,"forloop", partItemstring);
  put(payload_1,"functionalcurrency",linecurrency);
  
  //Remove junk characters from payload
  createtransactionRequest=applytemplate(fileLocation,payload_1,defaultErrorMessage_1);
  createtransactionRequest = replace(createtransactionRequest,"&lt;","<");
  createtransactionRequest= replace(createtransactionRequest,"&gt;",">");
  createtransactionRequest = replace(createtransactionRequest,"&quot;","\"");
  //Trigger the web service to create transaction
  response = urldatabypost(soapendpoint,createtransactionRequest,"",headersDict,true);
  
  //Retrieving Transaction_ID from response after triggering Create Transaction Web service successfully
  if(find(response,"Success") == -1 or response == "error")
  {
  lang = dict("string");
  
  setTransactionID  = "TRANSACTION_ID="+transactionID;
  quoteNumber = "";
  
  
  //Update Renewal Assets Table if Quote Creation is successful, if Quote is not created update the error message in in Transaction ID column so that this records will not be picked in future runs
  renewalAssetUpdatePayload = dict("string");
  resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Assets_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
  recordUpdateString = "";
  
   for rt in finalPartToadd
  {
  
   contractNumber = get(rt,"CONTRACT_NUMBER");
   serialNumber = get(rt,"SERIAL_NUMBER");
   instanceIdentifier = get(rt,"INSTANCE_IDENTIFIER");
   contractlinenumber = get(rt,"CONTRACT_LINE_NUM");
   
          
          
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+contractNumber+"</bm:CONTRACT_NUMBER>";
   //recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+transactionID+"</bm:QUOTE_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
   recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+quoteNumber+"</bm:QUOTE_NUMBER>";
            recordUpdateString = recordUpdateString +"<bm:TRANSACTION_ID>"+transactionID+"</bm:TRANSACTION_ID>";
            recordUpdateString = recordUpdateString +"<bm:OPPORTUNITY_ID>"+optyID+"</bm:OPPORTUNITY_ID>";
            recordUpdateString = recordUpdateString +"<bm:TRIGGERED_BY>"+currentUser+"</bm:TRIGGERED_BY>";
            recordUpdateString = recordUpdateString +"<bm:BATCH_NUMBER>"+batchNumber+"</bm:BATCH_NUMBER>";
   //recordUpdateString = recordUpdateString +"<bm:Quote_Type>"+quotetype+"</bm:Quote_Type>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";
  }
  put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
  defaultErrorMessage="";
  quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
  quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
  headersDict = dict("string"); 
  
  response="";
  //Trigger the web service to update transaction ID or error message in entitlement table
  print "====================update Transaction Renewal Assets request";
  print quoteRequestRenewalFalgUpdate;
  response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
  print "=====================response";
  print response;
  
  
  }
  
  
  if (find(response,"Success") > 0)
  {
   pos = find(response,"<bm:transactionID_l>");
   transactionID= substring(response,pos+20,find(response,"</bm:transactionID_l>"));
  }
  //Checking If Retrieved Transaction_ID is valid and Retrieve Quote Number with get transaction function
  if(isnumber(transactionID))
  {
  transactionDetails = gettransaction(atoi(transactionID));
  QuotenoStartPosition = find(transactionDetails, "<transactionID_t><![CDATA[");
  QuotenoEndPosition = find(transactionDetails, "]]></transactionID_t>");
  quoteNumber = substring(transactionDetails, QuotenoStartPosition+len("<transactionID_t><![CDATA["), QuotenoEndPosition);
  print "quoteNumber" + quoteNumber;
  //Create Opportunity in OEC for the current Renewal Quote where Account type of the Customer is Non Core
  if( classification_CD <> "Commercial")
  {
  
  
  //Begin : SYMINT-3713
  dealType1= dealType1 + "~" +  partner2 + "~" + partyID1+"~"+quoteName;
  //End: SYMINT-3713
  print "dealType1" + dealType1;
  createOptyResponse = util.renewalQuoteCreateOpportunity_brcm(quoteNumber, dealType1, licenseeNum1);
   print "createOptyResponse" + createOptyResponse;
   if(NOT isnull(createOptyResponse) and trim(createOptyResponse) <> "")
   {
    optydetails = split(createOptyResponse,"~");
    endCustomerID = optydetails[0];
    optyID = optydetails[1];
    optyNumber = optydetails[2];
    linecurrency = optydetails[3];
    paymentTerm = optydetails[4];
    coreAccount = optydetails[5];
    endCustomerParentId = optydetails[6];
    endCustomerGlobalParentName = optydetails[7];
    endCustomerGrandParentId = optydetails[8];
    renewalOwnerID = optydetails[9];
    accounttype = coreAccount;
   }
   /* print "renewalOwnerID" + renewalOwnerID;
   
    //quoteOwnerMail = trim(get(eachPart,"ASSET_OWNER"));
    if(renewalOwnerID <> "")
    {
     quoteOwnerDetails = bmql("select Users, EMailID from BRCM_Users where PartyResourceId = $renewalOwnerID");
     for quoteOwnerDetail in quoteOwnerDetails
     {
      quoteOwner = get(quoteOwnerDetail,"Users");
      quoteOwnerMail = get(quoteOwnerDetail,"EMailID");
     }
     if(quoteOwner <> "")
     {
     newQuoteOwner = quoteOwner+"~"+quoteOwnerMail;
     }
     else
     {
      quoteOwner = "Integration User";
     }
     
    }*/
    
  }
  }
  
  
  
  
  //Update transaction remaining Attributes
  print "transactionID" + transactionID;
  put(payload,"endCustomerID",endCustomerID);
  put(payload,"optyID",optyID);
  put(payload,"optyNumber",optyNumber);
  put(payload,"paymentTerm",paymentTerm);
  put(payload,"coreflag",classification_CD);
  put(payload,"quoteName",quoteName);
  put(payload,"Transaction_ID",transactionID);
  put(payload,"forloop",sbtostring(sb));
  put(payload,"quoteOwnerMail",quoteOwnerMail);
  put(payload,"newQuoteOwner",newQuoteOwner);
  put(payload,"renewalBatchNumber",batchNumber);
  
  
  defaultErrorMessage="";
  quoteRequest1=applytemplate(fileLocation1,payload,defaultErrorMessage);
  quoteRequest1 = replace(quoteRequest1,"&lt;","<");
  quoteRequest1= replace(quoteRequest1,"&gt;",">");
  quoteRequest1 = replace(quoteRequest1,"&quot;","\"");
  //VIPER - 778 - added logic to replace special character with "=" symbol
  quoteRequest1 = replace(quoteRequest1,"&#x3D;","=");
  quoteRequest1 = replace(quoteRequest1,"CPQ-0000",transactionID);
  
  
  response="";
  if(isnumber(transactionID))
  {
  //Trigger the web service to update transaction
  print "Update Transaction Request";
  print quoteRequest1;
  response = urldatabypost(soapendpoint,quoteRequest1, "",headersDict,true);
  
  print "UpdateTransaction Response" + response;
  if(find(response,"Success") == -1)
  {
  quoteNumber = "";
   transactionID = substring(response,find(response,"<faultstring>") + len("<faultstring>"),find(response,"</faultstring>"));
  }
  
  //Get Save Transaction Web Service details from INT_SYSTEM_DETAILS data table if update Transaction is successful
  if(find(response,"Success") > 0)
  {
   result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System ='SAVE_TRANSACTION'");
   for r in result
   {
    username = get(r,"Username");
    password = get(r,"Password");
    fileLocation = get(r,"File_Location");
    soapendpoint = get(r,"SoapEndpoint");
   }
   put(payload,"userName", username);
   
   put(payload,"password", password);
   put(payload,"bs_id", transactionID);
   quoteRequest2=applytemplate(fileLocation,payload,defaultErrorMessage);
   //Trigger the web service to save transaction
   print "Save Request" + quoteRequest2;
   response = urldatabypost(soapendpoint,quoteRequest2, "",headersDict,true);
   print "Save Transaction Response+++++++++" + response;
   if(find(response,"Success") == -1)
   {
   quoteNumber = "";
    transactionID = substring(response,find(response,"<faultstring>") + len("<faultstring>"),find(response,"</faultstring>"));
   }
  
  }
  
  
  renewalDashboardUpdatePayload = dict("string");
 renewalDashboardUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_DASHBOARD_UPDATE'");
   print renewalDashboardUpdate;
   for each in renewalDashboardUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalDashboardUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalDashboardUpdatePayload,"Password", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:Start_Date>"+currentsystemDate+"</bm:Start_Date>";
   recordUpdateString = recordUpdateString +"<bm:Lines_to_Process>"+string(linestobeprocessed)+"</bm:Lines_to_Process>";
   recordUpdateString = recordUpdateString +"<bm:Status>"+"In Progress"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   recordUpdateString = recordUpdateString +"<bm:Triggered_BY>"+currentUser+"</bm:Triggered_BY>";
   
   
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalDashboardUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalDashboardUpdate=applytemplate(fileLocationFlagUpdate,renewalDashboardUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalDashboardUpdate = replace(quoteRequestRenewalDashboardUpdate,"&lt;","<");
   quoteRequestRenewalDashboardUpdate= replace(quoteRequestRenewalDashboardUpdate,"&gt;",">");
   quoteRequestRenewalDashboardUpdate = replace(quoteRequestRenewalDashboardUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update BRCM_Renewal_Job table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalDashboardUpdate, "error",headersDict);

  
  
  
  //Update Renewal Assets Table if Quote Creation is successful, if Quote is not created update the error message in in Transaction ID column so that this records will not be picked in future runs
  renewalAssetUpdatePayload = dict("string");
  resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Assets_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
  recordUpdateString = "";
  
   for rt in finalPartToadd
  {
  
   contractNumber = get(rt,"CONTRACT_NUMBER");
   serialNumber = get(rt,"SERIAL_NUMBER");
   instanceIdentifier = get(rt,"INSTANCE_IDENTIFIER");
   contractlinenumber = get(rt,"CONTRACT_LINE_NUM");
   
          
          
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+contractNumber+"</bm:CONTRACT_NUMBER>";
   //recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+transactionID+"</bm:QUOTE_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
   recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+quoteNumber+"</bm:QUOTE_NUMBER>";
            recordUpdateString = recordUpdateString +"<bm:TRANSACTION_ID>"+transactionID+"</bm:TRANSACTION_ID>";
            recordUpdateString = recordUpdateString +"<bm:OPPORTUNITY_ID>"+optyID+"</bm:OPPORTUNITY_ID>";
            recordUpdateString = recordUpdateString +"<bm:TRIGGERED_BY>"+currentUser+"</bm:TRIGGERED_BY>";
            recordUpdateString = recordUpdateString +"<bm:BATCH_NUMBER>"+batchNumber+"</bm:BATCH_NUMBER>";
   //recordUpdateString = recordUpdateString +"<bm:Quote_Type>"+quotetype+"</bm:Quote_Type>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";
  }
  put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
  defaultErrorMessage="";
  quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
  quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
  headersDict = dict("string"); 
  
  response="";
  //Trigger the web service to update transaction ID or error message in entitlement table
  print "====================update Transaction Renewal Assets request";
  print quoteRequestRenewalFalgUpdate;
  response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
  print "=====================response";
  print response;
 /* lang = dict("string");
  sb = stringbuilder();
  sb = sbappend(sb,"TRANSACTION_ID=",transactionID,",","OPPORTUNITY_ID=",optyID,",","BATCH_NUMBER=",batchNumber,",","QUOTE_NUMBER=","'",quoteNumber,"'",",","TRIGGERED_BY=","'",currentUser,"'");
  
  sbStr = sbtostring(sb);
  
   for rt in finalPartToadd
  {
   fields= dict("string");
   put(fields,"$contractNumber",get(rt,"CONTRACT_NUMBER"));
   put(fields,"$serialNumber",get(rt,"SERIAL_NUMBER"));
   put(fields,"$instanceIdentifier",get(rt,"INSTANCE_IDENTIFIER"));
   put(fields,"$contractlinenumber",get(rt,"CONTRACT_LINE_NUM"));
   
   where = "CONTRACT_NUMBER = $contractNumber and SERIAL_NUMBER = $serialNumber and CONTRACT_LINE_NUM = $contractlinenumber and INSTANCE_IDENTIFIER = $instanceIdentifier";
   
   //updateRenewalAssets = bmql("update RENEWAL_ASSETS set $sbStr where $where",lang,fields);
   
  
  }*/
  
  
  //Update Renewal Job table with newly generated Quote info for tracking number of Quotes generated in current batch
  if(isnumber(transactionID))
  {
 /* currentsystemDate = datetostr(getdate());
  
  batchNumber_i = atoi(batchNumber);
  insertRenewalJobTable = bmql("insert into BRCM_Renewal_Job (Quote_Number,Batch_Date,User,Transaction_ID,SOURCE,LICENSEE_ACNT_NUM,INST_OWNER_CUST_NUM,SHIP_TO_COUNTRY,OPERATING_UNIT,Batch_Number,OPTY_ID,ACCOUNT_TYPE) values ($quoteNumber,$currentsystemDate,$currentUser,$transactionID,$source,$licenseeNum,$instOwnerName,$shipToCoutry,$operatingUnit,$batchNumber_i,$optyID,$accounttype)");
   print insertRenewalJobTable;
   for resultInsert in insertRenewalJobTable{

     insert_count_integer = get(resultInsert, "records_inserted");
     
     records_error_string = get(resultInsert, "records_error");
     print records_error_string;
     print insert_count_integer;
     
     }*/      
     //}
   renewalJobUpdatePayload = dict("string");
   renewaljobUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_JOB_UPDATE'");
   for each in renewaljobUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalJobUpdatePayload,"USERNAME", usernameFlagUpdate);
   put(renewalJobUpdatePayload,"PASSWORD", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:Quote_Number>"+quoteNumber+"</bm:Quote_Number>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Date>"+currentsystemDate+"</bm:Batch_Date>";
   recordUpdateString = recordUpdateString +"<bm:User>"+currentUser+"</bm:User>";
   recordUpdateString = recordUpdateString +"<bm:Transaction_ID>"+transactionID+"</bm:Transaction_ID>";
   recordUpdateString = recordUpdateString +"<bm:SOURCE>"+source+"</bm:SOURCE>";
   recordUpdateString = recordUpdateString +"<bm:LICENSEE_ACNT_NUM>"+licenseeNum+"</bm:LICENSEE_ACNT_NUM>";
   recordUpdateString = recordUpdateString +"<bm:INST_OWNER_CUST_NUM>"+instOwnerName+"</bm:INST_OWNER_CUST_NUM>";
   recordUpdateString = recordUpdateString +"<bm:SHIP_TO_COUNTRY>"+shipToCoutry+"</bm:SHIP_TO_COUNTRY>";
   recordUpdateString = recordUpdateString +"<bm:OPERATING_UNIT>"+operatingUnit+"</bm:OPERATING_UNIT>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   recordUpdateString = recordUpdateString +"<bm:OPTY_ID>"+optyID+"</bm:OPTY_ID>";
   recordUpdateString = recordUpdateString +"<bm:ACCOUNT_TYPE>"+classification_CD+"</bm:ACCOUNT_TYPE>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalJobUpdatePayload,"forLoop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalJobUpdate=applytemplate(fileLocationFlagUpdate,renewalJobUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalJobUpdate = replace(quoteRequestRenewalJobUpdate,"&lt;","<");
   quoteRequestRenewalJobUpdate= replace(quoteRequestRenewalJobUpdate,"&gt;",">");
   quoteRequestRenewalJobUpdate = replace(quoteRequestRenewalJobUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update BRCM_Renewal_Job table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalJobUpdate, "error",headersDict);
  }
 //}
 //}
 //previousGroupId = groupID;
}
 RenewalBatchEnd = datetostr(getdate());
    renewalBatchDetailUpdatePayload = dict("string");
 renewalBatchDetailUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Batch_Detail_Update'");
   for each in renewalBatchDetailUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalBatchDetailUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalBatchDetailUpdatePayload,"Password", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SNO>"+sNO+"</bm:SNO>";
   recordUpdateString = recordUpdateString +"<bm:Batch_End_Time>"+RenewalBatchEnd+"</bm:Batch_End_Time>";
   recordUpdateString = recordUpdateString +"<bm:Program_ID>"+Program_ID+"</bm:Program_ID>";
   recordUpdateString = recordUpdateString +"<bm:Status>"+"Completed"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   
   
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalBatchDetailUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalBatchDetailUpdate=applytemplate(fileLocationFlagUpdate,renewalBatchDetailUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&lt;","<");
   quoteRequestRenewalBatchDetailUpdate= replace(quoteRequestRenewalBatchDetailUpdate,"&gt;",">");
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update BRCM_Renewal_Job table
   print "======================== Renewal Batch Detail Update Start request";
   print quoteRequestRenewalBatchDetailUpdate;
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalBatchDetailUpdate, "error",headersDict);
   print "=============response";
   print response;
   //Call Renewal Batch Update Util Function which updates Batch Number and Current Job Run time Stats to Renewal_Batch_Detail data table
    //batchUpdateResponse = util.renewalBatchUpdate(batchNumber, RenewalBatchStart);    

// update the batch number to Renewal_Batch_Detail data table for S_NO- 11 

/*
status = "Completed";
sb=stringbuilder("Batch_Start_Time = ", "'", RenewalBatchStart, "'", ",Status =  '" , status, "'", ",Batch_End_Time =  '" , RenewalBatchEnd, "'", ",Batch_Number =  '" , batchNumber, "'" );
setFields = sbtostring(sb);
where = "SNO= '11' and Program_ID = 'Adhoc_Job'";
results = bmql("update Renewal_Batch_Detail set $setFields WHERE $where",lang,fields);
 print results;
 for res in results
  {
  print res;
  
  update_count_integer = get(res, "records_updated");
  
  records_error_string = get(res, "records_error");
  
  print records_error_string;
  }*/
   //Call SynctoOpty Util to sync all the Quotes to OEC for all the Renewal Quotes generated in current Job
   
   //synctoopportunityResponce = util.autoCalltoSyncToOptySYM_brcm(Program_ID); 
   batch_userid= batchNumber + "~" + currentUser;
   reslt = util.renewalDashboard_brcm(batchNumber, "Adhoc_Job", "Sync in Progress");
   synctoopportunityResponce = util.autoCalltoSyncToOpty_Automation(batch_userid);
   //renewalSubmitToOrderResponce = util.autoSubmitToOrderRenewalSMB(Program_ID);
   renewalSubmitToOrderResponce=util.autoSubmitToOrderRenewalAutomation(batch_userid);
 reslt = util.renewalDashboard_brcm(batchNumber, "Adhoc_Job", "Completed");
    finalresult = quoteNumber + "~" + optyNumber + "~" + transactionID;
//return recordUpdateString;
return finalresult;