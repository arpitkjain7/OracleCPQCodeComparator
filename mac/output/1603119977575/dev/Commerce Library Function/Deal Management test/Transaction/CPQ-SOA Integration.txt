/*****************************************************************
 Author - Keerthivasan A
 Date - 27/11/2019
 SYMINT-2514
 USer story summary - Integration with SOA when the line items are greater than 5000
*****************************************************************/
//Intializing the variables used in creating payload and headers dictionary
result="";
quoteRequest = "";
defaultErrorMessage="";
payload = dict("string");
url="";
Filelocation1="";
finalString="";
headersDict = dict("string");
splitterIndex=10;
Username="";
Password="";
userpasscode="";

//Checking agreement type not null and rout to marke has value "tier1" then calling the integration file location using BMQL as it is stored in Data table
if (agreementType_t <> "" and agreementSubtype_t <> ""){

if (routeToMarket_t=="tier1") {
filelocation = bmql("select File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Integration_SOA_Tier1'");
for record in filelocation{
 Filelocation1 = get(record,"File_Location");
 url=get(record,"SoapEndpoint");}}
//If route to market has value "tier 2" then the below integration file is called 
elif(routeToMarket_t=="tier2"){
filelocation = bmql("select File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Integration_SOA_Tier2'");
for record in filelocation{
 Filelocation1 = get(record,"File_Location");
 url=get(record,"SoapEndpoint");}}
//If route to market has value "MSP" then the below integration file is called
//SYMINT-2200  Added condition to include Payload to send to CLM when Route to Market is MSP
elif(routeToMarket_t=="mSP"){
filelocation = bmql("select File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Integration_SOA_MSP'");
for record in filelocation{
 Filelocation1 = get(record,"File_Location");
 url=get(record,"SoapEndpoint");}}
// End of SYMINT-2200
//If route to market has other value then below integration fiel is being invoked 
else{
filelocation = bmql("select File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Integration_SOA_Direct'");

// for each record in the result set we are creating payload and sending necessary data like billing schedule , session id,etc

for record in filelocation{
 Filelocation1 = get(record,"File_Location");
 url=get(record,"SoapEndpoint");}}

Details=bmql("SELECT Username, Password from INT_SYSTEM_DETAILS WHERE System='Integration_SOA_Direct'");

for detail in Details{
Username=get(detail,"Username");
Password=get(detail,"Password");
userpasscode=Username+":"+Password;
} 

billingRequest = commerce.fetchingBillingScheduleAttributes();//calling the library function

if(NOT isnull(billingRequest)){
  
replaceHeader = replace(billingRequest, "PP", "createAgreementPaymentPlan");
replacecomPay = replace(replaceHeader, "P5", "committedPayments");
replaceQuotNo = replace(replacecomPay,"P7","CPQQuoteNumber");
replaceeduPay = replace(replaceQuotNo,"P6","educationPayments");
replacelicens = replace(replaceeduPay,"P2","license");
replacemaint  = replace(replacelicens,"P4","maintainence");
replacePayment= replace(replacemaint,"P8","paymentsTotal");
replacepaydate= replace(replacePayment,"P1","payplanDate");
replacesubsc  = replace(replacepayDate,"P3","subscription");
resultBillingPlan = replacesubsc;
put(payload,"BillingPlan",resultBillingPlan); 
}
encoded=encodebase64(userpasscode);
auth="Basic" + " " + encoded;
quoteRequest = applytemplate(Filelocation1,payload,defaultErrorMessage); // applying a set of token value pairs to template using applytemplate function
quoteRequest=replace(quoteRequest, "&lt;", "<");
quoteRequest=replace(quoteRequest, "&gt;", ">");
put(headersDict,"Content-Type","text/xml;charset=UTF-8");
put(headersDict,"Authorization",auth);
finalString = urldatabypost(url,quoteRequest, "Failed to Connect", headersDict,true); //posting the webservice using urldatabypost function
}
return finalString;