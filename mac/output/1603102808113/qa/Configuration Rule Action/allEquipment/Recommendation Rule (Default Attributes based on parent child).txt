/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default support parts
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = "";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}
index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 if(supportType_avg <> ""){
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.supportPartsPicklist","string","");
 }  
 }
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default start date
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = getdate();
data=getdate();
jsonObj = json();
resultSet = bmql("SELECT contractStartDate_t from commerce.transaction");
for each in resultSet{
result = getDate(each,"contractStartDate_t");
data= result;
}
if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { if(jsonpathgetsingle(jsonObj,"$."+string(index)+".child.startDate","string","")<>""){
 data = strtojavadate(jsonpathgetsingle(jsonObj,"$."+string(index)+".child.startDate","string",""),"MM/dd/yyyy HH:mm:ss");
 }
 IF(ISNULL(data)==false){
 result=data;
 }
 } 
 
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default language required
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = "";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.languageRequired","string","");
 }  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default license metric
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = "";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.licenseMetric","string","");
 }  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default usage existing quantity
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = 0;
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}
index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = atoi(jsonpathgetsingle(jsonObj,"$."+string(index)+".child.UsageExistingQuantity","string",""));
 }  
return integer(result);
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default usage quantity
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = 0;
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = atoi(jsonpathgetsingle(jsonObj,"$."+string(index)+".child.UsageQuantity","string",""));
 }  
return integer(result);
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default existing quantity
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = 0;
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = atoi(jsonpathgetsingle(jsonObj,"$."+string(index)+".child.existingQuantity","string",""));
 }  
return integer(result);
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default standard quantity
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = 0;
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = atoi(jsonpathgetsingle(jsonObj,"$."+string(index)+".child.standardQuantity","string",""));
 }  
return integer(result);
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default transaction type
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = "";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}
index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.transactionType","string","");
 }  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default special metric
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = "";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}
index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.specialMetricLicense","string","");
 }  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default support parts
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = supportPartsPicklist_avg;
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}
index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.supportPartsPicklist","string","");
 }  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default enter environment
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = "";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.enterEnvironment","string","");
 }  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default special metrics
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = false;
rel="";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 rel = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.specialMetric","string","");
 }
if (rel == "true")
{
result = true; 
}
else
{
result = false;
}  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default support type
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = "";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.supportType","string","");
 }  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default license type
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = "";
jsonObj = json();

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { 
 result = jsonpathgetsingle(jsonObj,"$."+string(index)+".child.selectLicenseType","string","");
 }  
return result;
/*********************************************************************
              Function Name: Default Attributes based on parent child
              Description: This condition will default end date
              Author: Shruti
              User Story #:configuration story
              Date: 15th dec 2018
              ******************************Change Log*****************************
           
*********************************************************************/
result = getdate();
data = getdate();
jsonObj = json();
resultSet = bmql("SELECT contractEndDate_t from commerce.transaction");
for each in resultSet{
result = getDate(each,"contractEndDate_t");

}

if(parentChildString_avg <> "" AND parentChildString_avg<>" "){
jsonObj = json(parentChildString_avg);
}

index = -1;
if(selectUpgradeProduct_avg<>true){
index = findinarray(select_avg,true);
}
else{
index = findinarray(selectUpgdSKUarr_avg,true);
}
 if(index <> -1)
 { if(jsonpathgetsingle(jsonObj,"$."+string(index)+".child.endDate","string","")<>""){
 result = strtojavadate(jsonpathgetsingle(jsonObj,"$."+string(index)+".child.endDate","string",""),"MM/dd/yyyy HH:mm:ss");
 }
 } 
 
 
 
return result;