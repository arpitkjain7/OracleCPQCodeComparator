/************************************************
/Rule Name: New Renewal Program
/Description: This program is responsible for generating renewal quotes and update the tables accordingly
/Author: M Vamsi Krishna
/Creation Date: 04-May-2020
History:
 Date          Author            Comment 
 04/05/2020    M Vamsi   VIPER-817 Create renewal automation process to generate renewal quotes 
 04/05/2020    M Vamsi   VIPER-703 Update quote expiration date logic for auto generated commercial renewal quote - HW and VA
 04/05/2020    M Vamsi   VIPER-813 Update Renewal Quote and Opp Naming Convention
  06/15/2020    Shruti           VIPER-872-changes for stated renewal 
  07/31/2020 M Vamsi    VIPER - 957 - Incorrect Account Classification in Automated Renewal Job
 
*/

//Variable Declaration
batchNumber = ""; 
previousGroupId = "";
payload = dict("string");
username = "";
password = "";
quoteNumber = "";
fileLocation = "";
soapendpoint = "";
status = "IN_PROGRESS";
autoRenewal = "";
quoteName = "";
transactionID = "";
billToCustomer = "";
billToCustomerNumber = "";
soldToCustomer = "";
soldToCustomerNumber = "";
endCustomerERPName = "";
endCustomerERPID = "";
outputType = "";
dealType = "";
startDate = "";
endDate = "";
quoteEffectiveDate = "";
quoteExpirationDate = "";
billtocontactemail = "";
sb = stringbuilder();
shipToCountryMenu = "";
linecurrency = "";
endCustomerID = "";
optyID = "";
optyNumber = "";
paymentTerm = "";
coreAccount = "ZCA_CORE";
paymentPlan = "";
createdBy = "Integration User";
autoBook = "false";
eStoreEDI = "No";
businessDivision = "";
quoteAndContractValidation = "no";
licenseeAccNum = "";
LicenseeName = "";
headersDict = dict("string"); 
usernameFlagUpdate = "";
passwordFlagUpdate = "";
fileLocationFlagUpdate = "";
soapendpointFlagUpdate = "";
usernameFlagDeploy = "";
passwordFlagDeploy = "";
fileLocationFlagDeploy = "";
soapendpointFlagDeploy = "";
finalPartToadd = recordset();
classificationCd = "";
dealType1 = "";
source = "";
licenseeNum = "";
licenseeNum1 = "";
partyID1 = "";
partnerName1 = "";
instOwnerName = "";
shipToCoutry = "";
operatingUnit = "";
recordUpdateString = "";
accounttype = "ZCA_CORE";
soldtositenumber = "";
billtositeNumber = "";
billtocountry = "";
shiptositeNumber = "";
shiptocountry = "";
shiptoCustomer = "";
shipToCntctMail = "";
endCustomerSiteNum = "";
approvalDate = "";
submittedDate = "";
soldToCntctMail = "";
soldToContactName = "";
shipToCustomerSite = "";
shipToContactName  = "";
partner2 = "";
quoteOwner = "";
createtransactionRequest = "";
shipToAddress = "";
shipToAddress_2 = "";
shipToCity = "";
shipToState = "";
shipToZip = "";
shipToCountry = "";
billToAddress = "";
billToCity = "";
billToState = "";
billToZip = "";
soldToAddress = "";
soldToAddress2 = "";
soldToCity = "";
soldToState = "";
soldToCountry = "";
soldToZip = "";
quoteOwnerMail = "integration.user@broadcom.com";
newQuoteOwner = "";
endCustomerParentId = "";
endCustomerGlobalParentName = "";
endCustomerGrandParentId = "";
routeToMarket = "";
supportProvider = "";
renewalOwnerID = "";
classification_CD = "";
renewalQtr = "";
sNO = "";
statedRenewal = "";
groupStringBuilder = stringbuilder();
RenewalBatchStart = "'" +datetostr(getdate())+"'";
renewalResult = bmql("select Days_Before_Renewal from BRCM_Renewal_Before");

 //Retrieve existing Batch Number and increment to create all renewal Quotes under the new batch Number for the current job
     batchNumberResult = bmql("select Batch_Number,SNO from Renewal_Batch_Detail where Program_ID = $Program_ID");
     for batch in batchNumberResult
     {
             batchNumber = get(batch,"Batch_Number");
             sNO = get(batch,"SNO");
     }
     
 batchNumber = string(atoi(batchNumber)+1);



//Updating Renewal Batch Detail Table with Batch Number and Start Time
 renewalBatchDetailUpdatePayload = dict("string");
 renewalBatchDetailUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Batch_Detail_Update'");
   for each in renewalBatchDetailUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalBatchDetailUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalBatchDetailUpdatePayload,"Password", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SNO>"+sNO+"</bm:SNO>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Start_Time>"+currentsystemDate+"</bm:Batch_Start_Time>";
   recordUpdateString = recordUpdateString +"<bm:Program_ID>"+Program_ID+"</bm:Program_ID>";
   recordUpdateString = recordUpdateString +"<bm:Status>"+"In Progress"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   recordUpdateString = recordUpdateString +"<bm:START_GRP_ID>"+String(StartGrpID)+"</bm:START_GRP_ID>";
   recordUpdateString = recordUpdateString +"<bm:END_GRP_ID>"+String(EndGrpID)+"</bm:END_GRP_ID>";
   
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalBatchDetailUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalBatchDetailUpdate=applytemplate(fileLocationFlagUpdate,renewalBatchDetailUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&lt;","<");
   quoteRequestRenewalBatchDetailUpdate= replace(quoteRequestRenewalBatchDetailUpdate,"&gt;",">");
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update BRCM_Renewal_Job table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalBatchDetailUpdate, "error",headersDict);


//Fetching GROUP_ID from Renewal Assets table based on the Start and End Group ID of the renewal program which is triggering the UTIL

fetchGroups = bmql("select GROUP_ID from RENEWAL_ASSETS where GROUP_ID <> 1 and (TRANSACTION_ID IS NULL OR (TRANSACTION_ID IS NOT NULL AND QUOTE_NUMBER IS NULL)) and GROUP_ID >= $StartGrpID and GROUP_ID <= $EndGrpID");

for group in fetchGroups
{
 groupID = get(group, "GROUP_ID");

 groupCheck = "/"+groupID + "/";

 if(find(sbtostring(groupStringBuilder),groupCheck) < 0 )
 {
 groupStringBuilder = sbappend(groupStringBuilder,"/",groupID,"/");
  sb = stringbuilder();
  createtransactionRequest = "";
  payload_1 =dict("string");
  quoteRequest= "";
  payload = dict("string");
  partItemstring = "";
  defaultErrorMessage_1="";
  count = 1;
  transactionID="";
  newQuoteOwner = "";
  endCustomerParentId = "";
  endCustomerGlobalParentName = "";
  endCustomerGrandParentId = "";
  totalEAR = 0.0;
  classification_CD = "";
  renewalQtr = "";
  shipToCountryMenu = "";
  //fetching all the required information from different tables to create quote based on GROUP_ID
  //06/15/2020    Shruti           VIPER-872-changes for stated renewal 
  finalPartToadd = bmql("select RENEWAL_ASSETS.SOLD_TO_ADDRESS,RENEWAL_ASSETS.SOLD_TO_ADDRESS_2,RENEWAL_ASSETS.SOLD_TO_CITY,RENEWAL_ASSETS.SOLD_TO_STATE,RENEWAL_ASSETS.SOLD_TO_COUNTRY,RENEWAL_ASSETS.SOLD_TO_ZIPCODE,RENEWAL_ASSETS_EXT.SUPPORT_PROVIDER,RENEWAL_ASSETS_EXT.STATED_RENEWAL,RENEWAL_ASSETS.CONTRACT_LINE_NUM,RENEWAL_ASSETS.SOURCE,RENEWAL_ASSETS.LICENSEE_ACNT_NUM,RENEWAL_ASSETS.CLASSIFICATION_CD,RENEWAL_ASSETS_EXT.VC_PRDCT_INSTS_ID,RENEWAL_ASSETS_EXT.SHIP_TO_CUST_NUMBER,RENEWAL_ASSETS_EXT.SHIP_TO_CNTCT_EMAIL,RENEWAL_ASSETS_EXT.SOLD_TO_CNTCT_NAME , RENEWAL_ASSETS_EXT.SHIP_TO_CUST_NAME,RENEWAL_ASSETS_EXT.SHIP_TO_CNTCT_NAME,RENEWAL_ASSETS_EXT.PARTNER_2,RENEWAL_ASSETS_EXT.LICENSEE_NAME,RENEWAL_ASSETS_EXT.CONTRACT_END_DATE,BRCM_Part_Master.MPN,BRCM_Part_Master.Product_Name,BRCM_Part_Master.Migration_Type,RENEWAL_ASSETS_EXT.Sell_To_Site_Number,RENEWAL_ASSETS_EXT.Bill_To_Site_Number,RENEWAL_ASSETS_EXT.Bill_To_Country,RENEWAL_ASSETS_EXT.Ship_To_Site_Number, BRCM_Part_Master.Replacement_Product,BRCM_Part_Master.Replacement_Pdt_Val,BRCM_Part_Master.Qty_Ratio_Conversion, BRCM_Part_Master.Upgrade_Material,RENEWAL_ASSETS.INST_POSTAL_CODE,RENEWAL_ASSETS.UNIT_PRICE,RENEWAL_ASSETS.LICENSE_TYPE,RENEWAL_ASSETS.EXP_ANNUAL_RENEWAL,RENEWAL_ASSETS.LICENSE_METRIC,RENEWAL_ASSETS.ENV_TYPE,RENEWAL_ASSETS.SPECIAL_METRIC_TYPE,RENEWAL_ASSETS.METRIC_QUANTITY,RENEWAL_ASSETS.INST_CITY,RENEWAL_ASSETS_EXT.OPERATING_SYS,RENEWAL_ASSETS.INST_ADDR1,RENEWAL_ASSETS.INST_ADDR2,RENEWAL_ASSETS.INST_ADDR3,RENEWAL_ASSETS.INST_COUNTRY,RENEWAL_ASSETS.INST_OWNER_CUST_NUM,RENEWAL_ASSETS.INST_OWNER_NAME,RENEWAL_ASSETS.SHIP_DATE,RENEWAL_ASSETS.EOS_DATE,RENEWAL_ASSETS.EXISTING_SUPPORT_TYP,RENEWAL_ASSETS_EXT.SHIP_TO_ADDRESS,RENEWAL_ASSETS_EXT.SHIP_TO_ADDRESS_2,RENEWAL_ASSETS_EXT.SHIP_TO_CITY,RENEWAL_ASSETS_EXT.SHIP_TO_STATE,RENEWAL_ASSETS_EXT.SHIP_TO_ZIP,RENEWAL_ASSETS_EXT.BILL_TO_ADDRESS,RENEWAL_ASSETS_EXT.BILL_TO_CITY,RENEWAL_ASSETS_EXT.BILL_TO_STATE,RENEWAL_ASSETS_EXT.BILL_TO_ZIP,RENEWAL_ASSETS.EXISTING_QUANTITY,RENEWAL_ASSETS.SERVICE_ITEM,RENEWAL_ASSETS.SERIAL_NUMBER,RENEWAL_ASSETS.CONTRACT_NUMBER,RENEWAL_ASSETS.ENTITLEMENT_STR_DT,RENEWAL_ASSETS.ENTITLEMENT_EXP_DT,RENEWAL_ASSETS.COVERED_ITEM,RENEWAL_ASSETS.COVERED_ITEM_DESC,RENEWAL_ASSETS.COVERED_PRDCT_FAMILY,RENEWAL_ASSETS.BILL_TO_CUST_NAME,RENEWAL_ASSETS.BILL_TO_CUST_NUMBER,RENEWAL_ASSETS.SOLD_TO_CUST_NAME,RENEWAL_ASSETS.SOLD_TO_CUST_NUMBER,RENEWAL_ASSETS.TOT_QUANTITY,RENEWAL_ASSETS.INSTANCE_IDENTIFIER,RENEWAL_ASSETS.SHIP_TO_COUNTRY,RENEWAL_ASSETS.OPERATING_UNIT,RENEWAL_ASSETS_EXT.LINE_CURRENCY,RENEWAL_ASSETS_EXT.BILL_TO_CNTCT_EMAIL,RENEWAL_ASSETS_EXT.SOLD_TO_CNTCT_EMAIL,RENEWAL_ASSETS.INST_OWN_SITE_NUM from RENEWAL_ASSETS INNER JOIN BRCM_Part_Master ON RENEWAL_ASSETS.SERVICE_ITEM = BRCM_Part_Master.MPN INNER JOIN RENEWAL_ASSETS_EXT ON RENEWAL_ASSETS.SERIAL_NUMBER = RENEWAL_ASSETS_EXT.SERIAL_NUMBER and RENEWAL_ASSETS.CONTRACT_LINE_NUM = RENEWAL_ASSETS_EXT.CONTRACT_LINE_NUM and RENEWAL_ASSETS.CONTRACT_NUMBER = RENEWAL_ASSETS_EXT.CONTRACT_NUMBER where (RENEWAL_ASSETS.TRANSACTION_ID IS NULL OR (RENEWAL_ASSETS.TRANSACTION_ID IS NOT NULL AND RENEWAL_ASSETS.QUOTE_NUMBER IS NULL)) and RENEWAL_ASSETS_EXT.ACTIVE_STATUS = 'Active' and RENEWAL_ASSETS.TOT_QUANTITY > 0 and RENEWAL_ASSETS_EXT.LINE_CURRENCY <> 'VES' and RENEWAL_ASSETS.GROUP_ID = $groupID");
  
  //Iterating over the resultset that was fetched.
  for eachPart in finalPartToadd
  {
   // re-initializing variables for every quote
   supportPart = "";
   Quantity="";
   quoteRequest= "";
   jsonObj = json();
   transactionID_t = "";
   transactionID="";
   supportProvider = "";
   createtransactionRequest = "";
   headersDict = dict("string"); 
   currentsystemDate = datetostr(getdate());
   contractStartDate_1 = "";
   contractStartDate_1_str = "";
   response="";
   recordUpdateString = "";
   linecurrency = "";
   dealType = "";
   licenseeNum ="";
   licenseeNum1 = "";
   partyID1 = "";
   partnerName1 = "";
   billCustNumber = "";
   endCustomerID = "";
   optyID = "";
   optyNumber = "";
   startDate = "";
   paymentTerm = "";
   outputType="";
   billToCustomer = "";
   quoteName = "";
   billToCustomerNumber = "";
   soldToCustomer = "";
   soldToCustomerNumber = "";
   quoteEffectiveDate = "";
   contractStartDate_1 = "";
   startDate = "";
   endDate = "";
   endCustomerERPName = "";
   endCustomerERPID = "";
   endOfsupportDate = "";
   gBU_Driver = "";
   quoteExpirationDate = "";
   contractEndDate_1 = "";
   contractheaderEndDate1 = "";
   quotetype = "";
   source = "";
   ownerName = "";
   shipToCoutry = "";
   operatingUnit = "";
   licenseeNum = "";
   licenseeNum1 = "";
   instOwnerName = "";
   billtocontactemail = "";
   //06/15/2020    Shruti           VIPER-872-changes for stated renewal 
   statedRenewal = "";
   //shipToCountryMenu = "";
   status = "IN_PROGRESS";
   paymentPlan = "";
   createdBy = "Integration User";
   autoBook = "false";
   eStoreEDI = "No";
   dealType1 = "";
   lineApprovalStatus ="";
   businessDivision = "";
   coreAccount = "ZCA_CORE";
   quoteAndContractValidation = "no";
   classificationCd = "";
   accounttype = "ZCA_CORE";
   licenseeAccNum = "";
   LicenseeName = "";
   autoRenewal = "";
   soldtositenumber = "";
   billtositeNumber = "";
   billtocountry = "";
   shiptositeNumber = "";
   shiptocountry = "";
   shiptoCustomer = "";
   shipToCntctMail = "";
   endCustomerSiteNum = "";
   approvalDate = "";
   submittedDate = "";
   soldToCntctMail = "";
   soldToContactName = "";
   shipToCustomerSite = "";
   shipToContactName  = "";
   partner2 = "";
   quoteOwner = "";
   routeToMarket = "";
   shipToAddress = "";
   shipToAddress_2 = "";
   shipToCity = "";
   shipToState = "";
   shipToZip = "";
   shipToCountry = "";
   billToAddress = "";
   billToCity = "";
   billToState = "";
   billToZip = "";
   soldToAddress = "";
   soldToAddress2 = "";
   soldToCity = "";
   soldToState = "";
   soldToCountry = "";
   soldToZip = "";
   renewalOwnerID = "";
   //classification_CD = "";
   //renewalQtr = "";
   quoteOwnerMail = "integration.user@broadcom.com";
   partNo = get(eachPart,"SERVICE_ITEM");
   qty =get(eachPart, "TOT_QUANTITY");
   linecurrency = get(eachPart,"LINE_CURRENCY");
   source = get(eachPart,"SOURCE");
   //classificationCd = get(eachPart,"CLASSIFICATION_CD");
   if(get(eachPart,"ENTITLEMENT_EXP_DT") <> "" and NOT isnull(get(eachPart,"ENTITLEMENT_EXP_DT")))
   {
    contractStartDate = adddays(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"),1);
    stringStartDate = datetostr(contractStartDate,"yyyy-MM-dd");
    startDate = datetostr(contractStartDate,"yyyy-MM-dd");
   }
   if(get(eachPart,"SOURCE") == "BSN")
   {
    dealType = "bSNRenewal";
   
   }
   elif(get(eachPart,"SOURCE") == "CA")
   {
    dealType = "cADRenewal";
   
   }
   elif(get(eachPart,"SOURCE") == "SYM")
   {
    dealType = "cADRenewal";
   }
   dealType1 = dealType +"~"+ linecurrency +"~"+startDate;
   licenseeNum = get(eachPart,"LICENSEE_ACNT_NUM");
   billCustNumber = get(eachPart,"BILL_TO_CUST_NUMBER");
   licenseeNum1 = licenseeNum + "~" + billCustNumber;
   partItemstring = partItemstring +"<bm:partItem>";
   partItemstring = partItemstring +"<bm:part>"+partNo+"</bm:part>";
   partItemstring = partItemstring +"<bm:quantity>"+qty+"</bm:quantity>";
   partItemstring = partItemstring +"<bm:price_book_var_name>_default_price_book</bm:price_book_var_name>";
   partItemstring = partItemstring +"</bm:partItem>";
  
  
  
   quoteEffectiveDate = datetostr(_current_date,"yyyy-MM-dd HH:mm:ss");
   contractStartDate_1 = get(eachPart,"ENTITLEMENT_EXP_DT");
   if(contractStartDate_1 <> "" and NOT isnull(contractStartDate_1))
   {
    contractStartDate_1_str = datetostr(strtojavadate(contractStartDate_1,"yyyy-MM-dd"),"yyyy-MM-dd HH:mm:ss");
   }
   stringStartDate = "";
   if(contractStartDate_1 <> "" and NOT isnull(contractStartDate_1))
   {
    contractStartDate = adddays(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"),1);
    stringStartDate = datetostr(contractStartDate,"yyyy-MM-dd");
    startDate = datetostr(contractStartDate,"yyyy-MM-dd HH:mm:ss");
    //Add 365 days to get Contract End Date
    contractEndDate = adddays(strtojavadate(startDate,"yyyy-MM-dd"),365);
    endDate = datetostr(contractEndDate,"yyyy-MM-dd HH:mm:ss");
    //As Contract End date should always be a day less than contract start date. Compare days,month of contract start and end date and take a day off from contract end date if contract start and end date has same days and month.
    endMonth = substring(endDate,5,7);
    endDays = substring(endDate,8,10);
    startMonth = substring(startDate,5,7);
    startDays = substring(startDate,8,10);
    
    if( startDays == endDays and startMonth == endMonth)
    {
    contractEndDate = minusdays(contractEndDate,1);
    endDate = datetostr(contractEndDate,"yyyy-MM-dd HH:mm:ss");
    }
    // Logic to fetch Quarter data from Renewal QTR Table based on entitlement expiration date
    if(trim(renewalQtr) == "" OR isnull(renewalQtr))
    {
     calendarExpirationDate = get(eachPart,"ENTITLEMENT_EXP_DT");
     quarterResults = bmql("select QTR_NAME from RENEWAL_QTR_DATA where CALENDAR_DATE = $calendarExpirationDate");
     for quarter in quarterResults
     {
      renewalQtr = get(quarter,"QTR_NAME");
     }
    }
   }
   
   //06/15/2020    Shruti           VIPER-872-changes for stated renewal 
   statedRenewal = get(eachPart,"STATED_RENEWAL");
   billToCustomer = get(eachPart,"BILL_TO_CUST_NAME");
   billToCustomerNumber = get(eachPart,"BILL_TO_CUST_NUMBER");
   billtocontactemail = get(eachPart,"BILL_TO_CNTCT_EMAIL");
   soldToCustomer = get(eachPart,"SOLD_TO_CUST_NAME");
   soldToCustomerNumber = get(eachPart,"SOLD_TO_CUST_NUMBER");
   endCustomerERPName = get(eachPart,"INST_OWNER_NAME");
   endCustomerERPID = get(eachPart,"INST_OWNER_CUST_NUM");
   endOfsupportDate = get(eachPart,"EOS_DATE");
   instOwnerName = get(eachPart,"INST_OWNER_NAME");
   licenseeNum = get(eachPart,"LICENSEE_ACNT_NUM");
   linecurrency = get(eachPart,"LINE_CURRENCY");
   /*Bill to and Sold to Details for Order Submission*/
   soldtositenumber = get(eachPart,"Sell_To_Site_Number");
   billtositeNumber = get(eachPart,"Bill_To_Site_Number");
   billtocountry = get(eachPart,"Bill_To_Country");
   shiptositeNumber = get(eachPart,"Ship_To_Site_Number");
   shipToCoutry = get(eachPart,"SHIP_TO_COUNTRY");
   operatingUnit = get(eachPart,"OPERATING_UNIT");
   shiptoCustomer = get(eachPart,"SHIP_TO_CUST_NUMBER");
   shipToCntctMail = get(eachPart,"SHIP_TO_CNTCT_EMAIL");
   soldToCntctMail = get(eachPart,"SOLD_TO_CNTCT_EMAIL");
   endCustomerSiteNum = get(eachPart,"INST_OWN_SITE_NUM");
   soldToContactName = get(eachPart,"SOLD_TO_CNTCT_NAME");
   shipToCustomerSite = get(eachPart,"SHIP_TO_CUST_NAME");
   shipToContactName  = get(eachPart,"SHIP_TO_CNTCT_NAME");
   partner2 = get(eachPart,"PARTNER_2");
   productInstanceID = get(eachPart,"VC_PRDCT_INSTS_ID");
   shipToAddress = get(eachPart,"SHIP_TO_ADDRESS");
   shipToAddress_2 = get(eachPart,"SHIP_TO_ADDRESS_2");
   shipToCity = get(eachPart,"SHIP_TO_CITY");
   shipToState = get(eachPart,"SHIP_TO_STATE");
   shipToZip = get(eachPart,"SHIP_TO_ZIP");
   shipToCountry = get(eachPart,"SHIP_TO_COUNTRY");
   billToAddress = get(eachPart,"BILL_TO_ADDRESS");
   billToCity = get(eachPart,"BILL_TO_CITY");
   billToState = get(eachPart,"BILL_TO_STATE");
   billToZip = get(eachPart,"BILL_TO_ZIP");
   soldToAddress = get(eachPart,"SOLD_TO_ADDRESS");
   soldToAddress2 = get(eachPart,"SOLD_TO_ADDRESS_2");
   soldToCity = get(eachPart,"SOLD_TO_CITY");
   soldToState = get(eachPart,"SOLD_TO_STATE");
   soldToCountry = get(eachPart,"SOLD_TO_COUNTRY");
   soldToZip = get(eachPart,"SOLD_TO_ZIPCODE");
   existingQuantity = get(eachPart,"TOT_QUANTITY");
   expAnnualrenewal = get(eachPart,"EXP_ANNUAL_RENEWAL");
   totalEAR = totalEAR + atof(expAnnualrenewal);
   totalEARStr = formatascurrency(totalEAR,linecurrency);
   
   if(atoi(existingQuantity) <> 0 and expAnnualrenewal <> "")
   {
    previousprice = round(atof(expAnnualrenewal)/atoi(existingQuantity),4);
    
    expAnnualrenewal = formatascurrency(atof(expAnnualrenewal), linecurrency);
    
   }
   else
   {
    previousprice = 0.0;
    
    expAnnualrenewal = formatascurrency(0.0, linecurrency);
    
   }
   
   supportProvider = get(eachPart,"SUPPORT_PROVIDER");
   
   //calling UTIL lib that will fetch Classification and Renewal Owner from OEC based on Licensee ERP Account number
   if(Trim(classification_CD) == "" or isnull(classification_CD))
   {
   renewalOwnerClassificationResponse = util.renewalOwnerForCommercial_t(licenseeNum, "");
   
   if(NOT isnull(renewalOwnerClassificationResponse) and trim(renewalOwnerClassificationResponse) <> "")
   {
    renewalOwnerClassificationDetails = split(renewalOwnerClassificationResponse,"~");
    renewalOwnerID = renewalOwnerClassificationDetails[0];
    
    if(NOT isnull(renewalOwnerClassificationDetails[1]) and trim(renewalOwnerClassificationDetails[1]) <> "")
    {
    classification_CD = renewalOwnerClassificationDetails[1];
    }
    
    if(renewalOwnerID <> "")
    {
    //fetching user details from BRCM_Users table based on renewal owner party ID
     quoteOwnerDetails = bmql("select Users, EMailID from BRCM_Users where PartyResourceId = $renewalOwnerID");
     for quoteOwnerDetail in quoteOwnerDetails
     {
      quoteOwner = get(quoteOwnerDetail,"Users");
      quoteOwnerMail = get(quoteOwnerDetail,"EMailID");
     }
     if(quoteOwner <> "")
     {
     newQuoteOwner = quoteOwner+"~"+quoteOwnerMail;
     }
     else
     {
      quoteOwner = "Integration User";
     }
     
    }
   }
   }
   //VIPER-957 - Begin - Commenting this logic so that Classification from the ASSETS data table is not used during renewals execution
   /*if(Trim(classification_CD) == "" or isnull(classification_CD))
   {
    classification_CD = get(eachPart,"CLASSIFICATION_CD");
   }*/
   //VIPER-957 - End
   //retrieving ship to country based on operating unit and deal type.
   if(trim(shipToCountryMenu) == "" OR isnull(shipToCountryMenu))
   {
    shipToOUResult = bmql("select ShipToCountry from OU_ShiptTo_Mapping where OU_Name = $operatingUnit and Group = $dealType");
    for shipToOU in shipToOUResult
    {
     shipToCountryMenu = get(shipToOU,"ShipToCountry");
    }
   }
   
   //Initializing attributes for CA Quotes. For CA Quotes assign endCustomerERPID as licenseAccountNo
   if(dealType == "cADRenewal" and source == "CA")
   {
    endCustomerERPID = get(eachPart,"LICENSEE_ACNT_NUM");
    endCustomerERPName = get(eachPart,"LICENSEE_NAME");
    businessDivision = "CA";
    source = "CA";
    dealType = "cADRenewal";
    outputType = "cADirectDealRenewalOnly";
    routeToMarket = "direct";
   if(EndOfSupportDate <> "" and NOT isnull(EndOfSupportDate))
   {
    endOfSupportDate_1 = substring(EndOfSupportDate,0,10);
   }
   quoteName = endCustomerERPName + " / " + "CA" + " / " + renewalQtr  + " / " + totalEARStr;
   
   //Logic is used for making quoteExpirationDate to same as support end date is expiration date is greater than today else 30 days will be added to expiration date
   if(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd")<=strtojavadate(datetostr(getDate(),"yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd"))
   {
    quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),30),"yyyy-MM-dd HH:mm:ss");
   }
   else
   {
   quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
   }
   }
   //initializing attributes for SYM Commercial quotes
   if(dealType == "cADRenewal" and classification_CD == "Commercial" and get(eachPart,"SOURCE") == "SYM")
   {
    approvalDate = datetostr(_current_date,"yyyy-MM-dd HH:mm:ss");
    submittedDate = datetostr(_current_date,"yyyy-MM-dd HH:mm:ss");
    source = "SYM";
    accounttype = "Commercial";
    coreAccount = "Commercial";
    licenseeAccNum = endCustomerERPID;
    LicenseeName = endCustomerERPName;
    status = "ORDER_SUBMITTED";
    paymentPlan = "paidInFull";
    businessDivision = "Symantec"; 
    quoteAndContractValidation = "yes";
    autoBook = "true";
    eStoreEDI = "Yes";
    outputType = "Symantec Indirect Quote Output";
    quoteOwner = createdBy;
    routeToMarket = "tier2";
    quoteName = endCustomerERPName + " / " + "SYM" + " / "  + renewalQtr  + " / "+ totalEARStr;
    //Logic is used for making quoteExpirationDate to same as support end date is expiration date is greater than today else 30 days will be added to expiration date
    if(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd")<= strtojavadate(datetostr(getDate(),"yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd"))
    {
    quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),30),"yyyy-MM-dd HH:mm:ss");
    }
    else
    {
    quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
    }
    
    if (status == "APPROVED")
    {
    
     lineApprovalStatus = "APPROVED";
    }
   }
   //initializing attributes for SYM Core and Non-Core quotes
   if(dealType == "cADRenewal" and get(eachPart,"SOURCE") == "SYM" and (classification_CD == "ZCA_CORE" OR classification_CD == "ZCA_NON_CORE"))
   {
    
    source = "SYM";
    status = "IN_PROGRESS";
    routeToMarket = "tier2";
    eStoreEDI = "Yes";
    outputType = "Symantec Indirect Quote Output";    
    businessDivision = "Symantec";
    quoteName = endCustomerERPName + " / " + "SYM" + " / "  + renewalQtr  + " / "+ totalEARStr;
    quoteExpirationDate = "";
    //Logic is used for making quoteExpirationDate to same as support end date is expiration date is greater than today else 30 days will be added to expiration date
    if(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd")<= strtojavadate(datetostr(getDate(),"yyyy-MM-dd HH:mm:ss"),"yyyy-MM-dd"))
    {
    quoteExpirationDate = datetostr(adddays(strtojavadate(QuoteEffectiveDate,"yyyy-MM-dd HH:mm:ss"),30),"yyyy-MM-dd HH:mm:ss");
    }
    else
    {
    quoteExpirationDate = datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_EXP_DT"),"yyyy-MM-dd"), "yyyy-MM-dd HH:mm:ss");
    }
   }
 
  
   autoRenewal = "no";
   trans = "";
   returnString = "";
   count = count +1;
   line1 = get(eachPart, "INST_ADDR1");
   line2 = get(eachPart, "INST_ADDR2");
   line3 = get(eachPart, "INST_ADDR3");
   fullAddress = line1 + ", "+line2 + ", "+line3;
   fullAddress = substring(fullAddress, 0, 254); 
   licenseType = get(eachPart,"LICENSE_TYPE");
   licenseMetric = get(eachPart,"LICENSE_METRIC");
   environmentCode = get(eachPart,"ENV_TYPE");
   if(licenseType == "P" or licenseType == "p")
   {
           licenseType = "Perpetual";
   }
   if(licenseType == "S" or licenseType == "s")
   {
           licenseType = "Subscription";
   }
   if(licenseType == "L" or licenseType == "l")
   {
           licenseType = "UMF";
   }
   if(environmentCode == "PD" or environmentCode == "pd")
   {
           environmentCode = "Production";
   }
   if(environmentCode == "NP" or environmentCode == "np")
   {
           environmentCode = "Non Production";
   }
   if(environmentCode == "DR" or environmentCode == "dr")
   {
           environmentCode = "Disaster Recovery";
   }
   if(environmentCode == "PL" or environmentCode == "pl")
   {
           environmentCode = "Production Limited Use";
   }
   if(environmentCode == "NL" or environmentCode == "nl")
   {
           environmentCode = "Non Production Limited Use";
   }
   specialMetricType = get(eachPart,"SPECIAL_METRIC_TYPE");
   metricQuantity = get(eachPart,"METRIC_QUANTITY");
   sb = sbappend(sb, "<bm:transactionLine bm:bs_id=\""+"CPQ-0000"+"\" bm:buyer_company_name=\"avagotechtest2\" bm:buyer_user_name=\"Integration User\" bm:currency_pref=\""+linecurrency+"\" bm:data_type=\"2\" bm:document_name=\"Transaction Line\" bm:document_number=\""+string(count)+"\" bm:document_var_name=\"transactionLine\" bm:process_var_name=\"oraclecpqo\" bm:supplier_company_name=\"avagotechtest2\">");
   sb = sbappend(sb, "<bm:_price_book_var_name>_default_price_book</bm:_price_book_var_name>");
   sb = sbappend(sb,  "<bm:_price_quantity>"+get(eachPart,"TOT_QUANTITY")+"</bm:_price_quantity>");
   sb = sbappend(sb,  "<bm:contractStartDate_l>"+startDate+"</bm:contractStartDate_l>");
   sb = sbappend(sb,  "<bm:existingSupportStartDate_l>"+datetostr(strtojavadate(get(eachPart,"ENTITLEMENT_STR_DT"),"yyyy-MM-dd"),"yyyy-MM-dd HH:mm:ss")+"</bm:existingSupportStartDate_l>");
   sb = sbappend(sb,  "<bm:existingSupportExpirationDate_l>"+contractStartDate_1_str+"</bm:existingSupportExpirationDate_l>");
   sb = sbappend(sb,  "<bm:contractEndDate_l>"+endDate+"</bm:contractEndDate_l>");
   sb = sbappend(sb,  "<bm:priorContract>"+get(eachPart,"CONTRACT_NUMBER")+"</bm:priorContract>");
   sb = sbappend(sb,  "<bm:mPN_l>"+get(eachPart,"MPN")+"</bm:mPN_l>");
   sb = sbappend(sb,  "<bm:productName_l>"+get(eachPart,"Product_Name")+"</bm:productName_l>");
   sb = sbappend(sb,  "<bm:migrationType_l>"+get(eachPart,"Migration_Type")+"</bm:migrationType_l>");
   sb = sbappend(sb,  "<bm:productReplacementCode1_l>"+get(eachPart,"Replacement_Product")+"</bm:productReplacementCode1_l>");
   sb = sbappend(sb,  "<bm:coveredProduct_l>"+get(eachPart,"COVERED_ITEM")+"</bm:coveredProduct_l>");
   sb = sbappend(sb,  "<bm:cPProductFamily_l>"+get(eachPart, "COVERED_ITEM_DESC")+"</bm:cPProductFamily_l>");
   sb = sbappend(sb,  "<bm:productReplacementCode2_l>"+get(eachPart,"Replacement_Pdt_Val")+"</bm:productReplacementCode2_l>");
   sb = sbappend(sb,  "<bm:quantityRatioConversion_l>"+get(eachPart,"Qty_Ratio_Conversion")+"</bm:quantityRatioConversion_l>");
   sb = sbappend(sb,  "<bm:upgradeMaterial_l>"+get(eachPart,"Upgrade_Material")+"</bm:upgradeMaterial_l>");
   sb = sbappend(sb,  "<bm:dateShipped_l>"+get(eachPart,"EOS_DATE")+"</bm:dateShipped_l>");
   sb = sbappend(sb,  "<bm:serial_l>"+get(eachPart,"SERIAL_NUMBER")+"</bm:serial_l>");
   sb = sbappend(sb,  "<bm:serialNumberTemporary_l>"+get(eachPart,"SERIAL_NUMBER")+"</bm:serialNumberTemporary_l>");
   if(licenseType <> "" and NOT isnull(licenseType))
   {
    sb = sbappend(sb,  "<bm:licenseType_l>"+licenseType+"</bm:licenseType_l>");
   }
   sb = sbappend(sb,  "<bm:licenseMetric_l>"+licenseMetric+"</bm:licenseMetric_l>");
   if(environmentCode <> "" and NOT isnull(environmentCode))
   {
    sb = sbappend(sb,  "<bm:enterEnvironment_l>"+environmentCode+"</bm:enterEnvironment_l>");
   }
   sb = sbappend(sb,  "<bm:nonStandardLicenseMetric_l>"+specialMetricType+"</bm:nonStandardLicenseMetric_l>");
   sb = sbappend(sb,  "<bm:nonStandardQty_l>"+metricQuantity+"</bm:nonStandardQty_l>");
   sb = sbappend(sb,  "<bm:priorContractLineItem_l>"+get(eachPart,"CONTRACT_LINE_NUM")+"</bm:priorContractLineItem_l>");
   sb = sbappend(sb,  "<bm:eOSDate_l>"+get(eachPart,"SHIP_DATE")+"</bm:eOSDate_l>");
   sb = sbappend(sb,  "<bm:siteIDStreetAddress_l>"+fullAddress+"</bm:siteIDStreetAddress_l>");
   sb = sbappend(sb,    "<bm:installedAtCustomerNumber_l>"+get(eachPart,"INST_OWNER_CUST_NUM")+"</bm:installedAtCustomerNumber_l>");  
   sb = sbappend(sb,  "<bm:siteID_l>"+get(eachPart,"INST_OWN_SITE_NUM")+"</bm:siteID_l>");
   sb = sbappend(sb,  "<bm:siteIDCityStateZip_l>"+get(eachPart,"INST_CITY")+"</bm:siteIDCityStateZip_l>");
   sb = sbappend(sb,  "<bm:siteIDZip_l>"+get(eachPart,"INST_POSTAL_CODE")+"</bm:siteIDZip_l>");
   sb = sbappend(sb,  "<bm:siteIDCountry_l>"+get(eachPart,"INST_COUNTRY")+"</bm:siteIDCountry_l>");
   sb = sbappend(sb,  "<bm:supportType_l>"+get(eachPart,"EXISTING_SUPPORT_TYP")+"</bm:supportType_l>");
   sb = sbappend(sb,  "<bm:previousPrice_l>"+formatascurrency(previousprice, linecurrency)+"</bm:previousPrice_l>");
   sb = sbappend(sb,  "<bm:lineApprovalStatus_l>"+lineApprovalStatus+"</bm:lineApprovalStatus_l>");
   sb = sbappend(sb,  "<bm:existingQuantity_l>"+get(eachPart, "EXISTING_QUANTITY")+"</bm:existingQuantity_l>");
   sb = sbappend(sb,  "<bm:hiddenPrice_l>"+string(previousprice)+"</bm:hiddenPrice_l>");
   sb = sbappend(sb,  "<bm:lineExpirationDate_l>"+quoteExpirationDate+"</bm:lineExpirationDate_l>");
   sb = sbappend(sb,  "<bm:transactionTypeM_l>Renew</bm:transactionTypeM_l>");
   sb = sbappend(sb,  "<bm:expiringAnnualRenewal_l>"+expAnnualrenewal+"</bm:expiringAnnualRenewal_l>");
   sb = sbappend(sb,  "<bm:renewalCreatedBy_l>Integration User</bm:renewalCreatedBy_l>");
   sb = sbappend(sb,  "<bm:itemInstanceId_l>"+productInstanceID+"</bm:itemInstanceId_l>");
   sb = sbappend(sb,  "<bm:supportSiteID_l>"+supportProvider+"</bm:supportSiteID_l>");
   sb = sbappend(sb, "</bm:transactionLine>");
                
  
  }
  /*
  //calling UTIL lib that will fetch Classification and Renewal Owner from OEC based on Licensee ERP Account number
  
   renewalOwnerClassificationResponse = util.renewalOwnerForCommercial_t(licenseeNum, "");
   
   if(NOT isnull(renewalOwnerClassificationResponse) and trim(renewalOwnerClassificationResponse) <> "")
   {
    renewalOwnerClassificationDetails = split(renewalOwnerClassificationResponse,"~");
    renewalOwnerID = renewalOwnerClassificationDetails[0];
    
    if(NOT isnull(renewalOwnerClassificationDetails[1]) and trim(renewalOwnerClassificationDetails[1]) <> "")
    {
    classification_CD = renewalOwnerClassificationDetails[1];
    }
    
    if(renewalOwnerID <> "")
    {
    //fetching user details from BRCM_Users table based on renewal owner party ID
     quoteOwnerDetails = bmql("select Users, EMailID from BRCM_Users where PartyResourceId = $renewalOwnerID");
     for quoteOwnerDetail in quoteOwnerDetails
     {
      quoteOwner = get(quoteOwnerDetail,"Users");
      quoteOwnerMail = get(quoteOwnerDetail,"EMailID");
     }
     if(quoteOwner <> "")
     {
     newQuoteOwner = quoteOwner+"~"+quoteOwnerMail;
     }
     else
     {
      quoteOwner = "Integration User";
     }
     
    }
   }*/
   
  //retrieving username and password for web service authentication, file loaction and enp point URL from data table for the corresponding function call 
  result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_CREATE_TRANSACTION'");
  for r in result
  {
   username = get(r,"Username");
   password = get(r,"Password");
   fileLocation = get(r,"File_Location");
   soapendpoint = get(r,"SoapEndpoint");
  }
  //Forming Create Transaction Payload
  put(payload_1,"USERNAME", username);
  put(payload_1,"PASSWORD", password);
  put(payload_1,"PASSWORD", password);
  put(payload_1,"forloop", partItemstring);
  put(payload_1,"functionalcurrency",linecurrency);
  
  //Remove junk characters from payload
  createtransactionRequest=applytemplate(fileLocation,payload_1,defaultErrorMessage_1);
  createtransactionRequest = replace(createtransactionRequest,"&lt;","<");
  createtransactionRequest= replace(createtransactionRequest,"&gt;",">");
  createtransactionRequest = replace(createtransactionRequest,"&quot;","\"");
  
  //Trigger the web service to create transaction
  //VIPER-957- Begin - Create Transaction logic will only br processed if the classification of the Account is not blank in OEC. If it is blank no quote will be created
  if(Trim(classification_CD) <> "" and NOT isnull(classification_CD))
  {
  response = urldatabypost(soapendpoint,createtransactionRequest,"",headersDict,true);
  }
  else
  {
   //Update Renewal Assets Table with error message as invalid account in Transaction ID column, if Quote is not created  so that this records will not be picked in future runs
   quoteNumber = "";
  renewalAssetUpdatePayload = dict("string");
  resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Assets_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
  recordUpdateString = "";
  
   for rt in finalPartToadd
  {
  
   contractNumber = get(rt,"CONTRACT_NUMBER");
   serialNumber = get(rt,"SERIAL_NUMBER");
   instanceIdentifier = get(rt,"INSTANCE_IDENTIFIER");
   contractlinenumber = get(rt,"CONTRACT_LINE_NUM");
   
          
          
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+contractNumber+"</bm:CONTRACT_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
   recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+quoteNumber+"</bm:QUOTE_NUMBER>";
            recordUpdateString = recordUpdateString +"<bm:TRANSACTION_ID>"+"Licensee Account not available in OEC"+"</bm:TRANSACTION_ID>";
            recordUpdateString = recordUpdateString +"<bm:OPPORTUNITY_ID>"+optyID+"</bm:OPPORTUNITY_ID>";
            recordUpdateString = recordUpdateString +"<bm:TRIGGERED_BY>"+Triggered_By+"</bm:TRIGGERED_BY>";
            recordUpdateString = recordUpdateString +"<bm:BATCH_NUMBER>"+batchNumber+"</bm:BATCH_NUMBER>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";
  }
  put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
  defaultErrorMessage="";
  quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
  quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
  headersDict = dict("string"); 
  
  response="";
  //Trigger the web service to update transaction ID or error message in Renewal Assets table
  response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
  }
  //VIPER-957 - End
  //Retrieving Transaction_ID from response after triggering Create Transaction Web service successfully
  if(find(response,"Success") == -1 or response == "error")
  {
  quoteNumber = "";
  lang = dict("string");
  
  //Update Renewal Assets Table if Quote Creation is successful, if Quote is not created update the error message in in Transaction ID column so that this records will not be picked in future runs
  renewalAssetUpdatePayload = dict("string");
  resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Assets_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
  recordUpdateString = "";
  
   for rt in finalPartToadd
  {
  
   contractNumber = get(rt,"CONTRACT_NUMBER");
   serialNumber = get(rt,"SERIAL_NUMBER");
   instanceIdentifier = get(rt,"INSTANCE_IDENTIFIER");
   contractlinenumber = get(rt,"CONTRACT_LINE_NUM");
   
          
          
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+contractNumber+"</bm:CONTRACT_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
   recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+quoteNumber+"</bm:QUOTE_NUMBER>";
            recordUpdateString = recordUpdateString +"<bm:TRANSACTION_ID>"+transactionID+"</bm:TRANSACTION_ID>";
            recordUpdateString = recordUpdateString +"<bm:OPPORTUNITY_ID>"+optyID+"</bm:OPPORTUNITY_ID>";
            recordUpdateString = recordUpdateString +"<bm:TRIGGERED_BY>"+Triggered_By+"</bm:TRIGGERED_BY>";
            recordUpdateString = recordUpdateString +"<bm:BATCH_NUMBER>"+batchNumber+"</bm:BATCH_NUMBER>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";
  }
  put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
  defaultErrorMessage="";
  quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
  quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
  headersDict = dict("string"); 
  
  response="";
  //Trigger the web service to update transaction ID or error message in Renewal Assets table
  response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
  }
  
  //Get Update Transaction Web Service details from INT_SYSTEM_DETAILS data table
  result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_UPDATE_SYM'");
  for r in result
  {
   username = get(r,"Username");
   password = get(r,"Password");
   fileLocation = get(r,"File_Location");
   soapendpoint = get(r,"SoapEndpoint");
  }
  if (find(response,"Success") > 0)
  {
   pos = find(response,"<bm:transactionID_l>");
   transactionID= substring(response,pos+20,find(response,"</bm:transactionID_l>"));
  }
  //Checking If Retrieved Transaction_ID is valid and Retrieve Quote Number with get transaction function
  if(isnumber(transactionID))
  {
  transactionDetails = gettransaction(atoi(transactionID));
  QuotenoStartPosition = find(transactionDetails, "<transactionID_t><![CDATA[");
  QuotenoEndPosition = find(transactionDetails, "]]></transactionID_t>");
  quoteNumber = substring(transactionDetails, QuotenoStartPosition+len("<transactionID_t><![CDATA["), QuotenoEndPosition);
  
   //Create Opportunity in OEC for the current Renewal Quote where Account type of the Customer is Non Core
   if( classification_CD <> "Commercial")
   {
   dealType1= dealType1 + "~" +  partner2 + "~" + partyID1 +"~"+quoteName;
   
   createOptyResponse = util.renewalQuoteCreateOpportunity_brcm(quoteNumber, dealType1, licenseeNum1);
   
   
    if(NOT isnull(createOptyResponse) and trim(createOptyResponse) <> "")
    {
     optydetails = split(createOptyResponse,"~");
     endCustomerID = optydetails[0];
     optyID = optydetails[1];
     optyNumber = optydetails[2];
     linecurrency = optydetails[3];
     paymentTerm = optydetails[4];
     coreAccount = optydetails[5];
     endCustomerParentId = optydetails[6];
     endCustomerGlobalParentName = optydetails[7];
     endCustomerGrandParentId = optydetails[8];
     renewalOwnerID = optydetails[9];
     accounttype = coreAccount;
    }
   }
  }
  //Quote Header Payload
  put(payload,"USERNAME", username);
  put(payload,"status", status);
  put(payload,"autorenewalnotification", autoRenewal);
  put(payload,"PASSWORD", password);
  put(payload,"quoteName",quoteName);
  put(payload,"bs_id",transactionID);
  put(payload,"billtocustomername",billToCustomer);
  put(payload,"billtocustomerno",billToCustomerNumber);
  // 06/15/2020    Shruti           VIPER-872-changes for stated renewal 
if(statedRenewal == "Yes - Removed Going Forward"){
 statedRenewal = "yesRemovedGoingForward";
}
elif(statedRenewal == "Yes - Not Removed Going Forward"){
 statedRenewal = "yesNotRemovedGoingForward";
}
  put(payload,"statedRenewal",statedRenewal);
  put(payload,"soldtocustomername",soldToCustomer);
  put(payload,"soldtocustomerno",soldToCustomerNumber);
  put(payload,"companyname",endCustomerERPName);
  put(payload,"customerERPID",endCustomerERPID);
  put(payload,"Transaction_ID",transactionID);
  put(payload,"BuyerCompanyName",CustomerCompanyName);
  put(payload,"SupplierCompanyName",SupplierCompanyName);
  put(payload,"QuoteOutputType",outputType);
  put(payload,"DealType",dealType);
  put(payload,"contractstartdate",startDate);
  put(payload,"contractenddate",endDate);
  put(payload,"quoteEffectiveDate",quoteEffectiveDate);
  put(payload,"quoteExpirationDate",quoteExpirationDate);
  put(payload,"createdDate",quoteEffectiveDate);
  put(payload,"closedate",startDate);
  put(payload,"billtocontactemail",billtocontactemail);
  put(payload,"forloop",sbtostring(sb));
  put(payload,"shipToCountryMenu",shipToCountryMenu);
  put(payload,"linecurrency",linecurrency);
  put(payload,"functionalcurrency",linecurrency);
  put(payload,"endCustomerID",endCustomerID);
  put(payload,"optyID",optyID);
  put(payload,"optyNumber",optyNumber);
  put(payload,"paymentTerm",paymentTerm);
  put(payload,"coreflag",classification_CD);
  put(payload,"paymentPlan",paymentPlan);
  put(payload,"createdBy",createdBy);
  put(payload,"autoBook",autoBook);
  put(payload,"eStoreEDI",eStoreEDI);
  put(payload,"businessDivision",businessDivision);
  put(payload,"quoteAndContractValidation",quoteAndContractValidation);
  put(payload,"licenseeERPAccountno",licenseeAccNum);
  put(payload,"LicenseeName",LicenseeName);
  /*Order Submission Payload*/
  put(payload,"soldtositenumber",soldtositenumber);
  put(payload,"billtositeNumber",billtositeNumber);
  put(payload,"billtocountry",billtocountry);
  put(payload,"shiptositeNumber",shiptositeNumber);
  put(payload,"shiptoCustomer",shiptoCustomer);
  put(payload,"shipToCntctMail",shipToCntctMail);
  put(payload,"endCustomerSiteNum",endCustomerSiteNum);
  put(payload,"submittedDate",submittedDate);
  put(payload,"approvalDate",approvalDate);
  put(payload,"shipToCoutry",shipToCoutry);
  put(payload,"soldToCntctMail",soldToCntctMail);
  put(payload,"soldToContactName",soldToContactName);
  put(payload,"shipToCustomerSite",shipToCustomerSite);
  put(payload,"shipToContactName",shipToContactName);
  put(payload,"partner2",partner2);
  put(payload,"quoteOwner",quoteOwner);
  put(payload,"autoGeneratedRenewalHDRFlag","SYM");
  put(payload,"quoteOwnerMail",quoteOwnerMail);
  put(payload,"newQuoteOwner",newQuoteOwner);
  put(payload,"endCustomerGlobalParentName",endCustomerGlobalParentName);
  put(payload,"endCustomerParentId",endCustomerParentId);
  put(payload,"endCustomerGrandParentId",endCustomerGrandParentId);
  put(payload,"routeToMarket",routeToMarket);
  put(payload,"shipToAddress",shipToAddress);
  put(payload,"shipToAddress_2",shipToAddress_2);
  put(payload,"shipToCity",shipToCity);
  put(payload,"shipToState",shipToState);
  put(payload,"shipToZip",shipToZip);
  put(payload,"shipToCountry",shipToCountry);
  put(payload,"billToAddress",billToAddress);
  put(payload,"billToCity",billToCity);
  put(payload,"billToState",billToState);
  put(payload,"billToZip",billToZip);
  put(payload,"soldToAddress",soldToAddress);
  put(payload,"soldToAddress2",soldToAddress2);
  put(payload,"soldToCity",soldToCity);
  put(payload,"soldToState",soldToState);
  put(payload,"soldToCountry",soldToCountry);
  put(payload,"soldToZip",soldToZip);
  put(payload,"renewalBatchNumber",batchNumber);
  
  defaultErrorMessage="";
  quoteRequest1=applytemplate(fileLocation,payload,defaultErrorMessage);
  quoteRequest1 = replace(quoteRequest1,"&lt;","<");
  quoteRequest1= replace(quoteRequest1,"&gt;",">");
  quoteRequest1 = replace(quoteRequest1,"&quot;","\"");
  quoteRequest1 = replace(quoteRequest1,"&#x3D;","=");
  quoteRequest1 = replace(quoteRequest1,"CPQ-0000",transactionID);
  
  response="";
  if(isnumber(transactionID))
  {
  //Trigger the web service to update transaction
  
  response = urldatabypost(soapendpoint,quoteRequest1, "",headersDict,true);
  
  
  if(find(response,"Success") == -1)
  {
   quoteNumber = "";
   transactionID = substring(response,find(response,"<faultstring>") + len("<faultstring>"),find(response,"</faultstring>"));
  }
  
  //Get Save Transaction Web Service details from INT_SYSTEM_DETAILS data table if update Transaction is successful
  if(find(response,"Success") > 0)
  {
   result = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System ='SAVE_TRANSACTION'");
   for r in result
   {
    username = get(r,"Username");
    password = get(r,"Password");
    fileLocation = get(r,"File_Location");
    soapendpoint = get(r,"SoapEndpoint");
   }
   put(payload,"userName", username);
   put(payload,"password", password);
   put(payload,"bs_id", transactionID);
   quoteRequest2=applytemplate(fileLocation,payload,defaultErrorMessage);
   //Trigger the web service to save transaction
   
   response = urldatabypost(soapendpoint,quoteRequest2, "",headersDict,true);
   
   if(find(response,"Success") == -1)
   {
    quoteNumber = "";
    transactionID = substring(response,find(response,"<faultstring>") + len("<faultstring>"),find(response,"</faultstring>"));
   }
  
  }
  
  //Update Renewal Assets Table if Quote Creation is successful, if Quote is not created update the error message in in Transaction ID column so that this records will not be picked in future runs
  renewalAssetUpdatePayload = dict("string");
  resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Assets_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
  recordUpdateString = "";
  
   for rt in finalPartToadd
  {
  
   contractNumber = get(rt,"CONTRACT_NUMBER");
   serialNumber = get(rt,"SERIAL_NUMBER");
   instanceIdentifier = get(rt,"INSTANCE_IDENTIFIER");
   contractlinenumber = get(rt,"CONTRACT_LINE_NUM");
   if(trim(quoteNumber) == "" or isnull(quoteNumber))
   {
   optyID = "";
   }
   
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+contractNumber+"</bm:CONTRACT_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
   recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+quoteNumber+"</bm:QUOTE_NUMBER>";
            recordUpdateString = recordUpdateString +"<bm:TRANSACTION_ID>"+transactionID+"</bm:TRANSACTION_ID>";
            recordUpdateString = recordUpdateString +"<bm:OPPORTUNITY_ID>"+optyID+"</bm:OPPORTUNITY_ID>";
            recordUpdateString = recordUpdateString +"<bm:TRIGGERED_BY>"+Triggered_By+"</bm:TRIGGERED_BY>";
            recordUpdateString = recordUpdateString +"<bm:BATCH_NUMBER>"+batchNumber+"</bm:BATCH_NUMBER>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";
  }
  put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
  defaultErrorMessage="";
  quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
  quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
  quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
  headersDict = dict("string"); 
  
  response="";
  //Trigger the web service to update transaction ID or error message in Renewal Assets table
  
  response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
  
   
  
  //Update Renewal Job table with newly generated Quote info for tracking number of Quotes generated in current batch
  if(isnumber(transactionID))
  {
   renewalJobUpdatePayload = dict("string");
   renewaljobUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_JOB_UPDATE'");
   for each in renewaljobUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalJobUpdatePayload,"USERNAME", usernameFlagUpdate);
   put(renewalJobUpdatePayload,"PASSWORD", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:Quote_Number>"+quoteNumber+"</bm:Quote_Number>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Date>"+currentsystemDate+"</bm:Batch_Date>";
   recordUpdateString = recordUpdateString +"<bm:User>"+Program_ID+"</bm:User>";
   recordUpdateString = recordUpdateString +"<bm:Transaction_ID>"+transactionID+"</bm:Transaction_ID>";
   recordUpdateString = recordUpdateString +"<bm:SOURCE>"+source+"</bm:SOURCE>";
   recordUpdateString = recordUpdateString +"<bm:LICENSEE_ACNT_NUM>"+licenseeNum+"</bm:LICENSEE_ACNT_NUM>";
   recordUpdateString = recordUpdateString +"<bm:INST_OWNER_CUST_NUM>"+instOwnerName+"</bm:INST_OWNER_CUST_NUM>";
   recordUpdateString = recordUpdateString +"<bm:SHIP_TO_COUNTRY>"+shipToCoutry+"</bm:SHIP_TO_COUNTRY>";
   recordUpdateString = recordUpdateString +"<bm:OPERATING_UNIT>"+operatingUnit+"</bm:OPERATING_UNIT>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   recordUpdateString = recordUpdateString +"<bm:OPTY_ID>"+optyID+"</bm:OPTY_ID>";
   recordUpdateString = recordUpdateString +"<bm:ACCOUNT_TYPE>"+classification_CD+"</bm:ACCOUNT_TYPE>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalJobUpdatePayload,"forLoop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalJobUpdate=applytemplate(fileLocationFlagUpdate,renewalJobUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalJobUpdate = replace(quoteRequestRenewalJobUpdate,"&lt;","<");
   quoteRequestRenewalJobUpdate= replace(quoteRequestRenewalJobUpdate,"&gt;",">");
   quoteRequestRenewalJobUpdate = replace(quoteRequestRenewalJobUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update BRCM_Renewal_Job table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalJobUpdate, "error",headersDict);
  }
 }
 }
 
}
 //Updating Renewal Batch Detail Table with End Time and Sync In Progress Status
     renewalBatchDetailUpdatePayload = dict("string");
 renewalBatchDetailUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Batch_Detail_Update'");
   for each in renewalBatchDetailUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalBatchDetailUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalBatchDetailUpdatePayload,"Password", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SNO>"+sNO+"</bm:SNO>";
   recordUpdateString = recordUpdateString +"<bm:Batch_End_Time>"+currentsystemDate+"</bm:Batch_End_Time>";
   recordUpdateString = recordUpdateString +"<bm:Program_ID>"+Program_ID+"</bm:Program_ID>";
   recordUpdateString = recordUpdateString +"<bm:Status>"+"Sync in Progress"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   recordUpdateString = recordUpdateString +"<bm:START_GRP_ID>"+String(StartGrpID)+"</bm:START_GRP_ID>";
   recordUpdateString = recordUpdateString +"<bm:END_GRP_ID>"+String(EndGrpID)+"</bm:END_GRP_ID>";
   
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalBatchDetailUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalBatchDetailUpdate=applytemplate(fileLocationFlagUpdate,renewalBatchDetailUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&lt;","<");
   quoteRequestRenewalBatchDetailUpdate= replace(quoteRequestRenewalBatchDetailUpdate,"&gt;",">");
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update Renewal Batch Detail table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalBatchDetailUpdate, "error",headersDict);

   
   //Updating Dashboard with Sync in Progress Status
   updateDashboardSync = util.renewalDashboard_brcm(batchNumber,Program_ID, "Sync in Progress");
   
   //calling Auto Call Sync To Opty Util to sync all the quotes generated as part of the particular program that triggered this util
   
   synctoopportunityResponce = util.autoCalltoSyncToOpty_Automation(Program_ID);
   
   //Updating Renewal Batch Detail Table with End Time and Completed Status
     renewalBatchDetailUpdatePayload = dict("string");
 renewalBatchDetailUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Batch_Detail_Update'");
   for each in renewalBatchDetailUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalBatchDetailUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalBatchDetailUpdatePayload,"Password", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SNO>"+sNO+"</bm:SNO>";
   recordUpdateString = recordUpdateString +"<bm:Batch_End_Time>"+currentsystemDate+"</bm:Batch_End_Time>";
   recordUpdateString = recordUpdateString +"<bm:Program_ID>"+Program_ID+"</bm:Program_ID>";
   recordUpdateString = recordUpdateString +"<bm:Status>"+"Completed"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   recordUpdateString = recordUpdateString +"<bm:START_GRP_ID>"+String(StartGrpID)+"</bm:START_GRP_ID>";
   recordUpdateString = recordUpdateString +"<bm:END_GRP_ID>"+String(EndGrpID)+"</bm:END_GRP_ID>";
   
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalBatchDetailUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalBatchDetailUpdate=applytemplate(fileLocationFlagUpdate,renewalBatchDetailUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&lt;","<");
   quoteRequestRenewalBatchDetailUpdate= replace(quoteRequestRenewalBatchDetailUpdate,"&gt;",">");
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update Renewal Batch Detail table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalBatchDetailUpdate, "error",headersDict);
   
   //Updating Dashboard with Completed Status
   
   updateDashboardSync = util.renewalDashboard_brcm(batchNumber,Program_ID, "Completed");
   
   
      //calling Auto Submit to Order Util to order submt all the quotes generated as part of the particular program that triggered this util
   renewalSubmitToOrderResponce=util.autoSubmitToOrderRenewalAutomation(Program_ID);

    
return recordUpdateString;