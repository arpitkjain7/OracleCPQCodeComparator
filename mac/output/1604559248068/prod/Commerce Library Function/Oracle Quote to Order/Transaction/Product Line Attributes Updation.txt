/********************************************************************
Function Name: Product Line Attributes Updation
Description: This library function is used to populate all the auto populated attributes of line items in a quote.
Author: Kavita Lolla
Date: 2nd jan 2019
//modified by shruti on 22nd jan 2019 for defaulting attributes
//modified by nandhini for setting uplift_l , royaltyYN_l, maximumRoyaltyDiscount_l,quantityRatioConversion_l on feb 2019
//modified by adithya for setting estAnnualizedBooking_l attribute on feb 2019
//modified by arjun for setting mPNStatus_l attribute on 14-feb-2019
//modified by shivendra for setting mmsCompletionFlag_l attribute on 15-feb-2019
//modified by adithya for setting OfDaysInTerm_l attribute on 15-feb-2019
//modified by Nandhini for setting Sales Min 3 line item attribute on 18th feb 2019.
//modified by shivendra for setting daysBeforeQuarterEnd_l attribute on 18-feb-2019.
//modified by Raghavendra for setting warning messages on capacity and new sales transactions
//modified by Nandhini for setting EXISTING QUANTITY line item attribute on 20th feb 2019.
//modified by Nandhini for setting Est Quarterly Revenue $ and active line item attribute on 21st feb 2019.
//modified by shivendra for setting newAnnualRenewalValue_l attribute on 21st-feb-2019.
//modified by shivendra for setting totalNewSupportTermDays_l attribute on 21st-feb-2019.
//modified by shivendra for setting monthlyFeePerUnitUSD_l attribute on 21st-feb-2019.
//modified by raghav for setting unitCost_l,extCost_l attribute on 22nd-feb-2019
//modified by shivendra for setting baseProduct_l attribute on 26th-feb-2019.
//modified by Nandhini for setting nonStandardLicenseMetric_t attribute on 27-feb-2019.
//modified by Nandhini for setting exceedingMaximumRoyaltyDiscount_t attribute on 27-feb-2019.
//modified by Nandhini for setting quoteExpirationDate_t attribute on 28-feb-2019.
//modified by Nandhini for setting capacityDeviation_t attribute on 28-feb-2019.
//modified by nandhini/Raghav for setting quote expiration date on 6-Mar-2019
//modified by Arjun for setting the CPN Required Field and Bundle Part Num on 09-03-2019
//modified by raghav to optimize inner loop that sets days to quarter on quote line items on 25-March-2019.
/********************************************************************/

result="";
dlim="~";
dend="|";
mmsFlagY="YES";
mmsFlagN="NO";
activeExpired = "expired";
activeOpen = "open";
sum=0.0;
lineEffectiveStartDate  = quoteEffectiveDate_t;
lineExpirationDate = quoteExpirationDate_t;
lineContractStartDate = contractStartDate_t;
lineContractEndDate = contractEndDate_t;

lineEffectiveStartDate_UpdationFlag = true; 

dateFormat = "yyyy-MM-dd HH:mm:ss";
quoteExpDateObj = strtodate(_system_date, dateFormat);
if(lineExpirationDate <> "")
{
 quoteExpDateObj = strtodate(lineExpirationDate,dateFormat);
}

isCapacityAllowedError = false;
isNewSaleAllowedError = false;
isRenewalAllowedError = false;
isEndOfSupportError = false; 
subresult = "";

capacityAllowedErrorLines = "";
newSalesAllowedErrorLines = "";
renewalAllowedErrorLines = "";
endOfSupportErrorLines = "";

capacityAllowed = "";
newSalesAllowed = "";
document_no = 0;
businessType ="";
unitCost = 0.0;
extCost = 0.0;
nonStandardLicenseMetric="no";
exceedingMaximumRoyaltyDiscount = "no";
capacityDeviation =false;
proposedPrice = 0.0;
totalSupportTermDays = 0;

for Line in transactionLine
{
        expiringAnnualRenewalValue=0.000000;
        partNumber = Line._part_number;
 res = bmql("select Product_Type,Service_Required,Business_Div,Base_Product,Country_of_Origin,Product_Name,Description,SPI,Migration_Type,Qty_Ratio_Conversion,Renewal_Allowed,Upgrade_Material,Drop_Support_Date,SRT_Weeks,Capacity_Allowed,New_Sales_Allowed,Item_Type,PRODUCT_LINE from BRCM_Part_Master where MPN = $partNumber");
 productType = "";
 serviceReq = "";
 discountable = "";
 baseProd = "";
 busDiv = "";
 country = "";
 productName="";
 description="";
 spi="";
 migrationType="";
 qtyRatioConversion=""; 
 renewalAllowed="";  
 upgradeMaterial="";  
 cpn="";
 dropSupportDate="";
 productLine="";
 srt="";
 BundlePartNum="";
 contractValue = 0;
 businessType = line.businessType_l;
 transactionType =line.transactionTypeM_l;
 quantity = line._price_quantity;
 proposedPrice = proposedPrice + Line.totalValueUSD;
 // creating this variable to check for the condition for updating the active line attribute value.
 activeStatus = ""; 
 for record in res
 {
  productType = get(record,"Product_Type");
  serviceReq = get(record,"Service_Required");
  baseProd = get(record,"Base_Product");
  busDiv = get(record,"Business_Div");
  if(busDiv == "" or isnull(busDiv))
  {
   busDiv = "CAD";
  }
  country = get(record,"Country_of_Origin");
  productName = get(record,"Product_Name");
  description = get(record,"Description");
  spi = get(record,"SPI");
  migrationType = get(record,"Migration_Type");
  qtyRatioConversion= get(record,"Qty_Ratio_Conversion");
  renewalAllowed = get(record,"Renewal_Allowed");
  upgradeMaterial = get(record,"Upgrade_Material");
  dropSupportDate = get(record,"Drop_Support_Date");
  srt = get(record,"SRT_Weeks");
  capacityAllowed=get(record,"Capacity_Allowed" );
  newSalesAllowed = get(record,"New_Sales_Allowed");
  productLine = get(record,"PRODUCT_LINE");
 }
 res1 = bmql("SELECT Non_Disc_Pdts,Product_Status,Stabilization_Date,Royalty_Product,Royalty_Discount,Minimum,Std_Lic_Metric FROM BRCM_Part_Master_Ext WHERE MPN = $partNumber");
 non_discountable = "";
 lineStabilizationDate = "";
 royaltyProduct="";  
 maximumRoyaltyDiscount=0.00000; 
 quantityRatioConversion=""; 
 discountable = "";
 productStatus="";
 minimumQuantityString = "";
 minimumQuantityInt = 0;
 licenseMetric = "";
 for each in res1
 {
  non_discountable = get(each,"Non_Disc_Pdts");
  if(non_discountable == "Y")
  {
   discountable = "N";
  }
  else
  { 
   discountable = "Y";
  }
  lineStabilizationDate = get(each,"Stabilization_Date");
  royaltyProduct=get(each,"Royalty_Product");
  maximumRoyaltyDiscount=getfloat(each,"Royalty_Discount");
  productStatus=get(each,"Product_Status");
  licenseMetric = get(each,"Std_Lic_Metric");
 }
 
 if (NOT isnull(productLine))
 {
  result= result + line._document_number + dlim + "pL_l" + dlim + productLine + dend;
 }
 else
 {
  result= result + line._document_number + dlim + "pL_l" + dlim + " " + dend;
 }
 if(line.licenseMetric_l == "" and line._part_number <> "")
 {
  if(licenseMetric <> "" and not isnull(licenseMetric))
  {
   result= result + line._document_number + dlim + "licenseMetric_l" + dlim + licenseMetric + dend;
  }
  else
  {
   result= result + line._document_number + dlim + "licenseMetric_l" + dlim + "None" + dend;
  }
 }
 res2 = bmql("SELECT Sales_Min1,Sales_Min2,Uplift_Factor,Sales_Min3,Mfg_Cost,DealDesk_Enabled FROM BRCM_Part_Master_Prc WHERE MPN = $partNumber");
 salesMin1 = 0.0;
 salesMin2 = 0.0;
 salesMin3=0.0;
 upliftFactor=0.0; 
 lineExpirationDateObj = getdate();
 effectiveStartDateObj = getdate();
 if(line.lineExpirationDate_l<>"")
 {
  lineExpirationDateObj = strtodate(line.lineExpirationDate_l, dateFormat );
 }
 if(line.effectiveStartDate_l<>"")
 {
  effectiveStartDateObj = strtodate(line.effectiveStartDate_l, dateFormat );
 }
 duration = getdiffindays(lineExpirationDateObj,effectiveStartDateObj);
 for val in res2
 {
  upliftFactor = getfloat(val,"Uplift_Factor");
  unitCost = getfloat(val,"Mfg_Cost");
  is_discountable = get(val,"DealDesk_Enabled");
  if(is_discountable == "Y")
  {
   discountable = "Y";
   
  }
  else
  { 
   discountable = "N";
  }
 }
 
 NewAnnualRenVal = 0.0;
 extCost = unitCost * quantity;
 dateFormat1 = "MM/dd/yyyy";
 monthlyFeePerUnit = 0.0;
 contractEndDatelineObj=getdate();
 contractStartDatelineObj=getdate();
 if(line.contractEndDate_l <> "" and line.contractStartDate_l <> "")
 {
  contractEndDatelineObj = strtodate(line.contractEndDate_l, dateFormat);
  contractStartDatelineObj = strtodate(line.contractStartDate_l, dateFormat);
  totalSupportTermDays = getdiffindays(contractStartDatelineObj,contractEndDatelineObj);
  totalSupportTermDays = totalSupportTermDays + 1;
  result= result + line._document_number + dlim + "totalNewSupportTermDays_l" + dlim + string(totalSupportTermDays)+ dend;
 }
 if ( dealType_t == "cADRenewal" OR dealType_t == "cADStandard")
 {
     if(line.transactionTypeM_l == "New" OR line.transactionTypeM_l == "Renew" OR line.transactionTypeM_l == "Capacity")
     {
         if( (totalSupportTermDays <> 0) AND (line.licenseType_l <> "") )
         {
      if((((line.licenseType_l == "UMF") OR (line.licenseType_l == "Perpetual")) AND line.coveredProduct_l <>"")OR ( line.licenseType_l=="Subscription" AND line.coveredProduct_l == ""))
      {
          NewAnnualRenVal = (line.extProposedNetPriceRequested_l/totalSupportTermDays)*365;
      }
      if(dealType_t == "cADRenewal" AND line.licenseType_l=="Subscription" AND line.coveredProduct_l <> "")
   {
       NewAnnualRenVal = (line.extProposedNetPriceRequested_l/totalSupportTermDays)*365;
   }
         }
     }
 } 
 sum = sum + NewAnnualRenVal;
 if ( NOT isnull(totalSupportTermDays) AND totalSupportTermDays <> 0 )
 { 
  monthlyFeePerUnit = line.proposedNetUnitPriceRequested_l/totalSupportTermDays;
 }
 result= result + line._document_number + dlim + "monthlyFeePerUnitUSD_l" + dlim + string(monthlyFeePerUnit)+ dend;
 searchYearStr = substring( _system_date ,0,4);
 searchYearInt = atoi(searchYearStr);
 res3 = bmql("SELECT QTR_Name,Qtr_Start_Date,Qtr_End_Date FROM BRCM_Fiscal_Calendar where Qtr_Start_Year = $searchYearInt or Qtr_End_Year = $searchYearInt");
 daysBeforeQuarter = 0;
 QtrEnddate = "";
 QtrStartdate = "";
 for value in res3
 {
  QtrEnddate = get(value,"Qtr_End_Date");
  QtrStartdate = get(value,"Qtr_Start_Date");
  QtrEnddateobj = strtodate(QtrEnddate, dateFormat1);
  QtrStartdateobj = strtodate(QtrStartdate, dateFormat1);
  Sysdate = strtodate(_system_date, dateFormat);
  if(comparedates(QtrEnddateobj , Sysdate)==1 AND comparedates(Sysdate, QtrStartdateobj)==1)
  {
   daysBeforeQuarter = getdiffindays(QtrEnddateobj , Sysdate);
  } 
 }
 Sysdate1 = strtodate(_system_date, dateFormat1);
 daysInQuarter = 0;
 QtrEnddate = "";
 QtrStartdate = "";
 dateFormat2 = "yyyy-MM-dd";
 estQuarterlyRevenue =0.0;
 datesDifference = 0.0;
 lineExpirationDate1 =line.lineExpirationDate_l;
 lineExpirationDateStr = "";
 effectiveStartDate = line.effectiveStartDate_l;
 effectiveStartDatestr = substring(effectiveStartDate ,0,11);
 if(effectiveStartDatestr<>"")
 {
  effectiveStartDateObj = strtodate(effectiveStartDatestr,dateFormat2);
 }
 SysdateStr = strtodate(_system_date, dateFormat);
 searchYearStr = substring( _system_date ,0,4);
 searchYearInt = atoi(searchYearStr);
 res4 = bmql("SELECT QTR_Name,Qtr_Start_Date,Qtr_End_Date FROM BRCM_Fiscal_Calendar where Qtr_Start_Year = $searchYearInt or Qtr_End_Year = $searchYearInt");
 if(lineExpirationDate1 <> "")
 {
  lineExpirationDateStr = substring(lineExpirationDate1,0,11);
 }
 if(lineExpirationDateStr <> "")
 {
  lineExpirationDateObj = strtodate(lineExpirationDateStr,dateFormat2);
  for value in res4
  {
   QtrEnddate = get(value,"Qtr_End_Date");
   QtrStartdate = get(value,"Qtr_Start_Date");
   if(QtrEnddate <>"" and QtrStartdate<>"")
   {
    QtrStartdateobj = strtodate(QtrStartdate, dateFormat1);//
    QtrEnddateobj = strtodate(QtrEnddate, dateFormat1);//
    if(comparedates(QtrEnddateobj,SysdateStr)==1 AND comparedates(SysdateStr, QtrStartdateobj)==1)
    {
     daysInQuarter = getdiffindays(QtrEnddateobj , QtrStartdateobj);
     if(comparedates(QtrEnddateobj,lineExpirationDateObj)== 1)
     {
      estQuarterlyRevenue  = line.extProposedNetPriceRequested_l;  
     }
     else 
     {       
      datesDifference = getdiffindays(lineExpirationDateObj ,effectiveStartDateObj);
      if(datesDifference<>0)
      {
       estQuarterlyRevenue =  (line.extProposedNetPriceRequested_l / datesDifference) * daysInQuarter;
      }
     } 
    }
   }
  }
  result= result + line._document_number + dlim + "estQuarterlyRevenue_l" + dlim + string(estQuarterlyRevenue) + dend;
 }
 cov = line.coveredProduct_l;
 serialNumber = line.serial_l;
 priorContractNumber = line.priorContract;
 res5 = bmql("SELECT EXISTING_QUANTITY,EXP_ANNUAL_RENEWAL FROM BRCM_Assets WHERE  SERIAL_NUMBER = $serialNumber AND CONTRACT_NUMBER =$priorContractNumber AND COVERED_ITEM = $cov");
 existingQuantity1 = ""; 
 for value in res5 
 {
      existingQuantity1 = get(value,"EXISTING_QUANTITY");
      expiringAnnualRenewalValue1 = get( value, "EXP_ANNUAL_RENEWAL");
      blankexpiringARV = isnumber(expiringAnnualRenewalValue1);
     if(blankexpiringARV == false){
         expiringAnnualRenewalValue = 0.000000;
     }else{ expiringAnnualRenewalValue = atof(expiringAnnualRenewalValue1);
   }
 } 
 if(line.transactionTypeM_l == "capacity")
 {
     result= result + line._document_number + dlim + "existingQuantity_l" + dlim + existingQuantity1 + dend; 
 }
 result= result + line._document_number + dlim + "baseProduct_l" + dlim + baseProd + dend;
 result= result + line._document_number + dlim + "productName_l" + dlim + productName + dend;
 result= result + line._document_number + dlim + "productType_l" + dlim + productType + dend;
 result= result + line._document_number + dlim + "serviceRequired_l" + dlim + serviceReq + dend;
 result= result + line._document_number + dlim + "businessDivision_l" + dlim + busDiv + dend;
 result= result + line._document_number + dlim + "countryOfOrigin_l" + dlim + country + dend;
 result= result + line._document_number + dlim + "description_l" + dlim + description + dend;
 result= result + line._document_number + dlim + "sPI_l" + dlim + spi+ dend;
 result= result + line._document_number + dlim + "migrationType_l" + dlim + migrationType+ dend;
 result= result + line._document_number + dlim + "quantityRatioConversion_l" + dlim + qtyRatioConversion+ dend;
 result= result + line._document_number + dlim + "renewalsAllowed_l" + dlim + renewalAllowed+ dend;
 result= result + line._document_number + dlim + "upgradeMaterial_l" + dlim + upgradeMaterial+ dend;
 result= result + line._document_number + dlim + "dropSupportDate_l" + dlim + dropSupportDate + dend;
        result= result + line._document_number + dlim + "unitCost_l" + dlim + string(unitCost) + dend;
 result= result + line._document_number + dlim + "extCost_l" + dlim + string(extCost) + dend;
 result= result + line._document_number + dlim + "endOfSupportServiceDate_l" + dlim + dropSupportDate + dend;
 result= result + line._document_number + dlim + "sRT_l" + dlim + srt + dend;
 result= result + line._document_number + dlim + "isDiscountable_l" + dlim + discountable + dend;
 result= result + line._document_number + dlim + "stabilizationDate_l" + dlim + lineStabilizationDate + dend;
 result= result + line._document_number + dlim + "royaltyYN_l" + dlim + royaltyProduct+ dend;
 result= result + line._document_number + dlim + "maximumRoyaltyDiscount_l" + dlim + string(maximumRoyaltyDiscount) + dend;
 result= result + line._document_number + dlim + "mPNStatus_l" + dlim +productStatus + dend;
 result= result + line._document_number + dlim + "OfDaysInTerm_l" + dlim + string(duration) + dend; 
 result= result + line._document_number + dlim + "capacityAllowed_l" + dlim + capacityAllowed + dend;
 if(line.effectiveStartDate_l == "" and lineEffectiveStartDate <> "")
 {
  result= result + line._document_number + dlim + "effectiveStartDate_l" + dlim + lineEffectiveStartDate + dend;
 }
 if(line.lineExpirationDate_l == "" and lineExpirationDate <> "")
 {
  result= result + line._document_number + dlim + "lineExpirationDate_l" + dlim + datetostr(quoteExpDateObj) + dend;
 }
 if(line.cPUModelSerial_l <> "")
 {
  result= result + line._document_number + dlim + "mmsCompletionFlag_l" + dlim + mmsFlagY + dend;
 }
 if(line.cPUModelSerial_l == "")
 {
  result= result + line._document_number + dlim + "mmsCompletionFlag_l" + dlim + mmsFlagN + dend;
 }
 if((dealType_t <> "cADProfessionalServices") OR (dealType_t <> "cADEducation"))
 {
  result= result + line._document_number + dlim + "newAnnualRenewalValue_l" + dlim + string(NewAnnualRenVal)+ dend;
 }
 if(dealType_t == "cADEducation" or dealType_t == "cADRenewal" or dealType_t == "cADProfessionalServices" or dealType_t == "cADStandard"){
  result= result + line._document_number + dlim + "daysBeforeQuarterEnd_l" + dlim + string(daysBeforeQuarter) + dend;
 }
 if(line.contractEndDate_l <> "" and line.contractStartDate_l <> "") 
 {
  contractEndDate = strtodate(line.contractEndDate_l,dateFormat);
  contractStartDate =strtodate(line.contractStartDate_l,dateFormat);
  if(comparedates(SysdateStr, contractEndDate)==1){
   activeStatus = activeExpired;
  }
  if( getdiffindays (SysdateStr, contractStartDate) <= getdiffindays (contractEndDate, contractStartDate)){
    
    activeStatus= activeOpen;
  }
  
  result= result + line._document_number + dlim + "active_l" + dlim +activeStatus + dend;
 }
 if(not isnull(capacityAllowed) and capacityAllowed <> "")
 {
  if(transactionType == "capacity" and lower(capacityAllowed) == "n")
  {
   document_no = line._sequence_number;
   capacityAllowedErrorLines = capacityAllowedErrorLines + string(document_no) + ","; 
   isCapacityAllowedError = true;
  }
 }
 if(not isnull(newSalesAllowed) and newSalesAllowed <> "")
 {
  if(transactionType == "new" and lower(newSalesAllowed)=="n")
  {
   document_no = line._sequence_number;
   newSalesAllowedErrorLines = newSalesAllowedErrorLines + string(document_no) + ",";
   isNewSaleAllowedError = true;
  }
 }
 if(not isnull(renewalAllowed) and renewalAllowed <> "")
 {
  if(transactionType == "renewal" and lower(renewalAllowed)=="n")
  {
   document_no = line._sequence_number;
   renewalAllowedErrorLines = renewalAllowedErrorLines + string(document_no) + ",";
   isRenewalAllowedError = true;
  }
 }
 if(line.nonStandardLicenseMetric_l == "yes")
    {
        nonStandardLicenseMetric = "yes";
    }
 if(line.royaltyYN_l =="yes")
 {
     exceedingMaximumRoyaltyDiscount ="yes";
 }
 if(startswith(upper(line.transactionTypeM_l), "CAPACITY"))
 {
             if(line.contractedOrPriorLicenseSubFee_l <> line.proposedNetUnitPriceRequested_l)
  {
      capacityDeviation =true;
  }
 } 
  
 if(line._part_number <> "" and line.endOfSupportServiceDate_l <> "" and line.effectiveStartDate_l <> "" and line.lineExpirationDate_l <> "" and line._part_number <> "Cust")
 {
  
  endOfSupportServiceDateObject = strtodate(line.endOfSupportServiceDate_l,dateFormat);
  effectiveStartDateObject = strtodate(line.effectiveStartDate_l,dateFormat);
  lineExpirationDateObject = strtodate(line.lineExpirationDate_l,dateFormat);
  if(comparedates(endOfSupportServiceDateObject,effectiveStartDateObject) == -1 or comparedates(endOfSupportServiceDateObject,lineExpirationDateObject) == -1)
  {
   line_no = line._sequence_number;
   endOfSupportErrorLines = endOfSupportErrorLines + string(line_no)+",";
   isEndOfSupportError = true;
  }
 }  
}
if(isCapacityAllowedError)
{
 capacityAllowedErrorLines = "Capacity sales are not permitted for line item(s) numbered "+capacityAllowedErrorLines+"\n";
 subresult= subresult + capacityAllowedErrorLines;
}
if(isNewSaleAllowedError)
{
 newSalesAllowedErrorLines = "New Product sales are not permitted for line item(s) numbered "+newSalesAllowedErrorLines+"\n";
 subresult= subresult + newSalesAllowedErrorLines;
}
if(isRenewalAllowedError)
{
 renewalAllowedErrorLines = "Renewal is not permitted for line item(s) numbered "+renewalAllowedErrorLines+"\n";
 subresult= subresult + renewalAllowedErrorLines;
}
if(isEndOfSupportError)
{
 endOfSupportErrorMsg = "Error on line(s) "+endOfSupportErrorLines+". Product end of support is lesser than Effective start date / Line Expiraton date.";
 subresult = subresult + endOfSupportErrorMsg;
}
if((isCapacityAllowedError or isNewSaleAllowedError or isRenewalAllowedError or isEndOfSupportError))
{
 subresult= _transaction_document_number + dlim + "lineItemsWarning_t" + dlim + subresult + dend;
}
else
{
 subresult= _transaction_document_number + dlim + "lineItemsWarning_t" + dlim + "" + dend;
}

result = result + subresult;
result = result + "1" + dlim + "newAnnualRenewalValue_t" + dlim + string(sum) + dend;
result= result + _transaction_document_number + dlim + "capacityDeviation_t" + dlim + string(capacityDeviation) + dend;
result= result + _transaction_document_number + dlim + "nonStandardLicenseMetric_t" + dlim + nonStandardLicenseMetric + dend;
result= result + _transaction_document_number + dlim + "exceedingMaximumRoyaltyDiscount_t" + dlim + exceedingMaximumRoyaltyDiscount + dend;
return result;