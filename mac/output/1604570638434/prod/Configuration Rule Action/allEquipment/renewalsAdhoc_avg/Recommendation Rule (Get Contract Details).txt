/*****************************************************************
Function Name :Get Contract Details
Author : Ravi Kumar
Description : This function will set Contract Numbers in Array
/*****************************************************************/
i = 0;
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
result=String[];
response=getcontractsResponse_avg;

contractdetails = jsonarray();
if(response<>"Not Found")
{
if(searchByContractNumber_avg==false)
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
CustDetails = jsonpathgetmultiple(jsonObj,"$..CustomerId");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Customer Name", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[count]=jsonarrayget(CustDetails,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}
}
else{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
CustDetails = jsonpathgetmultiple(jsonObj,"$..CustomerId");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Customer Name", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[atoi(contractCounters_avg)]=jsonarrayget(CustDetails,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}

arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{

if(each==atoi(contractCounters_avg))
{
result[each]=result[atoi(contractCounters_avg)];
}
else
{
result[each]=customerIdcontractarray_avg[each];
}


}
}
}
else{
result=customerIdcontractarray_avg;
}
return result;
/*****************************************************************
Function Name :Get Contract Details
Author : Ravi Kumar
Description : This function will set Contract Numbers in Array
/*****************************************************************/
i = 0;
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
result=String[];
response=getcontractsResponse_avg;

contractdetails = jsonarray();
if(response<>"Not Found")
{
if(searchByContractNumber_avg==false)
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
CustDetails = jsonpathgetmultiple(jsonObj,"$..PartyUniqueName");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Customer Name", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[count]=jsonarrayget(CustDetails,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}
}
else{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
CustDetails = jsonpathgetmultiple(jsonObj,"$..PartyUniqueName");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Customer Name", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[atoi(contractCounters_avg)]=jsonarrayget(CustDetails,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}

arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{

if(each==atoi(contractCounters_avg))
{
result[each]=result[atoi(contractCounters_avg)];
}
else
{
result[each]=customerNamecontractarray_avg[each];
}


}
}
}
else{
result=customerNamecontractarray_avg;
}
return result;
/*****************************************************************
Function Name :Get Contract Details
Author : Ravi Kumar
Description : This function will set Contracts Array Controller Size
/*****************************************************************/
counter=1;
groupStringBulder =stringbuilder();
result=0;
jsonObj1=json();
response = getcontractsResponse_avg;
if(response<>"Not Found")
{
if(searchByContractNumber_avg==false){
result=0;
}
else{
result=renewalContractsArrayController_avg;
}
}

return string(result);
/*****************************************************************
Function Name :Get Contract Details
Author : Ravi Kumar
Description : This function will set Contract Numbers in Array
/*****************************************************************/
i = 0;
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
result=String[];
response=getcontractsResponse_avg;
contractdetails = jsonarray();
if(response<>"Not Found")
{
if(searchByContractNumber_avg==false)
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[count]=jsonarrayget(contractdetails,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}
}
else{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[atoi(contractCounters_avg)]=jsonarrayget(contractdetails,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}

arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{

if(each==atoi(contractCounters_avg))
{
result[each]=result[atoi(contractCounters_avg)];
}
else
{
result[each]=contractNumber_avg[each];
}


}
}
}
else
{

result=contractNumber_avg;
}
return result;
/*****************************************************************
Function Name :Get Contract Details 
created by : Ravi
Description : This function will set Source Value for each Unique Contract in Array
/*****************************************************************/
i = 0;
Source=String[];
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
result=String[];
response=getcontractsResponse_avg;
OUDict=Dict("string");
contractdetails = jsonarray();
if(response<>"Not Found")
{
if(searchByContractNumber_avg==false)
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
SourceDetails = jsonpathgetmultiple(jsonObj,"$..BRCM_SourceAttribute_c");
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
//OperatingUnit=jsonarrayget(OUDetails,each);
//put(OUDict,jsonarrayget(OUDetails,each),OperatingUnit);
Source[count]=jsonarrayget(SourceDetails,each);
count=count+1;

groupStringBulder = sbappend(groupStringBulder,detailsString);

}
}
}
else{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
SourceDetails = jsonpathgetmultiple(jsonObj,"$..BRCM_SourceAttribute_c");
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
//OperatingUnit=jsonarrayget(OUDetails,each);
//put(OUDict,jsonarrayget(OUDetails,each),OperatingUnit);
if(contractCounters_avg=="0")
{
Source[count]=jsonarrayget(SourceDetails,each);

count=count+1;

groupStringBulder = sbappend(groupStringBulder,detailsString);
}
else{
Source[atoi(contractCounters_avg)]=jsonarrayget(SourceDetails,each);

count=count+1;

groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}
}
arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{
if(each==atoi(contractCounters_avg))
{
Source[each]=Source[atoi(contractCounters_avg)];
}
else
{
Source[each]=source_avg[each];
}


}
}

}
else{
Source=source_avg;
} 

return Source;
/*****************************************************************
Function Name :Customer Search For Renewal Adhoc Job
Author : Ravi Kumar
Description : This function is a used to search contract details
*/
i = 0;
result=String[];
response=getcontractsResponse_avg;
contractdetails = jsonarray();
if(response<>"Not Found")
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractLineNumber_c");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
dummyarr=string[jarrsize];
for each in dummyarr {
curerentval=jsonarrayget(contractdetails,i,"string");
//print curerentval;
result[i] = curerentval;
i=i+1;
}
}
return result;
/*****************************************************************
Function Name :Get Contract Details
Author : Ravi Kumar
Description : This function will set Contracts Array Controller Size
/*****************************************************************/
counter=1;
groupStringBulder =stringbuilder();
count=0;
jsonObj1=json();
response = getcontractsResponse_avg;
if(response<>"Not Found")
{
if(searchByContractNumber_avg==false)
{
jsonObj = json(response);
//Party_ID_array=jsonpathgetmultiple(jsonObj1,"$..PartyId");
contractnumVals = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
//print contractnumVals;
counter = jsonarraysize(contractnumVals);
size=range(counter);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractnumVals,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}
}
else{
jsonObj = json(response);
//Party_ID_array=jsonpathgetmultiple(jsonObj1,"$..PartyId");
if(contractCounters_avg<>"0")
{
if(findinarray(contractNumber_avg, searchContractNumber_avg)==-1)
{
count=atoi(contractCounters_avg)+1;
}
else{
count=renewalContractsArrayController_avg;
}
}
else{
count=renewalContractsArrayController_avg;
}
}
}
else
{
count=atoi(contractCounters_avg);
}
return count;
/*****************************************************************
Function Name :Get Contract Details
Author : Ravi Kumar
Description : VIPER-920 - This function will set Contract Numbers in Array
/*****************************************************************/
i = 0;
//VIPER - 920 - Begin - This function will set Contract Numbers in Array
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
//VIPER - 920 - END
result=String[];
response=getcontractsResponse_avg;
contractdetails = jsonarray();
if(response<>"Not Found")
{
if(searchByContractNumber_avg==false)
{
jsonObj = json(getcontractsResponse_avg);
//VIPER - 920 - Begin - This function will set Contract Numbers in Array
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
//VIPER - 920 - END
statusdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractStatus_c");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
//VIPER - 920 - Begin - This function will set Contract Numbers in Array
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[count]=jsonarrayget(statusdetails ,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}elif(jsonarrayget(statusdetails ,each)=="Active"){
result[count-1]=jsonarrayget(statusdetails ,each);
}
//VIPER - 920 - END
}
}
else{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
statusdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractStatus_c");
print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
//VIPER - 920 - Begin - This function will set Contract Numbers in Array
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[atoi(contractCounters_avg)]=jsonarrayget(statusdetails ,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}elif(jsonarrayget(statusdetails ,each)=="Active"){
result[atoi(contractCounters_avg)]=jsonarrayget(statusdetails ,each);
}
}
//VIPER - 920 - END
arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{

if(each==atoi(contractCounters_avg))
{
result[each]=result[atoi(contractCounters_avg)];
}
else
{
result[each]=contractStatus_avg[each];
}


}
}
}
else
{

result=contractStatus_avg;
}
return result;
/*****************************************************************
Function Name :Get Contract Details
Author : Ravi Kumar
Description : This function will set Currency Attribute in Contract Details Array
/*****************************************************************/
i = 0;
contract=String[];
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
result=String[];
response=getcontractsResponse_avg;
contractdetails = jsonarray();
if(response<>"Not Found")
{
if(searchByContractNumber_avg==false)
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
currDetails = jsonpathgetmultiple(jsonObj,"$..EnteredCurrencyCode");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[count]=jsonarrayget(currDetails ,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}
}
else{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
currDetails = jsonpathgetmultiple(jsonObj,"$..EnteredCurrencyCode");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
result[atoi(contractCounters_avg)]=jsonarrayget(currDetails ,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);
}
}
arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{

if(each==atoi(contractCounters_avg))
{
result[each]=result[atoi(contractCounters_avg)];
}
else
{
result[each]=currency_avg[each];
}


}
}
}
else{
result=currency_avg;
}
return result;
/*****************************************************************
Function Name :Get Contract Details
Author : Ravi Kumar
Description : This function will set Contract End Date in Array
/*****************************************************************/
endDate="";
i = 0;
contract=String[];
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
result=String[];
response=getcontractsResponse_avg;
DateDict=Dict("string");
contractdetails = jsonarray();
if(response<>"Not Found")
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
dateDetails = jsonpathgetmultiple(jsonObj,"$..EndDate");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
endDate=jsonarrayget(dateDetails,each);
put(DateDict,jsonarrayget(contractdetails,each),endDate);
contract[count]=jsonarrayget(contractdetails,each);
count=count+1;

groupStringBulder = sbappend(groupStringBulder,detailsString);

}
else
{
if(strtojavadate(jsonarrayget(dateDetails,each), "yyyy-MM-dd")>strtojavadate(get(DateDict,jsonarrayget(contractdetails,each)), "yyyy-MM-dd")){
endDate=jsonarrayget(dateDetails,each);
put(DateDict,jsonarrayget(contractdetails,each),endDate);
}
}
}

}
print DateDict;
contractcount=range(count);
if(searchByContractNumber_avg==false)
{
for cnt in contractcount
{
result[cnt]=get(DateDict,contract[cnt]);
}
}
else
{
for cnt in contractcount
{
result[atoi(contractCounters_avg)]=get(DateDict,contract[cnt]);
}
arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{

if(each==atoi(contractCounters_avg))
{
result[each]=result[atoi(contractCounters_avg)];
}
else
{
result[each]=contractEndDate_avg[each];
}
}
}
if(response=="Not Found")
{
result=contractEndDate_avg;

}
return result;
/*****************************************************************
Function Name :Get Contract Details 
created by : Ravi
Description : This function will set Summarized Total Annual Value for each Contract in Array
/*****************************************************************/
eAR=0.0;
i = 0;
contract=String[];
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
result=Float[];
response=getcontractsResponse_avg;
earDict=Dict("float");
contractdetails = jsonarray();
if(response<>"Not Found")
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
amtDetails = jsonpathgetmultiple(jsonObj,"$..AssetAmount");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
if(isnull(jsonarrayget(amtdetails,each))==false AND jsonarrayget(amtdetails,each)<>"null")
{
eAR=atof(jsonarrayget(amtdetails,each));
put(eaRDict,jsonarrayget(contractdetails,each),eAR);
}
else
{
eAR=0.0;
put(eaRDict,jsonarrayget(contractdetails,each),eAR);
}
contract[count]=jsonarrayget(contractdetails,each);
count=count+1;
groupStringBulder = sbappend(groupStringBulder,detailsString);

}
else
{
if(isnull(jsonarrayget(amtdetails,each))==false AND jsonarrayget(amtdetails,each)<>"null")
{
eAR=get(eaRDict,jsonarrayget(contractdetails,each))+atof(jsonarrayget(amtdetails,each));
}
else
{
eAR=get(eaRDict,jsonarrayget(contractdetails,each))+0.0;
}
put(eaRDict,jsonarrayget(contractdetails,each),eAR);

}
}

}

contractcount=range(count);

if(searchByContractNumber_avg==false)
{
for cnt in contractcount
{
result[cnt]=get(eaRDict,contract[cnt]);
}
}
else
{
for cnt in contractcount
{
result[atoi(contractCounters_avg)]=get(eaRDict,contract[cnt]);
}
arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{

if(each==atoi(contractCounters_avg))
{
result[each]=result[atoi(contractCounters_avg)];
}
else
{
result[each]=totalAnnualValue_avg[each];
}
}
}
if(response=="Not Found")
{
result=totalAnnualValue_avg;
}
return result;
/*****************************************************************
Function Name :Get Contract Details 
created by : Ravi
Description : This function will set Operating Unit Value for each Unique Contract in Array
/*****************************************************************/
i = 0;
OperatingUnit=String[];
jsonObj1=json();
groupStringBulder=stringbuilder();
count=0;
result=String[];
response=getcontractsResponse_avg;
OUDict=Dict("string");
contractdetails = jsonarray();
if(response<>"Not Found")
{

if(searchByContractNumber_avg==false)
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
OUDetails = jsonpathgetmultiple(jsonObj,"$..BRCM_OperatingUnit_c");
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
//OperatingUnit=jsonarrayget(OUDetails,each);
//put(OUDict,jsonarrayget(OUDetails,each),OperatingUnit);
OperatingUnit[count]=jsonarrayget(OUDetails,each);
count=count+1;

groupStringBulder = sbappend(groupStringBulder,detailsString);

}
}
}
else
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..BRCM_ContractNumber_c");
OUDetails = jsonpathgetmultiple(jsonObj,"$..BRCM_OperatingUnit_c");
jarrsize = jsonarraysize(contractdetails);
size=range(jarrsize);
for each in size
{
jsonput(jsonObj1,"Contract Number", jsonarrayget(contractdetails,each));
detailsString = jsontostr(jsonObj1);
stringGroup = sbtostring(groupStringBulder);
if(find(stringGroup,detailsString) < 0)
{
//OperatingUnit=jsonarrayget(OUDetails,each);
//put(OUDict,jsonarrayget(OUDetails,each),OperatingUnit);
OperatingUnit[atoi(contractCounters_avg)]=jsonarrayget(OUDetails,each);
count=count+1;

groupStringBulder = sbappend(groupStringBulder,detailsString);

}
}
arrayrange=range(renewalContractsArrayController_avg);
for each in arrayrange
{
if(each==atoi(contractCounters_avg))
{
OperatingUnit[each]=OperatingUnit[atoi(contractCounters_avg)];
}
else
{
OperatingUnit[each]=operatingUnit_avg[each];
}


}

}
}
else{
OperatingUnit=operatingUnit_avg;
}
print OperatingUnit;
return OperatingUnit;
/*****************************************************************
Function Name :Customer Search For Renewal Adhoc Job
Author : Ravi Kumar
Description : This function is a used to search contract details
*/
i = 0;
result=String[];
response=getcontractsResponse_avg;
contractdetails = jsonarray();
if(response<>"Not Found")
{
jsonObj = json(getcontractsResponse_avg);
contractdetails = jsonpathgetmultiple(jsonObj,"$..SerialNumber");
//print contractdetails;
values1 = string[];
jarrsize = jsonarraysize(contractdetails);
dummyarr=string[jarrsize];
for each in dummyarr {
curerentval=jsonarrayget(contractdetails,i,"string");
//print curerentval;
result[i] = curerentval;
i=i+1;
}
}
return result;