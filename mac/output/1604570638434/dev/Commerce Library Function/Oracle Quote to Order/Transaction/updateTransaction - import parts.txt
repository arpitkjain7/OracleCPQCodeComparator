/*********************************************************************
Function Name: updateTransaction - import parts
Description: This library function is used to update existing lines to the quote
Author: Shruti Sawla
User Story #:UID-101
Date: 15th dec 2018
******************************Change Log*****************************
edited by Shruti on 25-Feb-2019 for setting some more line level attributes
edited by Shruti on 14-May-2019 for optimization
edited by shruti on 24-Jun-2019 to add PLA attribute
edited by Rohit on 11-Nov-2019 to add Serial Number
edited by Shruti on 8-Jan-2020 to add attributes as part of SYMINT-3138
edited by shruti on 14th april 2020 to resolve 20A upgrade issue
*********************************************************************/
/* steps performed:
1) read the file
2) segregate the lines into new lines and lines to be updated
3) call update transaction
4) call addpartstotransaction bml function
*/
//import the CSV file

dropProduct="";
value="";
// if the file attachment attribute is blank, add the error message as file not attached
if(importQuoteDetails_t==""){
value="File not attached";
}
else{ 
// ifthe attribute has attachment, fetch the attachment
mainattachment = getattachmentdata(importQuoteDetails_t);

//read the CSV and decode it
content= replace(decodebase64(get(mainattachment ,"filecontent", "string")),"\n","@@");
//read the CSV and decode it using base 64 format
if(content <> " "){



//declaring array
fileArray = string[]; // split the file and store the value
lineArray = string[]; // store quote line parts
jsonObj = json(); 
jsonAry = jsonarray(); //extra lines from the file that needs to be added to the quote
jsonAryUpdate = string[]; //lines for update
linesFromFile = string[]; 
CustArray = string[];

// fetching line item data for partNumber/documentNumber
for line in transactionLine{

if((line._model_name <> "Customer Search" and line._part_number =="") OR (line._part_number <> "Cust" and line._model_name == "")){
// append the document number in line array if the part is not blank and is not customer search part
append(lineArray,line._document_number);
}
else{
// append the document number in cust array if the part is customer search part
append(CustArray,line._document_number);


}
            
}     

// reading the imported file, split it and form json structure for the data
fileArray =split((substring(content,0,len(content)-2)),"@@");
cnt = 0;
for each in fileArray{
      val = split(each,",");
      if(find(val[0],"Line Number") > -1){
       // search if "Line Number" is the value in the file
            cnt = 1;
            }
      elif(cnt == 1){
      // form the json structure for the imported file
      //jsonput(jsonObj,"parentDocNumber",parentDoc);
      if(val[1] <> ""  AND val[1] <> " " AND NOT(isnull(val[1]))){
      jsonput(jsonObj,"partNumber",val[1]);
      }
      if(val[2] <> ""  AND val[2] <> " " AND NOT(isnull(val[2])) AND isnumber(val[2]) ){
      jsonput(jsonObj,"quantity",val[2]);
      }
      else{
      jsonput(jsonObj,"quantity","1");
      }
      if(val[3] <> ""  AND val[3] <> " " AND NOT(isnull(val[3])) ){
      jsonput(jsonObj,"hiddenPrice_l",val[3]);
      }
      else{
      jsonput(jsonObj,"hiddenPrice_l","0");
      }
      
      if(val[5] <> ""  AND val[5] <> " " AND NOT(isnull(val[5])) ){
      jsonput(jsonObj,"proposedNetUnitPriceRequested_l",val[5]);
      jsonput(jsonObj,"hiddenProposedPrice_l",val[5]);
      }
      else{
      jsonput(jsonObj,"proposedNetUnitPriceRequested_l","0");
      jsonput(jsonObj,"hiddenProposedPrice_l","0");
      }
                  
      if(val[7] <> ""  AND val[7] <> " " AND NOT(isnull(val[7]))){
            jsonput(jsonObj,"requestedDiscount_l",val[7]);
      }
      else{
            jsonput(jsonObj,"requestedDiscount_l","0");
      }
      
      if(val[8] <> ""  AND val[8] <> " " AND NOT(isnull(val[8]))){
      
      jsonput(jsonObj,"cPN_l",val[8]);
      }
      else{
      jsonput(jsonObj,"cPN_l","");
      }

      if(val[17]<> BRCM_blankDate_t)
      {
      
      jsonput(jsonObj,"effectiveStartDate_l",val[17]);
      //jsonput(jsonObj,"effectiveStartDate_l",datetostr(strtojavadate(val[14],"MM/dd/yyyy"),"yyyy-MM-dd HH:mm:ss","GMT-07"));
      }
      else{
      jsonput(jsonObj,"effectiveStartDate_l",quoteEffectiveDate_t);
      }

      if(val[18]<> BRCM_blankDate_t)
      {
      jsonput(jsonObj,"lineExpirationDate_l",val[18]);
      //jsonput(jsonObj,"lineExpirationDate_l",datetostr(strtojavadate(val[15],"MM/dd/yyyy"),"yyyy-MM-dd HH:mm:ss","GMT-07"));
      }
      else{
      jsonput(jsonObj,"lineExpirationDate_l",quoteExpirationDate_t);
      }

      
      if(quoteType_t <> "contractQuote"){
      if(val[9] <> ""  AND val[9] <> " " AND NOT(isnull(val[9]))){
      
      jsonput(jsonObj,"coveredProduct_l",val[9]);
      }
      else{
      jsonput(jsonObj,"coveredProduct_l","");
      }
      
      if(val[11] <> ""  AND val[11] <> " " AND NOT(isnull(val[11]))){
      
      jsonput(jsonObj,"transactionTypeM_l",val[11]);
      }
      else{
      
      jsonput(jsonObj,"transactionTypeM_l","");
      }
      if(val[12] <> ""  AND val[12] <> " " AND NOT(isnull(val[12]))){
      jsonput(jsonObj,"licenseType_l",val[12]);
      }
      else{
      jsonput(jsonObj,"licenseType_l","");
      }
      if(val[13] <> ""  AND val[13] <> " " AND NOT(isnull(val[13]))){
      jsonput(jsonObj,"licenseMetric_l",val[13]);
      }
      else{
      jsonput(jsonObj,"licenseMetric_l","");
      }
      if(val[14] <> ""  AND val[14] <> " " AND NOT(isnull(val[14]))){
      jsonput(jsonObj,"enterEnvironment_l",val[14]);
      }
      else{
      jsonput(jsonObj,"enterEnvironment_l","");
      }
      if(val[15] <> ""  AND val[15] <> " " AND NOT(isnull(val[15]))){
      jsonput(jsonObj,"languageRequired_l",val[15]);
      }
      else{
      jsonput(jsonObj,"languageRequired_l","");
      }
      if(val[16] <> ""  AND val[16] <> " " AND NOT(isnull(val[16]))){
      jsonput(jsonObj,"supportType_l",val[16]);
      }
      else{
      jsonput(jsonObj,"supportType_l","");
      }
      
      
      
      
      
      if(val[19]<> BRCM_blankDate_t)
      {
      jsonput(jsonObj,"contractStartDate_l",val[19]);
      //jsonput(jsonObj,"contractStartDate_l",datetostr(strtojavadate(val[18],"MM/dd/yyyy"),"yyyy-MM-dd HH:mm:ss","GMT-07"));
      }
      else{
      jsonput(jsonObj,"contractStartDate_l",contractStartDate_t);
      }
      
      if(val[20]<> BRCM_blankDate_t)
      {
      jsonput(jsonObj,"contractEndDate_l",val[20]);
      //jsonput(jsonObj,"contractEndDate_l",datetostr(strtojavadate(val[19],"MM/dd/yyyy"),"yyyy-MM-dd HH:mm:ss","GMT-07"));
      }
      else{
      jsonput(jsonObj,"contractEndDate_l",contractEndDate_t);
      }
      if(val[21] <> ""  AND val[21] <> " " AND NOT(isnull(val[21]))){
      jsonput(jsonObj,"installedAtCustomerNumber_l",val[21]);
      }
      else{
      jsonput(jsonObj,"installedAtCustomerNumber_l","");
      }
      if(val[22] <> ""  AND val[22] <> " " AND NOT(isnull(val[22]))){
      jsonput(jsonObj,"siteID_l",val[22]);
      }
      else{
      jsonput(jsonObj,"siteID_l","");
      }
      if(val[23] <> ""  AND val[23] <> " " AND NOT(isnull(val[23]))){
            
      jsonput(jsonObj,"dropProduct_l",lower(val[23]));
      }
      else{
      jsonput(jsonObj,"dropProduct_l","");
      }
      if(val[24] <> ""  AND val[24] <> " " AND NOT(isnull(val[24]))){
      
      jsonput(jsonObj,"dropReason_l",val[24]);
      }
      else{
      jsonput(jsonObj,"dropReason_l","");
      }
      

      if(val[25] <> ""  AND val[25] <> " " AND NOT(isnull(val[25]))){
      
      jsonput(jsonObj,"existingQuantity_l",val[25]);
      }
      else{

      jsonput(jsonObj,"existingQuantity_l","0");
      }
      
      if(val[26] <> ""  AND val[26] <> " " AND NOT(isnull(val[26]))){

      jsonput(jsonObj,"contractedOrPriorDealValue_l",val[26]);
      }
      else{
      jsonput(jsonObj,"contractedOrPriorDealValue_l","");
      }
      if(val[27] <> ""  AND val[27] <> " " AND NOT(isnull(val[27]))){

      jsonput(jsonObj,"contractedOrPriorLicenseSubFee_l",val[27]);
      }
      else{
      jsonput(jsonObj,"contractedOrPriorLicenseSubFee_l","0");
      }
      // end -- quote <> contract quote
      }
      
      if(val[29] <> ""  AND val[29] <> " " AND NOT(isnull(val[29]))){
      
      jsonput(jsonObj,"pLA_l",val[29]);
      }
      //Code Added by Rohit Ranjan for VIPER-574 to add serial number in Import export functionality
      if(val[30] <> ""  AND val[30] <> " " AND NOT(isnull(val[30]))){
      
      jsonput(jsonObj,"serial_l",val[30]);
      }
      else{
      jsonput(jsonObj,"serial_l","");
      }
      //Code ends for VIPER-574
      //Code Added by Shruti Sawla for SYMINT-3138 to add attributes in Import export functionality
      if(val[31] <> ""  AND val[31] <> " " AND NOT(isnull(val[31]))){
      
      jsonput(jsonObj,"rollToLine_l",val[31]);
      }
      else{
      jsonput(jsonObj,"rollToLine_l","");
      }
      if(val[32] <> ""  AND val[32] <> " " AND NOT(isnull(val[32]))){
      
      jsonput(jsonObj,"specialMetric_l",lower(val[32]));
      }
      else{
      jsonput(jsonObj,"specialMetric_l","");
      }
      if(val[33] <> ""  AND val[33] <> " " AND NOT(isnull(val[33]))){
      
      jsonput(jsonObj,"nonStandardLicenseMetric_l",val[33]);
      }
      else{
      jsonput(jsonObj,"nonStandardLicenseMetric_l","");
      }
      if(val[34] <> ""  AND val[34] <> " " AND NOT(isnull(val[34])) AND isnumber(val[34]) ){
      jsonput(jsonObj,"nonStandardQty_l",val[34]);
      }
      else{
      jsonput(jsonObj,"nonStandardQty_l","0");
      }
      //Code ends for SYMINT-3138

      if(val[35] <> ""  AND val[35] <> " " AND NOT(isnull(val[35]))){
      
      jsonput(jsonObj,"_document_number",val[35]);
      }
            ret = jsontostr(jsonObj);
            // append the json structure in linesFromFile array
            append(linesFromFile,ret);

            }
      else{
            continue;
            }
}




// comparing line item with the imported excel data
cnt = 0;
if (isempty(lineArray))
{
// if the quote has no quote lines
for each in LinesFromFile
      {
       // if the file has no existing data, each row will be considered as new line
      if(each<>"" or each<>" " or each <> "null" or not (isnull(each))){
            jsonarrayappend(jsonAry,json(each));
            }
      }
}
else
{
            // if quote has quote lines 
            for each in LinesFromFile
            { 
            
            jsonOBj1 = json(each);
            val1 = jsonget(jsonObj1,"_document_number");
                  if(lineArray[cnt] == val1){
                     // compare the document number from file and from quote and append it in jsonAryUpdate
                        append(jsonAryUpdate,each);
                        cnt= cnt + 1;
                        }
                  else{ 
                  continue;
                        }
            }
}


//value = value + "upddate Transaction------";

//code for calling update transaction for soap v2
dictUpdate= dict("string");

trans = "";

sb = stringbuilder();


// code for updating customer lines for the quote
for each in CustArray{
  sbappend(sb,"<bm:transactionLine bm:bs_id=\"",bs_id,"\" bm:buyer_company_name=\"",_system_company_name,"\" bm:buyer_user_name=\"",_system_user_login,"\" bm:currency_pref=\"USD\" bm:data_type=\"3\" bm:document_name=\"Transaction Line\" bm:document_number=\"",each,"\" bm:document_var_name=\"transactionLine\" bm:process_var_name=\"oraclecpqo\" bm:supplier_company_name=\"",_system_company_name,"\">");


 // trans =  "<bm:transactionLine bm:bs_id=\""+bs_id+"\" bm:buyer_company_name=\""+_system_company_name+"\" bm:buyer_user_name=\""+_system_user_login+"\" bm:currency_pref=\"USD\" bm:data_type=\"3\" bm:document_name=\"Transaction Line\" bm:document_number=\""+each+"\" bm:document_var_name=\"transactionLine\" bm:process_var_name=\"oraclecpqo\" bm:supplier_company_name=\""+_system_company_name+"\">";
  docNum = "<bm:_document_number>"+each+"</bm:_document_number>";
  priceBook= "<bm:_price_book_var_name>_default_price_book</bm:_price_book_var_name>";
  transLine= "</bm:transactionLine>";
  
  sbappend(sb,docNum,priceBook,transLine);
}


/*
// put data in dictionary
put(dictUpdate,"bs_Id",bs_id);
put(dictUpdate,"companyName",_system_company_name);

 // put data in dictionary
 schema = "https://"+_system_company_name+".bigmachines.com/bmfsweb/"+_system_company_name+"/schema/v1_0/commerce/oraclecpqo.xsd";
put(dictUpdate,"session",_system_user_session_id);
put(dictUpdate,"schemaLoc",schema);
fileLocation = "$BASE_PATH$/Integration/update_import.xml";
url = "https://"+_system_company_name+".bigmachines.com/v1_0/receiver";

put(dictUpdate,"userName",_system_user_login);

*/






// code for updating the existing lines that are present in the quote and file
for each in jsonAryUpdate{

line = json(each);

 sbappend(sb,"<bm:transactionLine bm:bs_id=\"",bs_id,"\" bm:buyer_company_name=\"",_system_company_name,"\" bm:buyer_user_name=\"",_system_user_login,"\" bm:currency_pref=\"USD\" bm:data_type=\"3\" bm:document_name=\"Transaction Line\" bm:document_number=\"",jsonget(line,"_document_number"),"\" bm:document_var_name=\"transactionLine\" bm:process_var_name=\"oraclecpqo\" bm:supplier_company_name=\"",_system_company_name,"\">");


   docNum1 = "<bm:_document_number>"+jsonget(line,"_document_number")+"</bm:_document_number>";
   priceBook1= "<bm:_price_book_var_name>_default_price_book</bm:_price_book_var_name>";
   quant= "<bm:_price_quantity>"+jsonget(line,"quantity")+"</bm:_price_quantity>";
   hiddenPrice= "<bm:hiddenPrice_l>"+jsonget(line,"hiddenPrice_l")+"</bm:hiddenPrice_l>";
 
   sbappend(sb,docNum1,priceBook1,quant,hiddenPrice);
   
   if(jsonget(line,"proposedNetUnitPriceRequested_l") <> "" AND jsonget(line,"proposedNetUnitPriceRequested_l") <> " " AND Not(isnull(jsonget(line,"proposedNetUnitPriceRequested_l")))){
    
     propPrice= "<bm:proposedNetUnitPriceRequested_l>"+jsonget(line,"proposedNetUnitPriceRequested_l")+"</bm:proposedNetUnitPriceRequested_l>";
    sbappend(sb,propPrice);
    } 
     if(jsonget(line,"hiddenProposedPrice_l") <> "" AND jsonget(line,"hiddenProposedPrice_l") <> " " AND Not(isnull(jsonget(line,"hiddenProposedPrice_l")))){
    
     hiddenPropPrice= "<bm:hiddenProposedPrice_l>"+jsonget(line,"hiddenProposedPrice_l")+"</bm:hiddenProposedPrice_l>";
    sbappend(sb,hiddenPropPrice);
    } 

   reqDiscnt= "<bm:requestedDiscount_l>"+jsonget(line,"requestedDiscount_l")+"</bm:requestedDiscount_l>";
      
  cpnVal ="<bm:cPN_l>"+jsonget(line,"cPN_l")+"</bm:cPN_l>";
  sbappend(sb,reqDiscnt,cpnVal);

   if(jsonget(line,"effectiveStartDate_l") <> "" AND jsonget(line,"effectiveStartDate_l") <> " " AND Not(isnull(jsonget(line,"effectiveStartDate_l")))){
    effStartDate= "<bm:effectiveStartDate_l>"+jsonget(line,"effectiveStartDate_l")+"</bm:effectiveStartDate_l>";
  sbappend(sb,effStartDate);
  }

   if(jsonget(line,"lineExpirationDate_l") <> "" AND jsonget(line,"lineExpirationDate_l") <> " " AND Not(isnull(jsonget(line,"lineExpirationDate_l")))){
    lineExpDate = "<bm:lineExpirationDate_l>"+jsonget(line,"lineExpirationDate_l")+"</bm:lineExpirationDate_l>";
   sbappend(sb,lineExpDate);
  }
  

// append the below attributes if the quote is not contract quote
if(quoteType_t <> "contractQuote"){
 
   covProd= "<bm:coveredProduct_l>"+jsonget(line,"coveredProduct_l")+"</bm:coveredProduct_l>";
   transType=  "<bm:transactionType_l>"+jsonget(line,"transactionType_l")+"</bm:transactionType_l>";
   hiddenTransType=  "<bm:transactionTypeM_l>"+jsonget(line,"transactionTypeM_l")+"</bm:transactionTypeM_l>";
   licenType=  "<bm:licenseType_l>"+jsonget(line,"licenseType_l")+"</bm:licenseType_l>";
   licenMet=  "<bm:licenseMetric_l>"+jsonget(line,"licenseMetric_l")+"</bm:licenseMetric_l>";
   sbappend(sb,covProd,transType,hiddenTransType,licenType,licenMet); 
   
   envVal=  "<bm:enterEnvironment_l>"+jsonget(line,"enterEnvironment_l")+"</bm:enterEnvironment_l>";  
   langReq=  "<bm:languageRequired_l>"+jsonget(line,"languageRequired_l")+"</bm:languageRequired_l>";
   suppType=  "<bm:supportType_l>"+jsonget(line,"supportType_l")+"</bm:supportType_l>";
     
 sbappend(sb,envVal,langReq,suppType);
   
   if(jsonget(line,"contractStartDate_l") <> "" AND jsonget(line,"contractStartDate_l") <> " " AND Not(isnull(jsonget(line,"contractStartDate_l")))){
   contStartDate=  "<bm:contractStartDate_l>"+jsonget(line,"contractStartDate_l")+"</bm:contractStartDate_l>";
   sbappend(sb,contStartDate);
  }
      //Code Added by Rohit Ranjan for VIPER-574 to add serial number in Import export functionality
    if(jsonget(line,"serial_l") <> "" AND jsonget(line,"serial_l") <> " " AND Not(isnull(jsonget(line,"serial_l")))){
    serialVal = "<bm:serial_l>"+jsonget(line,"serial_l")+"</bm:serial_l>";
   sbappend(sb,serialVal);
      //Code Ends for Viper-574
  }
   if(jsonget(line,"contractEndDate_l") <> "" AND jsonget(line,"contractEndDate_l") <> " " AND Not(isnull(jsonget(line,"contractEndDate_l")))){
   contEndDate= "<bm:contractEndDate_l>"+jsonget(line,"contractEndDate_l")+"</bm:contractEndDate_l>";

   sbappend(sb,contEndDate);
  }
    
   instalAtCust=  "<bm:installedAtCustomerNumber_l>"+jsonget(line,"installedAtCustomerNumber_l")+"</bm:installedAtCustomerNumber_l>"; 
   siteId=  "<bm:siteID_l>"+jsonget(line,"siteID_l")+"</bm:siteID_l>";
  sbappend(sb,instalAtCust,siteId); 

 //if(jsonget(line,"dropProduct_l") =="TRUE" or jsonget(line,"dropProduct_l") =="FALSE" ) {
      //dropProduct=lower(jsonget(line,"dropProduct_l"));
      
   dropProductVal=  "<bm:dropProduct_l>"+jsonget(line,"dropProduct_l")+"</bm:dropProduct_l>";
   sbappend(sb,dropProductVal); 
  //}
   
 
   dropReason=  "<bm:dropReason_l>"+jsonget(line,"dropReason_l")+"</bm:dropReason_l>";
   existQuant =  "<bm:existingQuantity_l>"+jsonget(line,"existingQuantity_l")+"</bm:existingQuantity_l>";
   contPriorDeal=  "<bm:contractedOrPriorDealValue_l>"+jsonget(line,"contractedOrPriorDealValue_l")+"</bm:contractedOrPriorDealValue_l>"; 
   contPrioLicSub= "<bm:contractedOrPriorLicenseSubFee_l>"+jsonget(line,"contractedOrPriorLicenseSubFee_l")+"</bm:contractedOrPriorLicenseSubFee_l>";
   
  sbappend(sb,dropReason,existQuant,contPriorDeal,contPrioLicSub); 


rollToLine=  "<bm:rollToLine_l>"+jsonget(line,"rollToLine_l")+"</bm:rollToLine_l>";
   specialMetric =  "<bm:specialMetric_l>"+jsonget(line,"specialMetric_l")+"</bm:specialMetric_l>";
   nonStandardLicenseMetric=  "<bm:nonStandardLicenseMetric_l>"+jsonget(line,"nonStandardLicenseMetric_l")+"</bm:nonStandardLicenseMetric_l>"; 
   nonStandardQty= "<bm:nonStandardQty_l>"+jsonget(line,"nonStandardQty_l")+"</bm:nonStandardQty_l>";
  renImp= "<bm:renewalsImportPricing>no</bm:renewalsImportPricing>";
  sbappend(sb,rollToLine,specialMetric,nonStandardLicenseMetric,nonStandardQty,renImp); 
   }
    
   transactionLineVal = "</bm:transactionLine>";
     sbappend(sb,transactionLineVal);
}

var = sbtostring(sb);

userName = "";
pwd = "";
url = "";
// fetch the username, password, url, template location from INT_SYSTEM_DETAILS data atble
fileLocation ="";
put(dictUpdate,"bs_Id",bs_id);
put(dictUpdate,"companyName",_system_company_name);
 resultSet = bmql("SELECT Username,Password,File_Location,SoapEndpoint FROM INT_SYSTEM_DETAILS WHERE System='IMPORT_UPDATE'");
 for vals in resultSet{
 userName = get(vals,"Username");
  pwd = get(vals,"Password");
  fileLocation = get(vals,"File_Location");
  url = get(vals,"SoapEndpoint");
 }

put(dictUpdate,"userName",userName);
put(dictUpdate,"pwd",pwd);


put(dictUpdate,"forLoop",var);
// call apply template to read the xml from file manager
retVal = applytemplate(fileLocation,dictUpdate,"Not_Found");
// added by shruti on 14th april 2020 to resolve 20A upgrade issue
retVal = replace(retVal,"&#x3D;","=");
retVal = replace(retVal,"&lt;","<");
retVal = replace(retVal,"&gt;",">");
retVal = replace(retVal,"&quot;","\"");

print retVal;
// if the result is throwing error, set value as "ERROR" for error handling
retVal1 = urldatabypost(url,retVal,"ERROR");

if(retVal1=="ERROR"){

value="ERROR";

}
else
{
value = "Success";
}

}
else{
 // if file attached is blank
value = "Content not available";
}
}

return value;