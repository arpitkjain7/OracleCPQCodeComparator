/*********************************************************************
              Function Name: Renewal Adhoc Create Sync Opty
              Description: Renewals: Create Oppty Program
              Author: M Vamsi Krishna
              JIRA - VIPER-915
              Date: 25th May 2020
              ******************************Change Log*****************************

*********************************************************************/

value = "save";
optyId = "";
usernameFlagUpdate ="";
passwordFlagUpdate = "";
fileLocationFlagUpdate = "";
soapendpointFlagUpdate = "";
//code for calling update transaction for soap v2
transactionResult = bmql("select Transaction_ID,OPTY_ID,Quote_Number,Batch_Date,User,SOURCE,INST_OWNER_CUST_NUM,SHIP_TO_COUNTRY,OPERATING_UNIT,Batch_Number,LICENSEE_ACNT_NUM,ACCOUNT_TYPE from RENEWAL_ADHOC_OPTY where PROCESSED is null");

for transResult in transactionResult
{
bs_id = get(transResult,"Transaction_ID");
optyId = get(transResult,"OPTY_ID");
quoteNumber = get(transResult,"Quote_Number");
Program_ID = get(transResult,"User");
source = get(transResult,"SOURCE");
instOwnerName = get(transResult,"INST_OWNER_CUST_NUM");
shipToCoutry = get(transResult,"SHIP_TO_COUNTRY");
operatingUnit = get(transResult,"OPERATING_UNIT");
batchNumber = get(transResult,"Batch_Number");
EndCust = get(transResult,"LICENSEE_ACNT_NUM");
classification = get(transResult,"ACCOUNT_TYPE");
 if(isnull(optyId) or trim(optyId) == "")
 {
 dictUpdate= dict("string");
 headersdict= dict("string");
 userName = "";
 pwd = "";
 url = "";
 data = "";
 //fetching the username, password, template location and url to hit for webservice call
 fileLocation ="";
 put(dictUpdate,"bs_Id",bs_id);
 put(dictUpdate,"companyName",_company_name);
  resultSet = bmql("SELECT Username,Password,File_Location,SoapEndpoint FROM INT_SYSTEM_DETAILS WHERE System='RENEWAL_ADHOC_OPTY'");
  for vals in resultSet{
  userName = get(vals,"Username");
   pwd = get(vals,"Password");
   fileLocation = get(vals,"File_Location");
   url = get(vals,"SoapEndpoint");
  }
 
 // pass values in dictionary 
 put(dictUpdate,"companyName",_company_name);
 put(dictUpdate,"userName",userName);
 put(dictUpdate,"pwd",pwd);
 put(dictUpdate,"forLoop",data);
 
 //apply template
 
 retVal = applytemplate(fileLocation,dictUpdate,"Not_Found");
 retVal = replace(retVal,"&lt;","<");
 retVal = replace(retVal,"&gt;",">");
 retVal = replace(retVal,"&quot;","\"");
 
 
 // post data in the webservice
 retVal1 = urldatabypost(url,retVal,"",headersdict,true);
 
 
 //UTIL to call SYNC to webservice
 syncres = util.renewalAdHocSyncToOpty(bs_id);
 
 
 }
 elif(NOT isnull(optyId) AND trim(optyId) <> "")
 {
 //UTIL to call SYNC to webservice
 syncres = util.renewalAdHocSyncToOpty(bs_id);
 
 //Web service trigger to update Renewal Job table

   renewalJobUpdatePayload = dict("string");
   renewaljobUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_ADHOC_TABLE_UPDATE'");
   for each in renewaljobUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalJobUpdatePayload,"USERNAME", usernameFlagUpdate);
   put(renewalJobUpdatePayload,"PASSWORD", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:Quote_Number>"+quoteNumber+"</bm:Quote_Number>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Date>"+currentsystemDate+"</bm:Batch_Date>";
   recordUpdateString = recordUpdateString +"<bm:User>"+Program_ID+"</bm:User>";
   recordUpdateString = recordUpdateString +"<bm:Transaction_ID>"+bs_id+"</bm:Transaction_ID>";
   recordUpdateString = recordUpdateString +"<bm:SOURCE>"+source+"</bm:SOURCE>";
   recordUpdateString = recordUpdateString +"<bm:LICENSEE_ACNT_NUM>"+EndCust+"</bm:LICENSEE_ACNT_NUM>";
   recordUpdateString = recordUpdateString +"<bm:INST_OWNER_CUST_NUM>"+instOwnerName+"</bm:INST_OWNER_CUST_NUM>";
   recordUpdateString = recordUpdateString +"<bm:SHIP_TO_COUNTRY>"+shipToCoutry+"</bm:SHIP_TO_COUNTRY>";
   recordUpdateString = recordUpdateString +"<bm:OPERATING_UNIT>"+operatingUnit+"</bm:OPERATING_UNIT>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   recordUpdateString = recordUpdateString +"<bm:OPTY_ID>"+optyId+"</bm:OPTY_ID>";
   recordUpdateString = recordUpdateString +"<bm:ACCOUNT_TYPE>"+classification+"</bm:ACCOUNT_TYPE>";
   recordUpdateString = recordUpdateString +"<bm:PROCESSED>Sync Complete</bm:PROCESSED>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalJobUpdatePayload,"forLoop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalJobUpdate=applytemplate(fileLocationFlagUpdate,renewalJobUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalJobUpdate = replace(quoteRequestRenewalJobUpdate,"&lt;","<");
   quoteRequestRenewalJobUpdate= replace(quoteRequestRenewalJobUpdate,"&gt;",">");
   quoteRequestRenewalJobUpdate = replace(quoteRequestRenewalJobUpdate,"&quot;","\"");
    
   
   headerDict = dict("string");
   //Trigger the web service to update BRCM_Renewal_Job table
   res = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalJobUpdate, "",headerDict,true);
 }
}
return "";