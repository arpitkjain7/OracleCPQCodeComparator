/************************************************
/Action Name:  Renewal Parallel Processing Wrapper
/Description: On click of this action all the entitlements that are expiring will be grouped andrenewed
/Author: M Vamsi Krishna
/Creation Date: 04-May-2020
History:
 Date          Author            Comment 
 04/05/2020    M Vamsi   VIPER-817- Create renewal automation process to generate renewal quotes
 07/13/2020    M Vamsi   VIPER-925 - Automated renewal program enhancements
 07/21/2020    M Vamsi   VIPER-945 Update renewal job such that the job will pick up the group idâ€™s from past which were not processed in the last executions
 07/21/2020    M Vamsi   VIPER-946 - Renewal job has to be updated such if there is any ongoing automated renewal job then a new trigger should not impact the current run
 08/25/2020    M Vamsi   VIPER- 978 - Currency Attribute for Renewal Grouping 
*/


 res = "";
 batchNumber = "";
 nEWGrpId = 0;
 iD = 0;
 cARenewalKeyString = string[];
 groupStringBulder = stringbuilder();
 usernameWrapperAction = "";
 passwordWrapperAction = "";
 fileLocationWrapperAction = "";
 soapendpointWrapperAction = "";
 wrapperActionRequest = "";
 usernameFlagUpdate = "";
 passwordFlagUpdate = "";
 fileLocationFlagUpdate = "";
 soapendpointFlagUpdate = "";
 renewalAssetUpdatePayload = dict("string");
 count= Integer[]{1,2,3,4,5,6,7,8,9,10};
 recordCount = 0;
 securityCount = 0;
 nonsecurityCount = 0;
// VIPER-946 - Begin - Variabe declaration
 statusCompleted = "";
 statusCount = 0;
 // VIPER-946 - End
 
    quoteEffectiveDate = datetostr(strtojavadate(_system_date,"MM/dd/yyyy HH:mm:ss"),"yyyy-MM-dd HH:mm:ss");
    currentsystemDate = datetostr(strtojavadate(_system_date,"MM/dd/yyyy HH:mm:ss"), "yyyy-MM-dd");
 
    daysBeforeRenewal = "";
    renewalResult = bmql("select Days_Before_Renewal from BRCM_Renewal_Before");
    for days in renewalResult
    {
            daysBeforeRenewal = get(days,"Days_Before_Renewal");
    }
    //calculating day within whic all the expiring entitlements should be picked
   renewalDate = (datetostr(adddays(strtojavadate(_system_date,"MM/dd/yyyy HH:mm:ss"),atoi(daysBeforeRenewal)),"yyyy-MM-dd"));
    
    
    //Fetching highest Batch number from renewal batch detail table 
    batchNumberResult = bmql("select Batch_Number,Status from Renewal_Batch_Detail where SNO in $count order by Batch_Number desc");
    // VIPER-946 - Begin - Checking for status of all the Renewal Job present in Renewal Batch Detail Table
    
    for status in batchNumberResult
    {
    statusCompleted = get(status,"Status");
     if(statusCompleted == "Completed")
     {
      statusCount = statusCount +1;
     }
     
    }
   print statusCount;
    // VIPER-946 - If status of all the 10 Renewal Job's is copleted only then trigger the next renewal batch
    if(statusCount == 10)
    {
    for batch in batchNumberResult
    {
            batchNumber = get(batch,"Batch_Number");
            break;
    }

   //updateing renewal batch detail table with highest batch number for renewal program
   renewalBatchDetailUpdatePayload = dict("string");
   renewalBatchDetailUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Batch_Detail_Update'");
   for each in renewalBatchDetailUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalBatchDetailUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalBatchDetailUpdatePayload,"Password", passwordFlagUpdate);
   recordUpdateString = "";
   
   for each in count
   {
   Program_ID = "Renewal Program " + string(each);
   recordUpdateString = recordUpdateString +"<bm:each_record>";
      recordUpdateString = recordUpdateString +"<bm:SNO>"+string(each)+"</bm:SNO>";
      recordUpdateString = recordUpdateString +"<bm:Program_ID>"+Program_ID+"</bm:Program_ID>";
      recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
      // VIPER-946 - Begin - updating renewal batch detail table with grouping in progress status
      if(each == 1)
      {
      recordUpdateString = recordUpdateString + "<bm:Status>"+"Grouping In Progress"+"</bm:Status>";
      }
      // VIPER-946 - END
      recordUpdateString = recordUpdateString +"</bm:each_record>";
   }
   put(renewalBatchDetailUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalBatchDetailUpdate=applytemplate(fileLocationFlagUpdate,renewalBatchDetailUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&lt;","<");
   quoteRequestRenewalBatchDetailUpdate= replace(quoteRequestRenewalBatchDetailUpdate,"&gt;",">");
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update BRCM_Renewal_Job table
   
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalBatchDetailUpdate, "error",headersDict);
   
    batchNumber = string(atoi(batchNumber)+1);


    endGrpID = bmql("select END_GRP_ID from Renewal_Batch_Detail order by END_GRP_ID desc");
    
    for grpID in endGrpID
    {
     iD = atoi(get(grpID,"END_GRP_ID"));
     break;
    }
    
    nEWGrpId = iD +1;
    

    counter = 0;
    //fetching all the data required for grouping where group id is not assigned
    //VIPER - 925 - Added a new flag Renewal Allowed for fetching the data that is eligible for renewal trigger
    //VIPER- 945 - Updated the retrieving query to pick all the records that does not have group id as 1
    //VIPER- 978 - Begin - Currency Attribute for Renewal Grouping 
    groupingResults = bmql("select RENEWAL_ASSETS_EXT.LINE_CURRENCY,RENEWAL_ASSETS.SOURCE,RENEWAL_ASSETS.LICENSEE_ACNT_NUM,RENEWAL_ASSETS.SHIP_TO_COUNTRY,RENEWAL_ASSETS.OPERATING_UNIT,RENEWAL_ASSETS.ENTITLEMENT_EXP_DT,RENEWAL_ASSETS.COVERED_PRDCT_FAMILY from RENEWAL_ASSETS INNER JOIN RENEWAL_ASSETS_EXT ON RENEWAL_ASSETS.SERIAL_NUMBER = RENEWAL_ASSETS_EXT.SERIAL_NUMBER and RENEWAL_ASSETS.CONTRACT_LINE_NUM = RENEWAL_ASSETS_EXT.CONTRACT_LINE_NUM and RENEWAL_ASSETS.CONTRACT_NUMBER = RENEWAL_ASSETS_EXT.CONTRACT_NUMBER where RENEWAL_ASSETS.ENTITLEMENT_EXP_DT >= $currentsystemDate and RENEWAL_ASSETS.ENTITLEMENT_EXP_DT <= $renewalDate and (RENEWAL_ASSETS.TRANSACTION_ID IS NULL OR (RENEWAL_ASSETS.TRANSACTION_ID IS NOT NULL AND RENEWAL_ASSETS.QUOTE_NUMBER IS NULL)) and RENEWAL_ASSETS_EXT.ACTIVE_STATUS = 'Active' and RENEWAL_ASSETS.TOT_QUANTITY > 0 and RENEWAL_ASSETS.GROUP_ID <> 1  and RENEWAL_ASSETS.RENEWAL_ALLOWED = 'Y'");
    print groupingResults;
    //VIPER- 978 - End 
    // VIPER-945  -END
    //VIPER - 925 - end
    
    for resultAfterGrouping in groupingResults
            {
                  counter = counter +1;
          jsonObj= json();
          detailsString = "";
          lang = dict("string");
          fields = dict("string");
                    licenseeAccNumber = get(resultAfterGrouping,"LICENSEE_ACNT_NUM");
                    shipCountry = get(resultAfterGrouping,"SHIP_TO_COUNTRY");
      operatingUnit = get(resultAfterGrouping,"OPERATING_UNIT");
      entilementExpDt = get(resultAfterGrouping,"ENTITLEMENT_EXP_DT");
      source = get(resultAfterGrouping,"SOURCE");
      coveredProductFamily = get(resultAfterGrouping,"COVERED_PRDCT_FAMILY");
      //VIPER- 978 - Begin - Currency Attribute for Renewal Grouping 
      lineCurrency = get(resultAfterGrouping,"LINE_CURRENCY");
      //VIPER- 978 - End
      //creating unique key for grouping
      jsonput(jsonObj,"licenseeAccNumber",licenseeAccNumber);
      jsonput(jsonObj,"shipCountry",shipCountry);
      jsonput(jsonObj,"operatingUnit",operatingUnit);
      jsonput(jsonObj,"entilementExpDt",entilementExpDt);
      jsonput(jsonObj,"source",source);
      //VIPER- 978 - Begin - Currency Attribute for Renewal Grouping 
      jsonput(jsonObj,"lineCurrency",lineCurrency);
      //VIPER- 978 - End     
      detailsString = jsontostr(jsonObj);
      print detailsString;
      stringGroup = sbtostring(groupStringBulder);
      
      if(find(stringGroup,detailsString) < 0)
      {
      
      //creating groups based on GBU Value (Security and Others)
      
      recordCount = recordCount + 1;
      groupStringBulder = sbappend(groupStringBulder,detailsString);
      
  
    //VIPER - 925 - Added a new flag Renewal Allowed for fetching the data that is eligible for renewal trigger
       resultUpdateGroupId = bmql("select RENEWAL_ASSETS.CONTRACT_NUMBER,RENEWAL_ASSETS.CONTRACT_LINE_NUM,RENEWAL_ASSETS.SERIAL_NUMBER,RENEWAL_ASSETS.INSTANCE_IDENTIFIER FROM RENEWAL_ASSETS INNER JOIN RENEWAL_ASSETS_EXT ON RENEWAL_ASSETS.SERIAL_NUMBER = RENEWAL_ASSETS_EXT.SERIAL_NUMBER and RENEWAL_ASSETS.CONTRACT_LINE_NUM = RENEWAL_ASSETS_EXT.CONTRACT_LINE_NUM and RENEWAL_ASSETS.CONTRACT_NUMBER = RENEWAL_ASSETS_EXT.CONTRACT_NUMBER where RENEWAL_ASSETS.LICENSEE_ACNT_NUM = $licenseeAccNumber and RENEWAL_ASSETS.ENTITLEMENT_EXP_DT = $entilementExpDt and RENEWAL_ASSETS.SHIP_TO_COUNTRY = $shipCountry and RENEWAL_ASSETS.OPERATING_UNIT = $operatingUnit and RENEWAL_ASSETS.SOURCE = $source and RENEWAL_ASSETS_EXT.LINE_CURRENCY = $lineCurrency and RENEWAL_ASSETS.GROUP_ID <> 1 and (RENEWAL_ASSETS.TRANSACTION_ID IS NULL OR (RENEWAL_ASSETS.TRANSACTION_ID IS NOT NULL AND RENEWAL_ASSETS.QUOTE_NUMBER IS NULL)) and (RENEWAL_ASSETS.COVERED_PRDCT_FAMILY LIKE '%SECURITY%' or RENEWAL_ASSETS.COVERED_PRDCT_FAMILY LIKE '%Security%') and RENEWAL_ASSETS.RENEWAL_ALLOWED = 'Y'");
       print resultUpdateGroupId;
       //VIPER - 925 - end
       for result in resultUpdateGroupId
       {
       securityCount = securityCount +1;
        contractNumber = get(result,"CONTRACT_NUMBER");
   serialNumber = get(result,"SERIAL_NUMBER");
   instanceIdentifier = get(result,"INSTANCE_IDENTIFIER");
   contractlinenumber = get(result,"CONTRACT_LINE_NUM");
   
          
          
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+contractNumber+"</bm:CONTRACT_NUMBER>";
   recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
   recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
   recordUpdateString = recordUpdateString +"<bm:GROUP_ID>"+string(nEWGrpId)+"</bm:GROUP_ID>";
   
   recordUpdateString = recordUpdateString +"</bm:each_record>";
       }
       if(securityCount > 0)
   {
    nEWGrpId = nEWGrpId +1;
    securityCount = 0;
   }
   
       
    
      //VIPER - 925 - Added a new flag Renewal Allowed for fetching the data that is eligible for renewal trigger
         resultUpdateGroupId = bmql("select RENEWAL_ASSETS.CONTRACT_NUMBER,RENEWAL_ASSETS.CONTRACT_LINE_NUM,RENEWAL_ASSETS.SERIAL_NUMBER,RENEWAL_ASSETS.INSTANCE_IDENTIFIER FROM RENEWAL_ASSETS INNER JOIN RENEWAL_ASSETS_EXT ON RENEWAL_ASSETS.SERIAL_NUMBER = RENEWAL_ASSETS_EXT.SERIAL_NUMBER and RENEWAL_ASSETS.CONTRACT_LINE_NUM = RENEWAL_ASSETS_EXT.CONTRACT_LINE_NUM and RENEWAL_ASSETS.CONTRACT_NUMBER = RENEWAL_ASSETS_EXT.CONTRACT_NUMBER where RENEWAL_ASSETS.LICENSEE_ACNT_NUM = $licenseeAccNumber and RENEWAL_ASSETS.ENTITLEMENT_EXP_DT = $entilementExpDt and RENEWAL_ASSETS.SHIP_TO_COUNTRY = $shipCountry and RENEWAL_ASSETS.OPERATING_UNIT = $operatingUnit and RENEWAL_ASSETS.SOURCE = $source and RENEWAL_ASSETS_EXT.LINE_CURRENCY = $lineCurrency and RENEWAL_ASSETS.GROUP_ID <> 1 and (RENEWAL_ASSETS.TRANSACTION_ID IS NULL OR (RENEWAL_ASSETS.TRANSACTION_ID IS NOT NULL AND RENEWAL_ASSETS.QUOTE_NUMBER IS NULL)) and ((RENEWAL_ASSETS.COVERED_PRDCT_FAMILY NOT LIKE '%SECURITY%' and RENEWAL_ASSETS.COVERED_PRDCT_FAMILY NOT LIKE '%Security%') or RENEWAL_ASSETS.COVERED_PRDCT_FAMILY is null) and RENEWAL_ASSETS.RENEWAL_ALLOWED = 'Y'");
         print resultUpdateGroupId;
         //VIPER - 925 - end
         for result in resultUpdateGroupId
         {
          nonsecurityCount = nonsecurityCount +1;
          contractNumber = get(result,"CONTRACT_NUMBER");
     serialNumber = get(result,"SERIAL_NUMBER");
     instanceIdentifier = get(result,"INSTANCE_IDENTIFIER");
     contractlinenumber = get(result,"CONTRACT_LINE_NUM");
     
            
            
     recordUpdateString = recordUpdateString +"<bm:each_record>";
     recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
     recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+contractNumber+"</bm:CONTRACT_NUMBER>";
     recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
     recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
     recordUpdateString = recordUpdateString +"<bm:GROUP_ID>"+string(nEWGrpId)+"</bm:GROUP_ID>";
     
     recordUpdateString = recordUpdateString +"</bm:each_record>";
         }
         
         if(nonsecurityCount > 0)
   {
    newGrpID = newGrpID +1;
    nonsecurityCount = 0;
   }
         
       
     
      
      if (recordCount == 500)
    {
    
    renewalAssetUpdatePayload = dict("string");
       resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Assets_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
    put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
   defaultErrorMessage="";
   quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
   quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
   quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   
   response="";
   //Trigger the web service to update transaction ID or error message in entitlement table
   
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
   
   recordCount = 0;
   recordUpdateString = "";
   }
   }
      
   }   
   
   if (recordCount < 500)
    {
    
    renewalAssetUpdatePayload = dict("string");
       resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Assets_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
    put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
   defaultErrorMessage="";
   quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
   quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
   quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update transaction ID or error message in entitlement table
   
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
   
   recordCount = 0;
   recordUpdateString = "";
   }
    //Insert details of renewal job triggered into Dashboard
    renewalDashboardUpdatePayload = dict("string");
    renewalDashboardUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'RENEWAL_DASHBOARD_UPDATE'");
   for each in renewalDashboardUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalDashboardUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalDashboardUpdatePayload,"Password", passwordFlagUpdate);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = "";
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:Start_Date>"+currentsystemDate+"</bm:Start_Date>";
   
   recordUpdateString = recordUpdateString +"<bm:Status>"+"In Progress"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Number>"+batchNumber+"</bm:Batch_Number>";
   recordUpdateString = recordUpdateString +"<bm:Triggered_BY>"+"Renewal Program"+"</bm:Triggered_BY>";
   recordUpdateString = recordUpdateString +"<bm:Lines_to_Process>"+string(counter)+"</bm:Lines_to_Process>";
   
   
   recordUpdateString = recordUpdateString +"</bm:each_record>";
   put(renewalDashboardUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalDashboardUpdate=applytemplate(fileLocationFlagUpdate,renewalDashboardUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalDashboardUpdate = replace(quoteRequestRenewalDashboardUpdate,"&lt;","<");
   quoteRequestRenewalDashboardUpdate= replace(quoteRequestRenewalDashboardUpdate,"&gt;",">");
   quoteRequestRenewalDashboardUpdate = replace(quoteRequestRenewalDashboardUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update Renewal Dashboard table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalDashboardUpdate, "error",headersDict);
   
 
   
   //call renewal divide logic
   response = util.renewalDivideLogic();
 
   //call wrapper action for triggering 10 jobs
   
   if(isnumber(response))
   {
   //identifying number of parallel jobs to be triggered for the current renewal run
   iteration = atoi(response);
   
    for each in count
    {
      if(each <= iteration)
      {
      renewalWrapperActionPayload = dict("string");
      renewalWrapperActionCreds = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Wrapper_Action'");
      for cred in renewalWrapperActionCreds
      {
       usernameWrapperAction = get(cred,"Username");
       passwordWrapperAction = get(cred,"Password");
       fileLocationWrapperAction = get(cred,"File_Location");
       soapendpointWrapperAction = get(cred,"SoapEndpoint");
      }
      action="renewApproach_" + string(each);
      
       put(renewalWrapperActionPayload,"USERNAME", usernameWrapperAction);
       put(renewalWrapperActionPayload,"PASSWORD", passwordWrapperAction);
       put(renewalWrapperActionPayload,"Transaction_ID",bs_id);
       //put(renewalWrapperActionPayload,"Session_ID",_system_user_session_id);
       put(renewalWrapperActionPayload,"actionName",action);
      
       defaultErrorMessage="";
      wrapperActionRequest=applytemplate(fileLocationWrapperAction,renewalWrapperActionPayload,defaultErrorMessage);
      wrapperActionRequest = replace(wrapperActionRequest,"&lt;","<");
      wrapperActionRequest= replace(wrapperActionRequest,"&gt;",">");
      wrapperActionRequest = replace(wrapperActionRequest,"&quot;","\"");
      headersDict = dict("string"); 
      
      response="";
      //Trigger the web service to call the wrapper action
      
      response = urldatabypost(soapendpointWrapperAction,wrapperActionRequest, "",headersDict,true,45000);
      
      
      }
    }
   }
   
   }
  
return "";