/************************************************************************************************************
Description: This library function is used to populate all the pricing related attributes of line items in a quote.
Return type: string
History:     Date          Author            Comment 
 01/02/2019    Satyabrata Acharya   Modified the library as per best practices
 02/18/2019    Raghavendra Kumar    Setting some more pricing related attributes
 03/11/2019    M Vamsi      Updating uplift factor as a percentage value
 04/02/2018    Ravi Kumar     Updating MSRP and extProposedNetPriceRequested for Renewals 
 04/12/2019    Keerthi              Setting uplift factor as part of BROCAD2-1099
 05/09/2019    Satyabrata Acharya   Optimized code to align with best practices and used string builder
 05/14/2019 Kavita Lolla     Merge populate approval flag library in this library for code optimization.
 06/24/2019 M Vamsi      Fix for BROCAD2-1617, updating salesmin value for support part based on covered product
 25/06/2019 Kavita Lolla     Included fix for BROCAD2-3389. Line 2089 - 2093 , 985 - 992 , 2781 - 2785. 
               Proposed price calculation for imported lines using hiddenProposedPrice_l.
 02/07/2019 Kavita Lolla     BROCAD2-3504. RenewalFlag should be true only if renew lines are present in Lines.
 03/07/2019 Ravi Kumar     BROCAD2-4748 MSRP Extended new attribute is added to calculte ext MSRP and updated existing MSRP Logic
 15/07/2019 Kavita Lolla     BROCAD2-5278 - Moving the code to update Renewal flag from Save action to Update financial summary action.
 25/07/2019 Satyabrata Acharya  BROCAD2-5502 - Restrict address selection to the same OU in quote header.
 25/07/2019  Ravi kumar     BROCAD2-5532 - Unit MSRP and Ext. MSRP attributes are becoming blank after Import 
 26/07/2019 Kavita Lolla  BROCAD2-1617 - Remove Null checks for Salesmin3.
 29/07/2019     M Vamsi   VIPER - 264 - Pricing Issue in Merge in Renewal Quotes for Subscription lines
 08/05/2019 M Vamsi   VIPER-304 - Ext. Contract/List Price not calculating correctly for auto-generated renewal line item
 08/08/2019 Satyabrata Acharya    VIPER-328 - Double save issue for Customer Pricing
 08/21/2019     Adithya Suresh          VIPER-355 - Proposed Price issue with Zero Price Products
 08/21/2019 Ravi Kumar     VIPER-278 - Added Condition to check renewalCreatedBy is not Integration User to avoid Global Pricing calculations 
      when EAR is zero and incase of Cloned Quote 'CreatedBy' is updated to Actual User instead of Integration
09/04/2019 Ravi Kumar  VIPER-412 - Regression Issue: When we Split Zero price products in renewal quote Standard Global Pricing is getting applied for that line item
10/04/2019 M Vamsi   VIPER-438 - Symantec - Installed at on quote lines should be editable
10/28/2019 Satyabrata Acharya    SYMINT-1657 added logic to blank out customer details values if operating unit is changed
12/04/2019   Keerthivasan A          SYMINT-2514  Integration with SOA when the line items are greater than 5000
01/02/2019 Arjun Singh  SYMINT-3206  Added the code for having discount 100% for Symantec Trail POC Quote   
 ************************************************************************************************************/
result = "";
dateFormat1 = "yyyy-MM-dd HH:mm:ss";
dateFormat2 = "yyyy-MM-dd HH:mm:ss";
salesminprice="";
sb=stringbuilder();
sb1=stringbuilder();
sb2=stringbuilder();
sb3=stringbuilder();
sb4=stringbuilder();
sb5=stringbuilder();
sb6=stringbuilder();
sb7=stringbuilder();
sb8=stringbuilder();
sb9=stringbuilder();
sb9a=stringbuilder();
sb10=stringbuilder();
sb11=stringbuilder();
sb12=stringbuilder();
sb13=stringbuilder();
sb14=stringbuilder();
sb15=stringbuilder();
sb16=stringbuilder();
sb17=stringbuilder();
sb18=stringbuilder();
sb19=stringbuilder();
sb20=stringbuilder();
sb21=stringbuilder();
sb22=stringbuilder();
sb23=stringbuilder();
sb24=stringbuilder();
sb25=stringbuilder();
sb26=stringbuilder();
sb27=stringbuilder();
sb28=stringbuilder();
sb29=stringbuilder();
sb30=stringbuilder();
sb31=stringbuilder();
sb32=stringbuilder();
sb33=stringbuilder();
busDivision = "";
//Variables for Populating Approval Flag
validation="false";
Customer = _transaction_customer_id;
BillTo = billToCustomerId_t;
EndCust = soldToCustomerAccountID_t;
QuoteDealType = lower(dealType_t);
searchString = "education";
parentPartDictionary = Dict("integer");
approveFlag = false;
//BROCAD-5278
//BROCAD2-3504-BEGIN
//renewalFlag = false;
//BROCAD2-3504-END
capacityFlag = true;
result = "";
dDRFlag = false;
//end
quantity=0;
min_qty=1;
dlim ="~";
dend ="|";
NDP = 1.0;
Curr_date = getdate();
ret = "false";
effectivestartDate_array=date[];
lineUnitListPrice_array=float[];
mpn_array=string[];
cpn_array=string[];
coveredpdt="";
Division = "";
StartDate = getdate();
EndDate = getdate();
currdate = getdate();
partPrice = "";
partNoDict = Dict("string");
response="";   
partPriceDict = Dict("string");
basePrice = "";
supp_rate = 0.0;
Contract_no="NA";
errorLines="";
dateFormat = "yyyy-MM-dd HH:mm:ss";
contractdetials=string[2];
supp_price = "";
final_price = "0.0";
listPrice="0.0";
proposedPrice = 0.0;
proposedunitprice=0.0;
totalUSD=0.0;
sumNewAnnualRenewalvalue =0.0;
SubscriptionPricing="0.0";
SubscriptionPricing1="0.0";
newAnnualRenewalValue =0.0;
dateFormatN = "yyyy-MM-dd HH:mm:ss";
AccountNums =_transaction_customer_id+"~"+billToCustomerId_t+"~"+_transaction_customer_id + "~" + endCustomerParentId_avg + "~";
param_per_unit_per_list_price = 0.0; //variable added on 2019/feb/18
param_proposed_net_unit_price_requested = 0.0; //variable added on 2019/feb/18
lineDiscount = 0;//variable added on 2019/feb/18
param_ext_contract_list_price = 0.0;//variable added on 2019/feb/18
param_ext_proposed_net_unit_price_requested = 0.0;//variable added on 2019/feb/18
extLineDiscount = 0.0;//variable added on 2019/feb/18
param_approver_recc_net_unit_price = 0.0;
param_approver_ext_recc_net_unit_price = 0.0;
mpn_arraymulti=string[];
currency = "";
total=0.0;
exch = "1";
salesminprice="";
supp_rate1 = 0.0;
unitMSRP = 0.0;
extMSRP = "";
totalMaintenanceFee = 0.0;
totalLicenseFee = 0.0;
totalExtPrice = 0.0;
currency = _system_current_document_currency_pref;
precision = 0;
//Merge approval flag
Customer = _transaction_customer_id;
BillTo = billToCustomerId_t;
EndCust = soldToCustomerAccountID_t;
approveFlag = false;
//BROCAD-5278
//BROCAD2-3504-BEGIN
//renewalFlag = false;
//BROCAD2-3504-END
capacityFlag = true;
result = "";
final_price1 = "";
dDRFlag = false;
coveredProductDictionary = Dict("string");
coveredProductsFromTableDictionary=Dict("string");
subscription_price = "0.0";
ratio = 1.0;
Days = 1;
propPrice = 0.0;
sub_type = "";
base_price1 = "0.0";
sub_factor = 0.0;
isPresentInPremierCodes = false;
isPresentInEssentialCodes = false;
validateSupportTypesOnLineItemsFlag = false;
fulfillmentSet = "";
totalFee = 0.0;
//variables declared for promotion multicheck
counter1=1;
counter2=1;
Promotion_var="Multi";
mpn_array1=string[];  //stores all the part numbers
Curr_date=getdate();
emptyarray=string[];
promo_array=string[]; //stores the promotion parts
//variables that are used in order to fetch the customer ids for customer pricing
BillToCustomerId=billToCustomerId_t;
EndCustomerId=_transaction_customer_id;
operatingUnit=operatingUnit_t;
BillParentId=billToParentId_avg;
BillGrandParentId=billToGrandParentId_avg;
EndParentId=endCustomerParentId_avg;
EndGrandParentId=endCustomerGrandParentId_avg;
eDIsymorder=eStoreEDI_t;
//validation rule: Validate Support Types on Line Items; adithya
resultSet1 = bmql("select Support_Level,Support_Type_Code from BRCM_Support_Rate where Support_Level Like '%Premier%' or Support_Level Like '%Premium%'");
resultSet2 = bmql("select Support_Level,Support_Type_Code from BRCM_Support_Rate where Support_Level Like '%Essential%'");

premierSupportCodesDictionary = Dict("string");
EssentialSupportCodesDictionary = Dict("string");

//SYMINT-2514 : Initializing Line Item Counter
numberOfLineItems = 0;

for each_record in resultSet1
{
 supportTypeCode = get(each_record,"Support_Type_Code");
 put(premierSupportCodesDictionary, supportTypeCode, supportTypeCode);
}

for each_record in resultSet2
{
 supportTypeCode = get(each_record,"Support_Type_Code");
 put(EssentialSupportCodesDictionary, supportTypeCode, supportTypeCode);
}
//************************ 
if(startswith(dealType_t,"bSN"))
{
 if (totalValueUSD_t > 250000)
 {
  dDRFlag = true;
 }
}
if(dDRFlag == false)
{
 if(restrictedCustomerFlag_t)
 {
  dDRFlag = true;
 }
}
//end merge

if(quoteType_t <> "renewalQuote")
{
 sb1=sbappend(sb1,"1~currency_t~", _system_current_document_currency_pref, "|");
}
//Precision stores how many digits are allowed after decimal point on the basis of the quote currency
res = bmql("SELECT Precision from Func_Curr_Prec_Map WHERE Functional_Currency=$_system_current_document_currency_pref");

for line in res
{
 precision=atoi(get(line,"Precision"));
}

exch=string(currencyExchange_t);
//Jira# 5502 : Restrict address selection to the same OU in quote header
operatingUnit = "";
//this query fetched the OU as per the Ship to Country in order to compare in case OU was changed after customer selection.
res = bmql("SELECT OU_Name FROM OU_ShiptTo_Mapping WHERE ShipToCountry = $shipToCountry_menu_t AND Group = $dealType_t");
for value in res
 {
 operatingUnit = get(value,"OU_Name");
 }
//end of code for Jira# 5502
//Checking null value of cutomer Id and also id part number not equals to cust then only creating Json Object
if(_transaction_customer_id<>"")
{
 EndCustomerId=_transaction_customer_id;
}
//JIRA VIPER-513; This auto sets Symorder flag to Y if Core classification is Commercial
if(core_t=="Commercial")
{
 eDIsymorder="Yes";
 
}
//JIRA VIPER-328; This is an extra line loop in order to fetch Bill To and End Customer Details in the runtime before the header level fields are set
for line in transactionLine{
 
 // SYMINT-2514 Calculating the Number of Line Items present in the quote
 if((line._model_name <> "Customer Search" and line._part_number =="") OR (line._part_number <> "Cust" and line._model_name == "")){
  // Calculating the Number of Line items while looping
  numberOfLineItems = numberOfLineItems + 1;
 }
 // End of SYMINT-2514
 
 if(quoteType_t<>"contractQuote")
 {
 
 append(mpn_array1,line._part_number); //getting all the part numbers and storing in an array for promotion multi check
 }
//restricting customer search parts that get added after customer search and also restricting model lines in case of configured parts
 
 if(line._part_number=="Cust" or line._model_name<>"Customer Search")
 { 
  obj=json();
  //If line item coment not equal to null fetching value of BillTo, End To using jsonget function  
  if(line._line_item_comment<>"") 
  {
   teststring=line._line_item_comment;
   
   obj=json(teststring);  
   billToCust=jsonget(obj,"BILL_TO");
   endTo=jsonget(obj,"END_TO");
   // This function is called only fo non-contract quote so adding the condtion 
   //Jira# 5502 operating unit check is to make sure address parsing is done only when OU was not changed after customer selection
   if(quoteType_t<>"contractQuote" AND operatingUnit_t==operatingUnit){
   //Checking if there is value in Bill to then fetching all the values from ship to like name,email id,etc using jsonget

   if(isnull(billToCust)<>true)
   {
    BillToCustomerId=jsonget(json(billToCust),"Customer Id");
    BillParentId=jsonget(json(billToCust), "Customer Parent");
    BillGrandParentId=jsonget(json(billToCust), "Customer Grandparent");
   }
   }
   //Checking if there is value in End to then fetching all the values from end to using jsonget
   
   if(isnull(endTo)<>true)
   {
    EndCustomerId= jsonget(json(EndTo),"Customer Id");
    EndParentId = jsonget(json(EndTo),"Customer Parent");
    EndGrandParentId = jsonget(json(EndTo),"Customer Grandparent");
   }

  }

 }

}
//start of promotion multi check
if(quoteType_t<>"contractQuote")
{
 results2 = bmql("select Start_Date,End_Date,MPN from BRCM_Promotion_Tb where Promotion_Type=$Promotion_var");
 for res2 in results2 
  {
        if(strtojavadate(get(res2,"Start_Date"),"dd/MM/yyyy") <= Curr_date AND strtojavadate(get(res2,"End_Date"),"dd/MM/yyyy") >= Curr_date )
   {
   counter1=counter1+1;
   if(findinarray(mpn_array1,get(res2,"MPN"))<>-1){
   append(promo_array,get(res2,"MPN"));
   counter2=counter2+1;
   }
   }
     }

if(counter1==counter2)
 {
 mpn_arraymulti= promo_array;
 }
}

//end of promotion multicheck code


//If loop takes care of all Standard Quotes
if(quoteType_t <> "renewalQuote" and quoteType_t<>"contractQuote")
{
 for line in transactionLine
 {   
  licensetype=line.licenseType_l;
  Contract_no=line.contractNumber_l;
  //Validate Effective Start And Expiration Dates
  //line._part_number <> "Cust" restricts customer search parts that get added after customer search
  if(line._part_number <> "" and line.endOfSupportServiceDate_l <> "" and line.effectiveStartDate_l <> "" and line.lineExpirationDate_l <> "" and line._part_number <> "Cust")
  {
   endOfSupportServiceDateObject = strtodate(line.endOfSupportServiceDate_l,dateFormat1);
   effectiveStartDateObject = strtodate(line.effectiveStartDate_l,dateFormat1);
   lineExpirationDateObject = strtodate(line.lineExpirationDate_l,dateFormat1);
   if(comparedates(endOfSupportServiceDateObject,effectiveStartDateObject) == -1 or comparedates(endOfSupportServiceDateObject,lineExpirationDateObject) == -1)
   {
    line_no=line._sequence_number;
    errorbuilder=stringbuilder(errorLines,string(line_no),",");
    errorLines = sbtostring(errorbuilder);
   }
  }
   
  
  //validation rule: Validate Support Types on Line Items; adithya
  if(line._part_number <> "" and line.supportType_l <> "")
  {
   if(containsKey(premierSupportCodesDictionary,line.supportType_l))
   {
    isPresentInPremierCodes = true;
   }
   elif(containsKey(EssentialSupportCodesDictionary,line.supportType_l))
   {
    isPresentInEssentialCodes = true;
   }

   if(isPresentInEssentialCodes and isPresentInPremierCodes)
   {
    validateSupportTypesOnLineItemsFlag = true;
   }
  }

  //validation rule : Validate Covered Products On Lines; adithya
  if(line.coveredProduct_l <> "" and line._part_number <> "")
  {
   put(coveredProductDictionary, line.coveredProduct_l , line.coveredProduct_l);
  }
  //constraint rule :Constrain Education Line Items; kacharya
  //looking for Education in QuoteDealType
  if(find(QuoteDealType, searchString) >= 0)
  {
   if(line._part_number <> "")
   {
    if(not containsKey(parentPartDictionary,line._part_number))
    {
     put(parentPartDictionary, line._part_number, line._price_quantity);
    }
   }
  }
  transactionTypeM=line.transactionTypeM_l;
  lineold=getoldvalue("_line_item_comment",atoi(line._document_number));
  contractenddateold=getoldvalue("contractEndDate_l",atoi(line._document_number));
  contractstartdateold=getoldvalue("contractStartDate_l",atoi(line._document_number));
  coveredold=getoldvalue("coveredProduct_l",atoi(line._document_number));
  licenseold=getoldvalue("licenseType_l",atoi(line._document_number));
  //checks if line item comment was changed for the line by comparing _line_item_comment field with custom field.
  //if(line.lineItemComment_avg<>line._line_item_comment){
   //line._part_number <> "Cust" restricts customer search parts that get added after customer search
   if(line._line_item_comment<>"" and line._part_number<>"Cust")
   {
    sb1=stringbuilder(sb1,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchConfigAttributesFromCommerce_brcm(line._document_number, line._part_number, line._line_item_comment, line.effectiveStartDate_l, line.lineExpirationDate_l, line._model_name));
   }
  //}

  if(billToCustomerId_t=="" or soldToCustomerAccountID_t=="" or shipToPartyID_t=="" or _transaction_customer_id=="" or line.lineItemComment_avg<>line._line_item_comment or operatingUnit<>operatingUnit_t){
   if(line.lineItemComment_avg<>line._line_item_comment or operatingUnit<>operatingUnit_t)
   {
   if(line._part_number=="Cust" AND line._model_name=="")
   {
    sb2=stringbuilder(sb2,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchCustomerSearchDetails_brcm(line._model_name, line._part_number, line._line_item_comment));
   }
   }
  }
  //Condition for Defer Pricing Logic (Currently not in use) 
  if(avoidPricingCalculations_t == false){
  //Standard Quote Pricing Logic to update Contract/List Unit Price
  final_price=string(line.perUnitPerListPrice_l);
  //restricting customer search parts that get added after customer search and also restricting model lines in case of configured parts
  if(line._part_number<>"Cust" AND line._model_name=="")
  {
   coveredProduct_l=line.coveredProduct_l;
   coveredpdt = line.coveredProduct_l;
   supportType_l=line.supportType_l;
   part=line._part_number;
   //VIPER - 438 - Fetching Business division from BRCM Part Master table and updating business divsion attribute at header level - Start
   busDiv=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$part");
   for res2 in busDiv
   {
   busDivision=get(res2,"Business_Div");
   }
       
   if(busDivision == "SED")
   {
   sb33=stringbuilder(sb33,"1~businessDivision_t~","Symantec","|");   
   }
   else{
   sb33=stringbuilder(sb33,"1~businessDivision_t~","","|");
   }
   //Viper - 438 - END    
   accountbuilder=stringbuilder(EndCustomerId,"~",BillToCustomerId,"~",EndCustomerId, "~" , EndParentId , "~" , EndGrandParentId , "~" , line.cPN_l , "~" ,line.effectiveStartDate_l , "~" , line.effectiveStartDate_l , "~" , routeToMarket_t , "~" , BillParentId ,"~" , BillGrandParentId , "~" , quoteType_t);
   //print accountbuilder;
   AccountNums=sbtostring(accountbuilder);
   //hidden price stores contract list price for imported lines. If 0, lines should go through the normal pricing logic else hidden price value to be taken into consideration.
   if(line.hiddenPrice_l==0.0)
   {
    //this is the loop for Standalone Line items _price_list_price_each contains values 
    if(line._price_list_price_each==0.0)
    {
     //getoldvalue compares all the old values of the attribute with the current value in order to restrict multiple traversal of the code without any necessity
     if(getoldvalue(routeToMarket_t) <> routeToMarket_t or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.00") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0") OR (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.0000") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="") or (contractenddateold)<>line.contractEndDate_l OR (contractstartdateold)<>line.contractStartDate_l OR (coveredold)<>line.coveredProduct_l OR (licenseold)<>line.licenseType_l)
     {
      if(line.coveredProduct_l=="")
      {
       if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       //+1 means the difference in days includes end date
       Days=getdiffindays(StartDate,EndDate)+1;
       partnumber=line._part_number;
       subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for subres in subset1{
        base_price1 =get(subres,"Base_Price");
        sub_type =get(subres,"Subscription_Type");
       }
       subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
       for subsfactresult in subs_factor_result{
        sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
       }
       Contract_no="NA";
       contractdetials = string[2];
       put(partNoDict,"Item1",partnumber);
       //configpricing fetches the base price from global price list or customer price list
       partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
       if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l=="")
       {
        if(find(get(partPriceDict,"Item1"),"~") <> -1)
        {
         contractdetials = split(get(partPriceDict,"Item1"), "~");
         Contract_no = contractdetials[1];
        }
        else
        {
         contractdetials[0]=get(partPriceDict,"Item1");
         Contract_no="NA";
        }
        partPrice=string(atof(contractdetials[0])*atof(exch));
        SubscriptionPricing1=partPrice;
          /*BROCAD2-4748*/
          unitMSRP = (atof(base_price1)*atof(exch));
          //rounding is done before quantity multiplication as the UI value is rounded off
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
    
          /*BROCAD2-4748*/
        //final_price variable stores the part price so that it can be used for calculations in other different calculations
        final_price=String(round(atof(partPrice),precision));
        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
        //added new variable for Jira#1617
        listPrice = string(round(atof(final_price),precision));
        sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
        sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");  
       }
       if(line.licenseType_l=="Subscription")
       {
        partNo=get(partNoDict, "Item1");
        if(find(get(partPriceDict,"Item1"),"~")<>-1)
        {
         contractdetials= split(get(partPriceDict,"Item1"), "~");
         Contract_no=contractdetials[1];
        }
        else
        {
         contractdetials[0]=get(partPriceDict,"Item1");
         Contract_no="NA";
        }

        calcPrice=string(atof(contractdetials[0])*atof(exch));
        SubscriptionPricing1=calcPrice;
        if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
         //+1 means endDate is included in the difference of days
         days=getdiffindays(EndDate, StartDate) + 1 ;
         partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
         //part price variable contains the subscription price along with term days calculation. Now we are removing term days calculation so that it can be stored in Contract List/Unit Price.
         //partPrice1=round(atof(partPrice)*(365.0/days),precision);
         //partPrice=string(partPrice1*(days/365.0));
   
         final_price=String(atof(partPrice));
          /*BROCAD2-4748*/
          unitMSRP=(round(atof(base_price1)*sub_factor*atof(exch),precision))*(days/365.0);
          //round off is done before multiplying quantity since the UI value is a rounded off value and multiplication should be as per UI value
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         SubscriptionPricing=String(atof(SubscriptionPricing1));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(partPrice)*365/days,precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(partPrice)*365/days,precision));
         sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
         sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
         
        } 
       }
      }
      /*******************************************************************************
       * Calculation of Contract/List Unit Price for Standalone Support/Maintenance
       * SKUs
       ******************************************************************************/
      else
      {
       if(line.contractStartDate_l<>"" ){
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l<>"" ){
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
       coveredpdt=line.coveredProduct_l;
       basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredProduct_l");
       supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType_l");
       subset=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredProduct_l ORDER BY Start_Date ASC");
       for res2 in basepriceset{
        Division=get(res2,"Business_Div");
       }
       for res1 in subset{
        if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
        {              basePrice=get(res1,"Base_Price");
        NDP=atof(get(res1,"Base_Support_Value"));


        }
       }
       if(Division=="CAD" or Division=="SED")
       {
        Contract_no="NA";
        contractdetials=string[2];
        put(partNoDict,"Item1",coveredProduct_l);
        partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
        if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         partPrice=string(atof(contractdetials[0])*atof(exch));
         
         //added new variable for Jira#1617
         salesminprice=partPrice;
         SubscriptionPricing1=partPrice;
         
         /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         
         

        }
        if(line.licenseType_l=="Subscription"){

         partNo=get(partNoDict, "Item1");


         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         calcPrice=string(atof(contractdetials[0])*atof(exch));
         SubscriptionPricing1=calcPrice;
         //added new variable for Jira#
         salesminprice=calcPrice;
         if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
          partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
          
          //partPrice1=round(atof(partPrice)*(365.0/days),precision);
          //partPrice=string(partPrice1*(days/365.0));
         }
          /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
        }
        For results in supportset{
         
         supp_rate=atof(get(results,"Support_Rate"));
         if(partPrice<>""){
          supp_price=String((round(atof(salesminprice)*supp_rate,precision))*NDP*Days/365);
          /*BROCAD2-4748*/
          
          unitMSRP = ((atof(basePrice)*supp_rate)*NDP*Days/365)*atof(exch);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

         }

         final_price=String(atof(supp_price));
         
         
         
         SubscriptionPricing=String(atof(SubscriptionPricing1));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(supp_price)*365/Days,precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(supp_price)*365/Days,precision));
         sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
         sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
         //output4=sbtostring(sb4);
        }
        
        
       }
       elif(Division=="BSN"){
        For results in supportset{
         supp_rate=atof(get(results,"Support_Rate"));
         supp_price=String((atof(basePrice)*supp_rate)*NDP);

         final_price=String(atof(supp_price)*atof(exch));
         SubscriptionPricing=String(atof(basePrice)*atof(exch));
         //added new variable for Jira#1617
         salesminprice=basePrice;
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(SubscriptionPricing),precision)),"|");
         //added new variable for Jira#1617
         listPrice = string(round(atof(SubscriptionPricing),precision));
        //output4=sbtostring(sb4);
        }
       }
       

      }
     }
    }
    /** ************************************************************************************ */
    else
    {
     //Loop for Configured Lines
     if(line._model_name=="" AND line._parent_doc_number<>""){

      final_price=String(line._price_list_price_each);
      sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
      //added new variable for Jira#1617
      listPrice = string(round(atof(final_price),precision));
      param_per_unit_per_list_price = line._price_list_price_each;
      coveredpdt=line.coveredProduct_l;
      licensetype=line.licenseType_l;
      supportType=line.supportType_l;
      obj=json();
      if(line._line_item_comment<>"")
      {
       teststring=line._line_item_comment;
       obj=json(teststring);
       child=jsonget(obj,"child");
       childObj=json(child);
       PartNumber=jsonget(obj,"PartNumber");
       licensetype=jsonget(childObj,"selectLicenseType");
       transactionTypeM=jsonget(childObj,"transactionType");
       supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
       supportType=jsonget(childObj,"supportType");
       if (line._part_number == supportPartsPicklist)
       {
        coveredpdt=PartNumber;
       }

       if(jsonget(childObj,"startDate")<>"" ){
        StartDate=strtojavadate(jsonget(childObj,"startDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }

       if(jsonget(childObj,"endDate")<>"" ){
        EndDate=strtojavadate(jsonget(childObj,"endDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }
      }

      //For running the pricing logic for items added using configurator
      //if((getoldvalue("extContractListPrice_l",atoi(line._document_number))=="") or (getoldvalue("extContractListPrice_l",atoi(line._document_number))=="0") or (getoldvalue("contractEndDate_l",atoi(line._document_number))<>line.contractEndDate_l) OR (getoldvalue("contractStartDate_l",atoi(line._document_number))<>line.contractStartDate_l) OR (getoldvalue("_line_item_comment",atoi(line._document_number))<>line._line_item_comment))
      //{

      if(coveredpdt=="")
      {
       Days=getdiffindays(StartDate,EndDate)+1;
       partnumber=line._part_number;
       subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for res2 in subset1{
        base_price1 =get(res2,"Base_Price");
        sub_type =get(res2,"Subscription_Type");
        subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
        for subsfactresult in subs_factor_result{
        sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
        }
        if(get(res2 ,"Start_Date")<>"" and get(res2 ,"End_Date")<>"")
        {
         if(strtojavadate(get(res2 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res2 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
         {

          Contract_no="NA";
          contractdetials=string[2];
          put(partNoDict,"Item1",partnumber);

          partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
          if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

           if(find(get(partPriceDict,"Item1"),"~")<>-1)
           {
            contractdetials= split(get(partPriceDict,"Item1"), "~");
            Contract_no=contractdetials[1];
           }
           else
           {
            contractdetials[0]=get(partPriceDict,"Item1");
            Contract_no="NA";
           }
           partPrice=string(atof(contractdetials[0])*atof(exch));
           

           final_price=String(round(atof(partPrice),precision));
           /*BROCAD2-4748*/
           unitMSRP = (atof(base_price1)*atof(exch));
           extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
           /*BROCAD2-4748*/
           sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
           //added new variable for Jira#1617
           listPrice = string(round(atof(final_price),precision));
           sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
           sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
           
           //output4=sbtostring(sb4);

          }
          if(licensetype=="Subscription"){

           partNo=get(partNoDict, "Item1");
           if(find(get(partPriceDict,"Item1"),"~")<>-1)
           {
            contractdetials= split(get(partPriceDict,"Item1"), "~");
            Contract_no=contractdetials[1];
           }
           else
           {
            contractdetials[0]=get(partPriceDict,"Item1");
            Contract_no="NA";
           }

           calcPrice=string(atof(contractdetials[0])*atof(exch));
           
           
            if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
             days=getdiffindays(EndDate, StartDate) + 1 ;
            partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
            
            //partPrice1=round(atof(partPrice)*(365.0/days),precision);
            //partPrice=string(partPrice1*(days/365.0));
            
            final_price=String(atof(partPrice));
            SubscriptionPricing=String(atof(calcPrice));
            /*BROCAD2-4748*/
            //unitMSRP = (atof(partPrice));
            unitMSRP=(round(atof(base_price1)*sub_factor*atof(exch),precision))*(days/365.0);
            extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
            /*BROCAD2-4748*/
            sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(partPrice)*365/days,precision)),"|");
            //added new variable for Jira#1617
            listPrice = String(round(atof(partPrice)*365/days,precision));
            sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
            sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
            //output4=sbtostring(sb4);
            
           } 
          }
         }
        }
       }
      }
      /*******************************************************************************
       * Calculation of Contract/List Unit Price for Support/Maintenance
       * SKUs
       ******************************************************************************/
      else
      {
       //PRINT "i am here";
       Days=getdiffindays(StartDate,EndDate)+1;
       basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredpdt");
       supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType");
       subset=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredpdt ORDER BY Start_Date ASC");
       for res2 in basepriceset{
        Division=get(res2,"Business_Div");
       }
       for res1 in subset{
        if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
        {              basePrice=get(res1,"Base_Price");
        NDP=atof(get(res1,"Base_Support_Value"));


        }
       }
       if(Division=="CAD" or Division=="SED")
       {
        Contract_no="NA";
        contractdetials=string[2];
        put(partNoDict,"Item1",coveredpdt);
        partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         partPrice=string(atof(contractdetials[0])*atof(exch));
         //added new variable for Jira#1617
         salesminprice=partPrice;
          /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

        }
        if(licensetype=="Subscription"){

         partNo=get(partNoDict, "Item1");


         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         calcPrice=string(atof(contractdetials[0])*atof(exch));
         SubscriptionPricing1=calcPrice;
         //added new variable for Jira#1617
         salesminprice=calcPrice;
         if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
          partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
          
          //partPrice1=round(atof(partPrice)*(365.0/days),precision);
          //partPrice=string(partPrice1*(days/365.0));
          
         }
          /*BROCAD2-4748*/
          unitMSRP = round(atof(partPrice)*days,precision);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          
          /*BROCAD2-4748*/
         
        }
        For results in supportset{

         supp_rate=atof(get(results,"Support_Rate"));
         if(partPrice<>""){
          supp_price=String((round(atof(salesminprice)*supp_rate,precision))*NDP*Days/365);
          /*BROCAD2-4748*/
          unitMSRP = ((atof(basePrice)*supp_rate)*NDP*Days/365)*atof(exch);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

         }

         final_price=String(atof(supp_price));
         
         SubscriptionPricing=String(atof(SubscriptionPricing1));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(salesminprice)*supp_rate,precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(salesminprice)*supp_rate,precision));
         
         sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
         sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
         //output4=sbtostring(sb4);
         
        }
       }
       elif(Division=="BSN"){
        For results in supportset{
         supp_rate=atof(get(results,"Support_Rate"));
         supp_price=String((atof(basePrice)*supp_rate)*NDP);

         final_price=String(atof(supp_price)*atof(exch));
         
         //added new variable for Jira#1617
         salesminprice=basePrice;
         SubscriptionPricing=String(atof(basePrice)*atof(exch));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(SubscriptionPricing),precision)),"|");
         //added new variable for Jira#1617
         listPrice = string(round(atof(SubscriptionPricing),precision));
         //output4=sbtostring(sb4);
        }
       }

      }

      //End of code
      
     }
    }
   }
   else
   { 
   Contract_no=line.contractNumber_l;
    licensetype=line.licenseType_l;
    if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
    //Begin: Added Unit MSRP calculations for Import/Export as part of BROCAD2-5532
    if(coveredpdt=="")
      {
       Days=getdiffindays(StartDate,EndDate)+1;
       partnumber=line._part_number;
       subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for res2 in subset1{
        base_price1 =get(res2,"Base_Price");
        sub_type =get(res2,"Subscription_Type");
        subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
        for subsfactresult in subs_factor_result{
        sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
        }
          if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){
           /*BROCAD2-4748*/
           unitMSRP = (atof(base_price1)*atof(exch));
           extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
           /*BROCAD2-4748*/
           sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
           sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
          }
          if(licensetype=="Subscription"){
             days=getdiffindays(EndDate, StartDate) + 1 ;
            /*BROCAD2-4748*/
            unitMSRP=(round(atof(base_price1)*sub_factor*atof(exch),precision))*(days/365.0);
            extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
            /*BROCAD2-4748*/
            sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
            sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
          
          }
       }
      }
    
   //End: Added Unit MSRP calculations for Import/Export as part of BROCAD2-5532 
   //Import Export Pricing for Standard Quotes
    if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
    if(licenseType=="Subscription" or coveredpdt<>""){
     final_price=String(line.hiddenPrice_l*(Days/365.0));
    }
    else{
     final_price=String(line.hiddenPrice_l);
    }
    sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(line.hiddenPrice_l,precision)),"|");
    //added new variable for Jira#1617
    listPrice = String(round(line.hiddenPrice_l,precision));
    //output4=sbtostring(sb4);
   }
   //end of contract/List price pricing
   //salesmin and PromotionalSetup
   //changes added as part of BROCAD2 - 1617
   mpn_var=line._part_number;
   //final_price=string(round(atof(final_price),precision));
   final_price1 = final_price;
   
    
   if(trim(coveredpdt) <> "")
   {
   //Begin: Added Unit MSRP calculations for Import/Export as part of BROCAD2-5532
   Days=getdiffindays(StartDate,EndDate)+1;
     supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType_l");
     subset=bmql("SELECT MPN,Base_Price, Base_Support_Value,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredpdt ORDER BY Start_Date ASC");
     for res1 in subset{
     
     basePrice=get(res1,"Base_Price");
     NDP=atof(get(res1,"Base_Support_Value"));
     }
     licensetype=line.licenseType_l; 
     for results in supportset{
      supp_rate=atof(get(results,"Support_Rate"));
      if(String(line.hiddenPrice_l)<>""){
       supp_price=String((round(line.hiddenPrice_l*supp_rate,precision))*NDP*Days/365);
        if(basePrice<>""){
       supp_rate1=((atof(basePrice)*supp_rate)*NDP*Days/365);
       unitMSRP=((supp_rate1)*atof(exch));
       extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
       }
       
     }

     }
     sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
     sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|"); 
    //End: Added Unit MSRP calculations for Import/Export as part of BROCAD2-5532
    mpn_var = coveredpdt;
    if(trim(listPrice) <> "")
    {
    final_price1=listPrice;
    }
   }
   
   salesMinl_var=0.0;
   salesMin2_var=0.0;
   salesMin3_var=0.0;
   promotion_type="Single";
   min_qty=line._price_quantity;
   promotion_req="N";
   
   //if(final_price<>""){
   //final_price1=string(round(atof(final_price),precision)); 
   //}
   //else{
    //final_price = string(0.0);
   //}
   
   // Sales min Calculation; Here calculation for Sales Min values is done for normal/promotion scenarios
   res = bmql("select Sales_Min3,Sales_Min2,Sales_Min1,Start_Date,End_Date from BRCM_Part_Master_Prc where MPN = $mpn_var ORDER BY Start_Date ASC");
   for rec in res 
   {
    salesMinl_var = getfloat(rec,"Sales_Min1");
    salesMin2_var = getfloat(rec,"Sales_Min2");
    salesMin3_var = getfloat(rec,"Sales_Min3");
    if(get(rec,"Start_Date")<>"" AND get(rec,"End_Date")<>"")
    {
     salesMinl_var = (100-salesMinl_var)* atof(final_price1)/ 100;
     salesMin2_var = (100-salesMin2_var)* atof(final_price1) / 100;
     
     //BROCAD2-1617 - begin 
     //Remove Null checks for Salesmin3.
    /* if(isnull(salesMin3_var) or salesMin3_var == 0)
     {
      salesMin3_var = 0;
     }
     else
     { */
      salesMin3_var = (100-salesMin3_var)* atof(final_price1) / 100;
    // }
    //BROCAD2-1617 - end
    }

   }
   results4=bmql("select Promotion_Enabled from BRCM_Part_Master_Ext where MPN=$mpn_var");
   for res3 in results4
   {
    promotion_req=get(res3,"Promotion_Enabled");
   }

   if(promotion_req=="Y")
   {
    results2 = bmql("select Sales_Min1,Sales_Min2,Sales_Min3,Start_Date,End_Date,Promotion_Type,Minimum_Qty from BRCM_Promotion_Tb where MPN=$mpn_var");
    for result3 in results2 
    {
     if(strtojavadate(get(result3,"Start_Date"),"dd/MM/yyyy") <= Curr_date AND strtojavadate(get(result3,"End_Date"),"dd/MM/yyyy") >= Curr_date )
     {
      if(findinarray(mpn_arraymulti,mpn_var)<>-1 AND get(result3,"Promotion_Type")=="Multi")
      {

       if(atoi(get(result3,"Minimum_Qty")) > min_qty)
       {
        min_qty=atoi(get(result3,"Minimum_Qty"));
       }
       salesMinl_var=atof(get(result3,"Sales_Min1"));
       salesMinl_var= (100 - salesMinl_var) * atof(final_price1) / 100;
       salesMin2_var=atof(get(result3,"Sales_Min2"));
       salesMin2_var= (100 - salesMin2_var) * atof(final_price1)/ 100;
       SalesMin3_var=atof(get(result3,"Sales_Min3"));
       //BROCAD2-1617 - begin
       //Remove Null checks for Salesmin3.
     //  if(SalesMin3_var<>0.0){
        SalesMin3_var= (100 - SalesMin3_var) *atof(final_price1)/ 100;
     /*  }else{ 
        SalesMin3_var=0.0;
       }*/
     //BROCAD2-1617 - end
      }

      else
      {

       if(get(result3,"Promotion_Type")=="Single" AND findinarray(mpn_arraymulti,mpn_var)==-1)
       {
        if(atoi(get(result3,"Minimum_Qty")) > min_qty)
        {
         min_qty=atoi(get(result3,"Minimum_Qty"));
        }
        salesMinl_var=atof(get(result3,"Sales_Min1"));
        salesMinl_var= (100 - salesMinl_var) * atof(final_price1)/ 100;
        salesMin2_var=atof(get(result3,"Sales_Min2"));
        salesMin2_var= (100 - salesMin2_var) * atof(final_price1)/ 100;
        SalesMin3_var=atof(get(result3,"Sales_Min3"));
        //BROCAD2-1617 - begin
        //Remove Null checks for Salesmin3.
       // if(SalesMin3_var<>0.0){
         SalesMin3_var= (100 - SalesMin3_var) *atof(final_price1)/ 100;
       /* }else{
         SalesMin3_var=0.0;
        }*/
        //BROCAD2-1617 - end
       }
      }


     }

    }

   }
   
   elif(line.coveredProduct_l<>"")
   {
    sup_var=line.coveredProduct_l;
    results2 = bmql("select Sales_Min1,Sales_Min2,Sales_Min3,Start_Date,End_Date,Promotion_Type,Minimum_Qty from BRCM_Promotion_Tb where MPN=$sup_var");
    for result3 in results2 
    {


     if(strtojavadate(get(result3,"Start_Date"),"dd/MM/yyyy") <= Curr_date AND strtojavadate(get(result3,"End_Date"),"dd/MM/yyyy") >= Curr_date )
     {

      if(findinarray(mpn_arraymulti,sup_var)<>-1 AND get(result3,"Promotion_Type")=="Multi")
      {

       if(atoi(get(result3,"Minimum_Qty")) > min_qty)
       {
        min_qty=atoi(get(result3,"Minimum_Qty"));

       }

      }

      else
      {

       if(get(result3,"Promotion_Type")=="Single" AND findinarray(mpn_arraymulti,sup_var)==-1)
       {
        if(atoi(get(result3,"Minimum_Qty")) > min_qty)
        {
         min_qty=atoi(get(result3,"Minimum_Qty"));
        }

       }
      }


     }

    }
   }
   //End of SalesMin and Setup
   //Calling Eligible Discounts Calculator to calculate Environment and partner discounts
   quantity = min_qty;
   documentnum=line._document_number;
   partNumber  = line._part_number;
   teststring=line._line_item_comment;
   env_selected=line.enterEnvironment_l;
   coveredpdt=line.coveredProduct_l;
   transactionTypeM=line.transactionTypeM_l;
   //Changes made as per VIPER - 304 - added condition to compare support term days attribute value with its previous value. 
   //Changes made as per VIPER - 304 - If there is any change in Term days value then this additional codition will allow control to go inside the condition and calculate Ext. Contract/List Price accordingly.
   if((getoldvalue("_price_quantity",atoi(line._document_number))<>string(line._price_quantity)) OR (getoldvalue("totalNewSupportTermDays_l",atoi(line._document_number))<>String(Days)) OR (getoldvalue("enterEnvironment_l",atoi(line._document_number))<>line.enterEnvironment_l) OR (getoldvalue("_line_item_comment",atoi(line._document_number))<>line._line_item_comment) or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))<>final_price) OR (line.requestedQuantity_l<>min_qty)  OR (getoldvalue("extContractListPrice_l",atoi(line._document_number))=="0")){



    if(coveredpdt <> ""){
     partNumber = line.coveredProduct_l;
    }
    if(teststring<>""){
     obj=json(teststring);
     child=jsonget(obj,"child");
     childObj=json(child);
     PartNum=jsonget(obj,"PartNumber");
     licensetype=jsonget(childObj,"selectLicenseType");
     supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
     transactionTypeM=jsonget(childObj,"Transaction Type");
     if (line._part_number == supportPartsPicklist)
     {
      coveredpdt=PartNumber;
     }
     env_selected=jsonget(childObj,"enterEnvironment");
     if (line._part_number == supportPartsPicklist)
     {
      partNumber=PartNum;
     }   
    }

    //To calculate Ext Contract/List Price
    ExtListPrice = commerce.eligibleDiscounts_brcm(final_price,partNumber,env_selected,quantity);
    if(line._part_number<>"")
    {
     sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
     sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");
     totalExtPrice = totalExtPrice + ExtListPrice;
    }
   }
   else{
    if(line._part_number<>"")
    { ExtListPrice = line.extContractListPrice_l;
    sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
    
    sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");
    
    totalExtPrice = totalExtPrice + ExtListPrice;
    }
   }
   //end of code for eligible discount
   
   //Calling Requested Discounts Calculator
   requestedDiscount=line.requestedDiscount_l;
   //Added the code for SYMINT-3206 for having discount 100% for Symantec Trail POC Quote by Arjun on 19-Dec-2019
   if(symantecTrialPOC_t==true AND dealType_t=="cADStandard")
   {
    requestedDiscount=100.0;
   }
   
   //To Calculate Requested Discount and Ext Proposed Net Unit Price
   if(final_price<>"0.0" AND round(requestedDiscount,0)==round(line.customDiscountValue_l,0) AND line.proposedNetUnitPriceRequested_l<>0.0 AND  round(line.proposedNetUnitPriceRequested_l,4)<>round(line.proposedNetPriceRequestedHidden_ct,4)){
    
     if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
     requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l*(Days/365.0),precision))*100/(round(ExtListPrice/quantity,precision)); 
     }
     else{
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l,precision))*100/(round(ExtListPrice/quantity,precision));
     }
     //Added the code for SYMINT-3206 for having discount 100% for Symantec Trail POC Quote by Arjun on 19-Dec-2019
   
     if(symantecTrialPOC_t==true AND dealType_t=="cADStandard")
     {
     requestedDiscount=100.0;
     }
     proposedPrice = round(ExtListPrice - ((ExtListPrice * requestedDiscount)/100),precision);
     
     
    
   }
   else{

     proposedPrice=round(commerce.calculateProposedPrice_brcm(ExtListPrice,quantity,requestedDiscount),precision);
     
   }
   //If loop for setting proposed entered using Import/Export
   //added the comparison of requested discount and custom discount so that import/export proposed price do not affect discounts 
   //and proposed price for EURO and other currencies that have "," instead of "."
   if(line.hiddenProposedPrice_l <> -1 AND round(requestedDiscount,0)<>round(line.customDiscountValue_l,0))
    { 
    if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
    
     if(quantity <> 0 and round(ExtListPrice,4) <> 0.0 AND round(requestedDiscount,0)==round(line.customDiscountValue_l,0)){
      if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
      
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l*(Days/365.0),precision))*100/(round(ExtListPrice/quantity,precision)); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity*(Days/365.0),precision);
      
      
      }else{
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l,precision))*100/(round(ExtListPrice/quantity,precision)); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity,precision);
      
      }
     }
     
     sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");
    }
    //end of code for hidden proposed price
    sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");  //Placed outside to set for all scenarios
   
   //Changes made as per VIPER-355  -  Added additional conditions to handle zero priced products based on license type or covered product
   if(final_price=="0" or final_price =="0.0000" or final_price =="0.0"){
    if(round(atof(final_price),0) == 0 and round(ExtListPrice,0)==0){
  
     if(licensetype=="Subscription" or coveredpdt<>"")
     {
      proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity*(Days/365.0),precision);
      requestedDiscount=0;
     }
     else{
      proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity,precision);
      requestedDiscount=0;
     }

    }
   }
   //}
   /*if(line.proposedNetPriceRequestedHidden_ct <> line.proposedNetUnitPriceRequested_l){
   proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity,precision);
   sb30=stringbuilder(output30,line._document_number,"~applyProposedPriceFlag_l~","false","|");
   output30=sbtostring(sb30);
  }
  if(line.customDiscountValue_l <> line.requestedDiscount_l){
   proposedPrice=round(commerce.calculateProposedPrice_brcm(ExtListPrice,quantity,requestedDiscount),precision);
   sb29=stringbuilder(output29,line._document_number,"~applyProposedPriceFlag_l~","false","|");
   output29=sbtostring(sb29);
  }*/
  
   if(line._model_name == "")
   { 
    if(atof(exch) <> 0){
     totalUSD=totalUSD + (proposedPrice/atof(exch));
    }   
    if(coveredpdt <> ""){
     totalMaintenanceFee = totalMaintenanceFee + round(proposedPrice,precision);
    }
    else{
     totalLicenseFee = totalLicenseFee + round(proposedPrice,precision);
     //sb6=stringbuilder(sb6,line._document_number,"~totalFee_l~",string(round(proposedPrice,precision)),"|");
    }
    total=total+round(proposedPrice,precision);
    
    //To Calculate Proposed Net Unit Price
    if(licensetype=="Subscription" or coveredpdt<>"")
    {
    
    TermsDays = 0.0;
    TermsDays=getdiffindays(StartDate,EndDate)+1.0;
    DivFactor=TermsDays/365.0;
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
    
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
    }
    
    else 
    {
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round(proposedPrice/min_qty,precision)),"|");
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round(proposedPrice/min_qty,precision)),"|");
    }
    if(requestedDiscount<=0 and round(atof(final_price),4) == 0)
    {
     requestedDiscount=0;
    }
    proposedunitprice=proposedPrice/min_qty;
    sb8=stringbuilder(sb8,line._document_number,"~requestedDiscount_l~",string(requestedDiscount),"|");
    sb9=stringbuilder(sb9,line._document_number,"~extProposedNetPriceRequested_l~",string(proposedPrice),"|");
    // Adding changes for New Annual Renewal Value
    sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,proposedPrice,line._document_number,line._part_number,line._model_name,line.contractEndDate_l,line.contractStartDate_l,line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));
    if(atof(exch) <> 0){
     sb10=stringbuilder(sb10,line._document_number,"~totalValueUSD~",string(proposedPrice/atof(exch)),"|");
    }
    lineDiscount = atof(final_price) - proposedPrice/min_qty;
    if(requestedDiscount<=0)
    {
     lineDiscount=0;
    }
   }
   
   sb11=stringbuilder(sb11,line._document_number,"~lineDiscountAmount_l~",string(lineDiscount),"|");
   //output11=sbtostring(sb11);

   sb12=stringbuilder(sb12,line._document_number,"~customDiscountValue_l~",string(requestedDiscount),"|");
   //output12=sbtostring(sb12);
   extLineDiscount = ExtListPrice - proposedPrice;
   if(requestedDiscount<=0){
    extLineDiscount=0;
   }
   sb13=stringbuilder(sb13,line._document_number,"~extLineDiscountAmount_l~",string(extLineDiscount),"|");
   if(string(line.approverRecommendedNetUnitPrice_l) <> "")
   {
    param_approver_recc_net_unit_price = line.approverRecommendedNetUnitPrice_l;
    param_approver_ext_recc_net_unit_price = param_approver_recc_net_unit_price * min_qty;
   }
   sb14=stringbuilder(sb14,line._document_number,"~approverRecommendedExtNetPrice_l~",string(param_approver_ext_recc_net_unit_price),"|");
   //output14=sbtostring(sb14);
   sm1 = round(salesMinl_var,precision);
   sb15=stringbuilder(sb15,line._document_number,"~salesMin1_l~",string(sm1),"|");
   //output15=sbtostring(sb15);
   sm2 = round(salesMin2_var,precision);
   sb16=stringbuilder(sb16,line._document_number,"~salesMin2_l~",string(sm2),"|");
   sm3 = round(salesMin3_var,precision);
   sb17=stringbuilder(sb17,line._document_number,"~salesMin3_l~",string(sm3),"|");
   sb18=stringbuilder(sb18,line._document_number,"~_price_quantity~",string(min_qty),"|",line._document_number,"~requestedQuantity_l~",string(min_qty),"|");

   if(Contract_no=="NA"){
    sb19=stringbuilder(sb19,line._document_number,"~contractNumber_l~","","|");
   }
   else
   {
    sb19=stringbuilder(sb19,line._document_number,"~contractNumber_l~",Contract_no,"|");
   }
   
   //Satyabrata Acharya; Changing the code to remove temporary fields as the read/write scenarios for site details is no more in scope.
   
    sb20=stringbuilder(sb20,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
    sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",shipToSiteNumber_t,"|");
    sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
    sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
    sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
   //end of code
   //VIPER-438 Adding the code to populate installed at fields in line level based on the business division and end customer site number ;
     
                           if((businessDivision_t=="Symantec" OR busDivision == "SED") AND endCustomerSiteNumber_t <> ""){
     if(line.installedAtCustomerNumber_l==line.temporaryInstalledAtCustomerNumber_avg){
                                           sb20=stringbuilder(sb20,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb21=stringbuilder(sb21,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",customerERPId_t,"|");
                                                         //output21=sbtostring(sb21);
                                           }
                                           if(line.installedAtCustomerNumber_l==""){
                                           sb20=stringbuilder(sb20,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb21=stringbuilder(sb21,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",customerERPId_t,"|");
                                                          //output21=sbtostring(sb21);
                                           }

                                           if(line.installedAtCustomerNumber_l<>"" AND line.installedAtCustomerNumber_l<>line.temporaryInstalledAtCustomerNumber_avg){
                                           sb20=sbappend(sb20,line._document_number,"~installedAtCustomerNumber_l~",line.installedAtCustomerNumber_l,"|");
                                           }
                                           else{
                                           sb20=sbappend(sb20,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);
                                           }

                                           if(line.siteID_l==line.temporarysiteID_avg or line.siteID_l==""){
                                           sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",endCustomerSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",endCustomerSiteNumber_t,"|");
                                                          //output23=sbtostring(sb23);
                                           }             
                                           if(line.siteID_l<>"" AND line.siteID_l<>line.temporarysiteID_avg){
                                           sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",line.siteID_l,"|");
                                                          //output23=sbtostring(sb23);
                                           //sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }
                                           else{
                                           sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",endCustomerSiteNumber_t ,"|");
                                                          //output23=sbtostring(sb23);
                                           sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",endCustomerSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }

                                           if(line.siteIDStreetAddress_l==line.temporarysiteIDStreetAddress_avg or line.siteIDStreetAddress_l==""){
                                           sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",_transaction_customer_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           sb25=stringbuilder(sb25,line._document_number,"~temporarysiteIDStreetAddress_avg~",_transaction_customer_t_address,"|");
                                                          //output25=sbtostring(sb25);
                                           }

                                           if(line.siteIDStreetAddress_l<>"" AND line.siteIDStreetAddress_l<>line.temporarysiteIDStreetAddress_avg){
                                           sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",line.siteIDStreetAddress_l,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           else{
                                           sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",_transaction_customer_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           if(line.siteIDCityStateZip_l==line.temporarysiteIDCityStateZip_avg or line.siteIDCityStateZip_l==""){
                                           sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",_transaction_customer_t_city,"|");
                                           sb26=stringbuilder(sb26,line._document_number,"~temporarysiteIDCityStateZip_avg~",_transaction_customer_t_city,"|");
                                           }

                                           if(line.siteIDCityStateZip_l<>"" AND line.siteIDCityStateZip_l<>line.temporarysiteIDCityStateZip_avg){
                                           sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",line.siteIDCityStateZip_l,"|");
                                           }
                                           else{
                                           sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",_transaction_customer_t_city,"|");
                                           }

                                           if(line.siteIDZip_l==line.temporarysiteIDZip_avg or line.siteIDZip_l==""){
                                           sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",_transaction_customer_t_zip,"|");
                                           sb28=stringbuilder(sb28,line._document_number,"~temporarysiteIDZip_avg~",_transaction_customer_t_zip,"|");
                                           }

                                           if(line.siteIDZip_l<>"" AND line.siteIDZip_l<>line.temporarysiteIDZip_avg){
                                           sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",line.siteIDZip_l,"|");
                                           }
                                           else{
                                           sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",_transaction_customer_t_zip,"|");
                                           }
        }  
        else {
     if(line.installedAtCustomerNumber_l==line.temporaryInstalledAtCustomerNumber_avg){
                                           sb20=stringbuilder(sb20,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb21=stringbuilder(sb21,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",shipToPartyID_t,"|");
                                                         //output21=sbtostring(sb21);
                                           }
                                           if(line.installedAtCustomerNumber_l==""){
                                           sb20=stringbuilder(sb20,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb21=stringbuilder(sb21,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",shipToPartyID_t,"|");
                                                          //output21=sbtostring(sb21);
                                           }

                                           if(line.installedAtCustomerNumber_l<>"" AND line.installedAtCustomerNumber_l<>line.temporaryInstalledAtCustomerNumber_avg){
                                           sb20=sbappend(sb20,line._document_number,"~installedAtCustomerNumber_l~",line.installedAtCustomerNumber_l,"|");
                                           }
                                           else{
                                           sb20=sbappend(sb20,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);
                                           }
         

                                           if(line.siteID_l==line.temporarysiteID_avg or line.siteID_l==""){
                                           sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",shipToSiteNumber_t,"|");
                                                          //output23=sbtostring(sb23);
                                           }             
                                           if(line.siteID_l<>"" AND line.siteID_l<>line.temporarysiteID_avg){
                                           sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",line.siteID_l,"|");
                                                          //output23=sbtostring(sb23);
                                           //sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }
                                           else{
                                           sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",shipToSiteNumber_t ,"|");
                                                          //output23=sbtostring(sb23);
                                           sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }

                                           if(line.siteIDStreetAddress_l==line.temporarysiteIDStreetAddress_avg or line.siteIDStreetAddress_l==""){
                                           sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           sb25=stringbuilder(sb25,line._document_number,"~temporarysiteIDStreetAddress_avg~",_transaction_shipTo_t_address,"|");
                                                          //output25=sbtostring(sb25);
                                           }

                                           if(line.siteIDStreetAddress_l<>"" AND line.siteIDStreetAddress_l<>line.temporarysiteIDStreetAddress_avg){
                                           sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",line.siteIDStreetAddress_l,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           else{
                                           sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           if(line.siteIDCityStateZip_l==line.temporarysiteIDCityStateZip_avg or line.siteIDCityStateZip_l==""){
                                           sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
                                           sb26=stringbuilder(sb26,line._document_number,"~temporarysiteIDCityStateZip_avg~",_transaction_shipTo_t_city,"|");
                                           }

                                           if(line.siteIDCityStateZip_l<>"" AND line.siteIDCityStateZip_l<>line.temporarysiteIDCityStateZip_avg){
                                           sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",line.siteIDCityStateZip_l,"|");
                                           }
                                           else{
                                           sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
                                           }

                                           if(line.siteIDZip_l==line.temporarysiteIDZip_avg or line.siteIDZip_l==""){
                                           sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
                                           sb28=stringbuilder(sb28,line._document_number,"~temporarysiteIDZip_avg~",_transaction_shipTo_t_zip,"|");
                                           }

                                           if(line.siteIDZip_l<>"" AND line.siteIDZip_l<>line.temporarysiteIDZip_avg){
                                           sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",line.siteIDZip_l,"|");
                                           }
                                           else{
                                           sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
                           }
                           }                
   //end of code
   // merge approval flag
   propPrice = proposedPrice/min_qty;
   flag = true;
   part=line._part_number;

   if(quoteType_t == "renewalQuote" and upper(line.transactionTypeM_l) <> "NEW"  and line.transactionTypeM_l <> "")
   {
    flag = true;
    sb1=sbappend(sb1,line._document_number, "~approvalFlag_l~", String(flag), "|");
   }
   else
   {
    CustomerAccountArray = String[]{Customer,BillTo,EndCust};
    resultset=bmql("SELECT MPN,Item_Price FROM BRCM_Cust_Pricelist WHERE MPN= $part AND Customer_Account_No IN $CustomerAccountArray");
    for res1 in resultset
    {
     price = get(res1,"Item_Price");
     if(price <> "")
     {
      flag = false;
     }
    }
    if(flag == false)
    {
     if(requestedDiscount <> 0.0)
     {
      flag = true;
     }
    }
    if(flag == true)
    {
     if( line.noBid_l == true)
     {
      flag = false;
     }
    }
    if(flag and part == "Cust")
    {
     flag = false;
    }
    if(propPrice > 0 and atof(final_price) == 0)
    {
     flag = true;
    }
    sb1=sbappend(sb1,line._document_number, "~approvalFlag_l~", String(flag), "|");
   }
   if((flag and propPrice < line.salesMin1_l) or (flag and propPrice > 0 and atof(final_price) == 0))
   {
    approveFlag = true;
   } 
   if(dDRFlag == false)
   {
    if(startswith(line.isDiscountable_l,"N"))
    {
     dDRFlag = true;
    }
    resultset = bmql("select Restricted from BRCM_Part_Master_Prc where MPN = $part");
    restFlag = "";
    for record in resultset 
    {
     restFlag = get(record,"Restricted");
    } 
    if(restFlag == "Y")
    {
     dDRFlag = true;
    }
   }

   //end merge

  }

 }
 }

 sb = sbappend(sb,sb1,sb2,sb3,sb4,sb5,sb6,sb7,sb9,sb9a,sb8,sb10,sb11,sb12,sb13,sb14,sb15,sb16,sb17,sb19,sb18,sb20,sb21,sb22,sb23,sb24,sb25,sb26,sb27,sb28,sb29,sb30,sb31,sb32,sb33,result);
 result= sbtostring(sb);
}

//Renewal Quote Logic
elif(quoteType_t=="renewalQuote")
{
 //SYMINT-1657 added logic to blank out customer details values if operating unit is changed
 if(operatingUnit_t<>"" and NOT isnull(operatingUnit_t)){
 if(operatingUnit_t<>operatingUnit){
 sb2=stringbuilder(sb2,"1",dlim,"licenseeName_t",dlim,"",dend,"1",dlim,"licenseeERPAccount_t",dlim,"",dend,"1" , dlim , "endCustomerParentId_avg" , dlim , "" , dend, "1" , dlim , "endCustomerGrandParentId_avg" , dlim , "" , dend, "1" , dlim , "endCustomerGlobalParentName_t" , dlim , "" , dend, "1" , dlim , "_transaction_customer_t_company_name" , dlim , "", dend, "1" , dlim , "_transaction_customer_id" , dlim , "" , dend,"1" , dlim , "customerERPId_t" , dlim ,  ""  , dend, "1" , dlim , "core_t" , dlim , "" , dend, "1" , dlim ,"restrictedCustomerFlag_t" , dlim , "" , dend, "1" , dlim , "partnerPartyNumber_t" , dlim , "" , dend, "1" , dlim , "paymentTerms_t" , dlim , "" , dend, "1" , dlim , "endCustomerSiteNumber_t" , dlim , "" , dend, "1" , dlim , "_transaction_customer_t_address_2" , dlim , "", dend, "1" , dlim , "_transaction_customer_t_address" , dlim , "" , dend, "1" , dlim , "_transaction_customer_t_city" , dlim , "", dend, "1" , dlim , "endCustomerState_t" , dlim , "" , dend, "1" , dlim , "endCustomerCountry_t" , dlim ,  ""  , dend,"1" , dlim , "_transaction_customer_t_zip" , dlim , "" , dend, "1" , dlim , "billToContactEmail_t" , dlim , "", dend, "1" , dlim , "billToContactWorkPhone_t" , dlim , "" , dend, "1" , dlim , "billToContactName_t" , dlim , "" , dend, "1" , dlim , "billToContactMobilePhone_t" , dlim , "" , dend, "1" , dlim , "shipToPartyID_t" , dlim , "" , dend, "1" , dlim , "soldToContactName_t" , dlim , "" , dend, "1" , dlim , "soldToContactEmail_t" , dlim , "" , dend, "1" , dlim , "soldToContactWorkPhone_t" , dlim , "" , dend, "1" , dlim , "soldToContactMobilePhone_t" , dlim , "" , dend, "1" , dlim , "soldToCustomerAccountID_t" , dlim , "" , dend, "1" , dlim , "shipToContactName_t" , dlim , "" , dend, "1" , dlim , "shipToContactEmail_t" , dlim , "" , dend, "1" , dlim , "shipToContactMobilePhone_t" , dlim , "" , dend, "1" , dlim , "shipToContactWorkPhone_t" , dlim , "" , dend, "1" , dlim , "_shipTo_t_city" , dlim , "" , dend, "1" , dlim , "_shipTo_t_state" , dlim , "" , dend, "1" , dlim , "_shipTo_t_country" , dlim , "" , dend, "1" , dlim , "_shipTo_t_address" , dlim , "" , dend, "1" , dlim , "_shipTo_t_zip" , dlim , "" , dend, "1" , dlim , "billToCity_t" , dlim , "" , dend, "1" , dlim , "billToState_t" , dlim , "" , dend, "1" , dlim , "billToCountry_t" , dlim , "" , dend, "1" , dlim , "billToAddress_t" , dlim , "" , dend, "1" , dlim , "billToZip_t" , dlim , "" , dend, "1" , dlim , "_shipTo_t_address_2" , dlim , "" , dend, "1" , dlim , "billToCustomer_t" , dlim , "" , dend, "1" , dlim , "billToCustomerId_t" , dlim , "" , dend, "1" , dlim , "eRPAccountNumberPurchaseCustomer_t" , dlim , "" , dend, "1" , dlim , "shipToCustomerSite_t" , dlim , "" , dend, "1" , dlim , "eRPAccountNumberShipTo_t" , dlim , "" , dend, "1" , dlim , "soldToCustomer_t" , dlim , "" , dend, "1" , dlim , "billToSiteNumber_t" , dlim , "" , dend, "1" , dlim , "sellToSiteNumber_t" , dlim , "" , dend, "1" , dlim , "shipToSiteNumber_t" , dlim , "" , dend, "1" , dlim , "billToParentId_avg" , dlim , "" , dend, "1" , dlim , "billToGrandParentId_avg" , dlim , "" , dend, "1" , dlim , "shipToCountry_t" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_city" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_address" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_state" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_zip" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_country" , dlim , "" , dend);
 }
 }
 for line in transactionLine

 {   
  licensetype=line.licenseType_l;
  //BROCAD-5278
  //BROCAD2-3504-BEGIN
/*  if(startswith(upper(line.transactionTypeM_l),"RENEW"))
  {
   renewalFlag = true;
  }*/
  //BROCAD2-3504-END
  
   
  
  Contract_no=line.contractNumber_l;
  //validation rule: Validate Support Types on Line Items; adithya
  if(line._part_number <> "" and line.supportType_l <> "")
  {
   if(containsKey(premierSupportCodesDictionary,line.supportType_l))
   {
    isPresentInPremierCodes = true;
   }
   elif(containsKey(EssentialSupportCodesDictionary,line.supportType_l))
   {
    isPresentInEssentialCodes = true;
   }

   if(isPresentInEssentialCodes and isPresentInPremierCodes)
   {
    validateSupportTypesOnLineItemsFlag = true;
   }
  }

  //validation rule : Validate Covered Products On Lines; adithya
  if(line.coveredProduct_l <> "" and line._part_number <> "")
  {
   put(coveredProductDictionary, line.coveredProduct_l , line.coveredProduct_l);
  }

  //constraint rule :Constrain Education Line Items; kacharya
  if(find(QuoteDealType, searchString) >= 0)
  {
   if(line._part_number <> "")
   {
    if(not containsKey(parentPartDictionary,line._part_number))
    {
     put(parentPartDictionary, line._part_number, line._price_quantity);
    }
   }
  }

  transactionTypeM=line.transactionTypeM_l;
  lineold=getoldvalue("_line_item_comment",atoi(line._document_number));
  contractenddateold=getoldvalue("contractEndDate_l",atoi(line._document_number));
  contractstartdateold=getoldvalue("contractStartDate_l",atoi(line._document_number));
  coveredold=getoldvalue("coveredProduct_l",atoi(line._document_number));
  licenseold=getoldvalue("licenseType_l",atoi(line._document_number));
  if(line.contractStartDate_l<>"" )
  {
   StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
  }
  if(line.contractEndDate_l<>"" )
  {
   EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
  }
  supp_rate1 = 0.0;
  unitMSRP = 0.0;

  //if(line.lineItemComment_avg<>line._line_item_comment){
   if(line._line_item_comment<>"" and line._part_number<>"Cust")
   {
    sb1=stringbuilder(sb1,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchConfigAttributesFromCommerce_brcm(line._document_number, line._part_number, line._line_item_comment, line.effectiveStartDate_l, line.lineExpirationDate_l, line._model_name));
    //output1=sbtostring(sb1);
   }
  //}
  if(billToCustomerId_t=="" or soldToCustomerAccountID_t=="" or shipToPartyID_t=="" or _transaction_customer_id=="" or line.lineItemComment_avg<>line._line_item_comment or operatingUnit<>operatingUnit_t){
   if(line.lineItemComment_avg<>line._line_item_comment or operatingUnit<>operatingUnit_t)
   {
   if(line._part_number=="Cust" AND line._model_name=="")
   {
    sb2=stringbuilder(sb2,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchCustomerSearchDetails_brcm(line._model_name, line._part_number, line._line_item_comment));
    //output2=sbtostring(sb2);
   }
   }
  }
  //Condition for Defer Pricing Logic (Currently not in use)
  if(avoidPricingCalculations_t == false){
  //final_price="0";
  final_price=string(line.perUnitPerListPrice_l);
  if(line._part_number<>"Cust" AND line._model_name=="")
  {
  accountbuilder=stringbuilder(EndCustomerId,"~",BillToCustomerId,"~",EndCustomerId, "~" , EndParentId , "~" , EndGrandParentId , "~" , line.cPN_l , "~" ,line.effectiveStartDate_l , "~" , line.effectiveStartDate_l , "~" , routeToMarket_t , "~" , BillParentId ,"~" , BillGrandParentId , "~" , quoteType_t);
  //accountbuilder=stringbuilder(_transaction_customer_id,"~",billToCustomerId_t,"~",_transaction_customer_id , "~" , endCustomerParentId_avg , "~" , endCustomerGrandParentId_avg , "~" , line.cPN_l , "~" ,line.effectiveStartDate_l , "~" , line.effectiveStartDate_l , "~" , routeToMarket_t , "~" , billToParentId_avg ,"~" , billToGrandParentId_avg , "~" , quoteType_t);
  AccountNums=sbtostring(accountbuilder);

  coveredProduct=line.coveredProduct_l;
  coveredpdt=line.coveredProduct_l;
  supportType_l=line.supportType_l;
  upliftfactor=0.0;
  env_selected=line.enterEnvironment_l;

  coveredProduct_l=line.coveredProduct_l;
  //loop makes sure pricing logic goes into correct logic when auto generated quotes are created. Also in case of merge/split quote scenarios
  //Changes made as part of VIPER - 264 - adding a condition to allow configured products pricing after merging the renewal quotes - added condition - if renewalsImportPricing was "yes" or parent_doc_number is not blank
  //if(len(Trim(mergedQuotes))< 1 OR line.createdBy_l<>"Integration User" OR line.renewalsImportPricing == "no" or line.renewalsImportPricing == "yes" OR line._parent_doc_number <> "")
  //{//Renewal Quote Pricing Logic to update Contract/List Unit Price
  //Changes made as part of VIPER - 264 - adding a condition to allow configured products pricing after merging the renewal quotes - added condition - parent_doc_number is not blank
  //Changes made as part of VIPER-278 - Added Condition to check renewalCreatedBy is not Integration User to avoid below Global Pricing calculations when EAR is zero and incase of Cloned Quote 'CreatedBy' is updated to Actual User instead of Integration 
  //Changes made as part of VIPER-412 - Regression Issue: When we Split Zero price products in renewal quote Standard Global Pricing is getting applied for that line item Removed or (len(Trim(splitQuoteInfo_t))> 0) from below validation
   if(line.hiddenPrice_l==0.0 and ((line.createdBy_l<>"Integration User" and line.renewalCreatedBy_l <> "Integration User") or line.renewalsImportPricing == "yes" OR line._parent_doc_number <> ""))
   { 
    if(line._price_list_price_each==0.0)
    {  if(getoldvalue(routeToMarket_t)<>routeToMarket_t or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.00") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0") OR (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.0000") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="") or (contractenddateold)<>line.contractEndDate_l OR (contractstartdateold)<>line.contractStartDate_l OR (coveredold)<>line.coveredProduct_l OR (licenseold)<>line.licenseType_l){
     upliftfactor=0.0;
     if(line.coveredProduct_l=="")
     {
      Days=getdiffindays(StartDate,EndDate)+1;
      partnumber=line._part_number;
      subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for subres in subset1{
       base_price1 =get(subres,"Base_Price");
       sub_type =get(subres,"Subscription_Type");
       }
       subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
       for subsfactresult in subs_factor_result{
       sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
       }
      put(partNoDict,"Item1",partnumber);
      Contract_no="NA";
      contractdetials=string[2];
      partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
      if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l=="")
      { 
       if(find(get(partPriceDict,"Item1"),"~")<>-1)
       {
        contractdetials= split(get(partPriceDict,"Item1"), "~");
        Contract_no=contractdetials[1];
       }
       else
       {
        contractdetials[0]=get(partPriceDict,"Item1");
        Contract_no="NA";
       }

       partPrice=string(atof(contractdetials[0])*atof(exch));
          /*BROCAD2-4748*/
          unitMSRP = (atof(base_price1)*atof(exch));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
       final_price=String(round((atof(partPrice)+(atof(partPrice)*upliftfactor)),precision));

       sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
       //added new variable for Jira#1617
       listPrice = string(round(atof(final_price),precision));
       sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
       sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
       //output4=sbtostring(sb4);
      }
      if(line.licenseType_l=="Subscription")
      {
       partNo=get(partNoDict, "Item1");
       if(find(get(partPriceDict,"Item1"),"~")<>-1)
       {
        contractdetials= split(get(partPriceDict,"Item1"), "~");
        Contract_no=contractdetials[1];
       }
       else
       {
        contractdetials[0]=get(partPriceDict,"Item1");
        Contract_no="NA";
       }

       calcPrice=string(atof(contractdetials[0])*atof(exch));
       //subscription_price = String(atof(calcPrice)*atof(exch));
       //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",subscription_price,"|");
       if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) )
       {
        partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
        
        //partPrice1=round(atof(partPrice)*(365.0/days),precision);
        //partPrice=string(partPrice1*(days/365.0));
        
        final_price=String((atof(partPrice)+(atof(partPrice)*upliftfactor)));
          /*BROCAD2-4748*/
          unitMSRP=(round(atof(base_price1)*sub_factor*atof(exch),precision))*(days/365.0);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round((atof(partPrice)+(atof(partPrice)*upliftfactor))*365/days,precision)),"|");
        
        //added new variable for Jira#1617
        listPrice = String(round((atof(partPrice)+(atof(partPrice)*upliftfactor))*365/days,precision));
        sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
        sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
        //output4=sbtostring(sb4);
       }
      }
     }
     /*******************************************************************************
      * Calculation of Contract/List Unit Price for Standalone Support/Maintenance
      * SKUs
      ******************************************************************************/
     else
     {

      Days=getdiffindays(StartDate,EndDate)+1;
      coveredpdt=line.coveredProduct_l;
      basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredProduct_l");
      supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType_l");
      subset=bmql("SELECT MPN,Base_Price,Base_Support_Value,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredProduct_l ORDER BY Start_Date ASC");
      for res2 in basepriceset{
       Division=get(res2,"Business_Div");
      }
      for res1 in subset{
       if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
       {   
        basePrice=get(res1,"Base_Price");
        NDP=atof(get(res1,"Base_Support_Value"));
       }
      }
      if(Division=="CAD" or Division=="SED")
      {
       put(partNoDict,"Item1",coveredProduct_l);
       partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
       Contract_no="NA";
       contractdetials=string[2];
       if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l==""){

        if(find(get(partPriceDict,"Item1"),"~")<>-1)
        {
         contractdetials= split(get(partPriceDict,"Item1"), "~");
         Contract_no=contractdetials[1];
        }
        else
        {
         contractdetials[0]=get(partPriceDict,"Item1");
         Contract_no="NA";
        }

        partPrice=string(atof(contractdetials[0])*atof(exch));
        //changes added as part of BROCAD2 - 1617
        salesminprice=partPrice;
          /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

       }
       if(line.licenseType_l=="Subscription"){

        partNo=get(partNoDict, "Item1");

        if(find(get(partPriceDict,"Item1"),"~")<>-1)
        {
         contractdetials= split(get(partPriceDict,"Item1"), "~");
         Contract_no=contractdetials[1];
        }
        else
        {
         contractdetials[0]=get(partPriceDict,"Item1");
         Contract_no="NA";
        }

        calcPrice=string(atof(contractdetials[0])*atof(exch));
        //changes added as part of BROCAD2 - 1617
        salesminprice=calcPrice;


        if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
         partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
         
         //partPrice1=round(atof(partPrice)*(365.0/days),precision);
         //partPrice=string(partPrice1*(days/365.0));
         
        }
          /*BROCAD2-4748*/
          unitMSRP = round(atof(partPrice)*days,precision);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
       }


       For results in supportset{

        supp_rate=atof(get(results,"Support_Rate"));
        if(basePrice<>""){

         supp_rate1=((round(atof(basePrice)*supp_rate,precision))*NDP*Days/365);

         unitMSRP=((atof(basePrice)*supp_rate)*atof(exch));}

        if(partPrice<>""){

         supp_price=String((round(atof(salesminprice)*supp_rate,precision))*NDP*Days/365);
         /*BROCAD2-4748*/
          unitMSRP = ((atof(basePrice)*supp_rate)*NDP*Days/365)*atof(exch);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

        }


        final_price=String((atof(supp_price)+(atof(supp_price)*upliftfactor)));

        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round((atof(supp_price)+(atof(supp_price)*upliftfactor))*365/Days,precision)),"|");
        //added new variable for Jira#1617
        listPrice = String(round((atof(supp_price)+(atof(supp_price)*upliftfactor))*365/Days,precision));
        sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
        sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
        //output4=sbtostring(sb4);
        //result= result + line._document_number + dlim + "unitMSRP_l" + dlim + string(unitMSRP) + dend;
       }
      }
      elif(Division=="BSN")
      {
       For results in supportset{
        supp_rate=atof(get(results,"Support_Rate"));
        supp_price=String((atof(basePrice)*supp_rate)*NDP);
        
        if(basePrice<>""){
        //changes added as part of BROCAD2 - 1617
        salesminprice=basePrice;
         supp_rate1=((atof(basePrice)*supp_rate)*NDP*Days/365);

         unitMSRP=((atof(basePrice)*supp_rate)*atof(exch));}

        final_price=String((atof(supp_price)+(atof(supp_price)*upliftfactor))*atof(exch));

        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round((atof(supp_price)+(atof(supp_price)*upliftfactor))*atof(exch)*365/Days,precision)),"|");
        //added new variable for Jira#1617
        listPrice = String(round((atof(supp_price)+(atof(supp_price)*upliftfactor))*atof(exch)*365/Days,precision));
        //output4=sbtostring(sb4);
        //result= result + line._document_number + dlim + "unitMSRP_l" + dlim + string(unitMSRP) + dend;
       }
      }
     }
    }
    }
    /** ************************************************************************************ */
    else
    { 
     upliftfactor=0.0;
     if(line._model_name=="" AND line._parent_doc_number<>"")
     {

      final_price=String((line._price_list_price_each+(line._price_list_price_each*upliftfactor)));

      sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
      //added new variable for Jira#1617
      listPrice = string(round(atof(final_price),precision));
      //output4=sbtostring(sb4);
      coveredpdt=line.coveredProduct_l;
      licensetype=line.licenseType_l;
      supportType=line.supportType_l;
      obj=json();
      if(line._line_item_comment<>"")
      {
       teststring=line._line_item_comment;
       obj=json(teststring);
       child=jsonget(obj,"child");
       childObj=json(child);
       PartNumber=jsonget(obj,"PartNumber");
       licensetype=jsonget(childObj,"selectLicenseType");
       supportType=jsonget(childObj,"supportType");
       supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
       if (line._part_number == supportPartsPicklist)
       {
        coveredpdt=PartNumber;
       }

       if(jsonget(childObj,"startDate")<>"" ){
        StartDate=strtojavadate(jsonget(childObj,"startDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }

       if(jsonget(childObj,"endDate")<>"" ){
        EndDate=strtojavadate(jsonget(childObj,"endDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }
      }

      //For running the pricing logic for items added using configurator
      if(coveredpdt=="")
      {

       Days=getdiffindays(StartDate,EndDate)+1;
       partnumber=line._part_number;
       subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for res2 in subset1
       {
        base_price1 =get(res2,"Base_Price");
        sub_type =get(res2,"Subscription_Type");
        subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
        for subsfactresult in subs_factor_result{
        sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
        }
        if(get(res2 ,"Start_Date")<>"" and get(res2 ,"End_Date")<>"")
        {
         if(strtojavadate(get(res2 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res2 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
         {

          Contract_no="NA";
          contractdetials=string[2];
          put(partNoDict,"Item1",partnumber);

          partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
          if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

           if(find(get(partPriceDict,"Item1"),"~")<>-1)
           {
            contractdetials= split(get(partPriceDict,"Item1"), "~");
            Contract_no=contractdetials[1];
           }
           else
           {
            contractdetials[0]=get(partPriceDict,"Item1");
            Contract_no="NA";
           }
           partPrice=string(atof(contractdetials[0])*atof(exch));

           /*BROCAD2-4748*/
           unitMSRP = (atof(base_price1)*atof(exch));
           extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
           /*BROCAD2-4748*/
           final_price=String(round(atof(partPrice),precision));
           sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
           //added new variable for Jira#1617
           listPrice = string(round(atof(final_price),precision));
           sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
           sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
           //output4=sbtostring(sb4);

          }
          if(licensetype=="Subscription")
          {
           partNo=get(partNoDict, "Item1");
           if(find(get(partPriceDict,"Item1"),"~")<>-1)
           {
            contractdetials= split(get(partPriceDict,"Item1"), "~");
            Contract_no=contractdetials[1];
           }
           else
           {
            contractdetials[0]=get(partPriceDict,"Item1");
            Contract_no="NA";
           }

           calcPrice=string(atof(contractdetials[0])*atof(exch));
           //subscription_price = String(atof(calcPrice)*atof(exch));
           //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",subscription_price,"|");
           if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
            partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
            
            //partPrice1=round(atof(partPrice)*(365.0/days),precision);
            //partPrice=string(partPrice1*(days/365.0));
            
            final_price=String(atof(partPrice));
            /*BROCAD2-4748*/
            unitMSRP=(round(atof(base_price1)*sub_factor*atof(exch),precision))*(days/365.0);
            extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
            /*BROCAD2-4748*/
            sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
            sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(partPrice)*365/days,precision)),"|");
            //added new variable for Jira#1617
            listPrice = String(round(atof(partPrice)*365/days,precision));
            sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
            //output4=sbtostring(sb4);

           }
          }
         }
        }
       }
      }
      /*******************************************************************************
       * Calculation of Contract/List Unit Price for Support/Maintenance
       * SKUs
       ******************************************************************************/
      else
      {
       Days=getdiffindays(StartDate,EndDate)+1;
       basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredpdt");
       supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType");
       subset=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredpdt ORDER BY Start_Date ASC");
       for res2 in basepriceset{
        Division=get(res2,"Business_Div");
       }
       for res1 in subset{
        if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
        {              basePrice=get(res1,"Base_Price");
        NDP=atof(get(res1,"Base_Support_Value"));


        }
       }
       if(Division=="CAD" or Division=="SED")
       {
        Contract_no="NA";
        contractdetials=string[2];
        put(partNoDict,"Item1",coveredpdt);
        partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         partPrice=string(atof(contractdetials[0])*atof(exch));
         //changes added as part of BROCAD2 - 1617
         salesminprice=partPrice;
         /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

        }
        if(licensetype=="Subscription"){

         partNo=get(partNoDict, "Item1");


         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         calcPrice=string(atof(contractdetials[0])*atof(exch));
         //changes added as part of BROCAD2 - 1617
         salesminprice=calcPrice;
         if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
          partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
         
          //partPrice1=round(atof(partPrice)*(365.0/days),precision);
          //partPrice=string(partPrice1*(days/365.0));
         }
         
         /*BROCAD2-4748*/
          unitMSRP = round(atof(partPrice)*days,precision);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         
        }
        For results in supportset{

         supp_rate=atof(get(results,"Support_Rate"));
         if(partPrice<>""){
          supp_price=String((round(atof(salesminprice)*supp_rate,precision))*NDP*Days/365);
          /*BROCAD2-4748*/
          unitMSRP = ((atof(basePrice)*supp_rate)*NDP*Days/365)*atof(exch);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

         }

         final_price=String(atof(supp_price));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(supp_price)*365/Days,precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(supp_price)*365/Days,precision));
         sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
         sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
         //output4=sbtostring(sb4);
        }
       }
       elif(Division=="BSN"){
        For results in supportset{
         supp_rate=atof(get(results,"Support_Rate"));
         supp_price=String((atof(basePrice)*supp_rate)*NDP);
         //changes added as part of BROCAD2 - 1617
        salesminprice=basePrice;

         final_price=String(atof(supp_price)*atof(exch));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(basePrice)*atof(exch),precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(basePrice)*atof(exch),precision));
         //output4=sbtostring(sb4);
        }
       }

      }
      //End of code

      param_per_unit_per_list_price = (line._price_list_price_each+(line._price_list_price_each*upliftfactor));

     }
    }
   }
   else
   {  // if(getoldvalue("hiddenPrice_l",atoi(line._document_number))<>string(line.hiddenPrice_l)){
    upliftfactor=3.0/100;//update the value as percentage value on 03/11
    upliftset=bmql("SELECT Uplift_Factor FROM BRCM_Part_Master_Prc WHERE MPN=$coveredProduct ORDER BY Start_Date ASC");
    for up in upliftset
    {
     upliftfactor=getfloat(up,"Uplift_Factor")/100;
    }
    if(line.renewalsImportPricing <> "no")
    {
     upliftfactor = upliftfactor;
    }
    if((core_t=="Commercial" OR core_t =="ZCA_NON_CORE") AND businessDivision_t=="Symantec")
    {
    upliftfactor = 10.0/100;
    }
    if((core_t=="ZCA_CORE") AND businessDivision_t=="Symantec")
    {
    upliftfactor = 0.0;
    }
    if(line.renewalsImportPricing == "no" or line.renewalsImportPricing == "yes")
    {
     upliftfactor = 0.0;
    }
    

    final_price=String(line.hiddenPrice_l+line.hiddenPrice_l*upliftfactor);


    if(line.coveredProduct_l<>"")
    {
     Days=getdiffindays(StartDate,EndDate)+1;
     supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType_l");
     subset=bmql("SELECT MPN,Base_Price, Base_Support_Value,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredpdt ORDER BY Start_Date ASC");
     for res1 in subset{
      if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
      {              basePrice=get(res1,"Base_Price");
      //changes added as part of BROCAD2 - 1617
         salesminprice=basePrice;
      NDP=atof(get(res1,"Base_Support_Value"));


      }
     }
     //Modified by Ravi on July 02 2019 as part of BROCAD2-4748 Enhancement
     licensetype=line.licenseType_l;
     Contract_no=line.contractNumber_l;
        contractdetials=string[2];
        put(partNoDict,"Item1",coveredpdt);
        partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          //Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         partPrice=contractdetials[0];
         //changes added as part of BROCAD2 - 1617
         salesminprice=partPrice;
         /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice)*atof(exch));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

        }
        if(licensetype=="Subscription"){

         partNo=get(partNoDict, "Item1");


         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         calcPrice=contractdetials[0];
         //changes added as part of BROCAD2 - 1617
         salesminprice=calcPrice;
         if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
          partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
         
          //partPrice1=round(atof(partPrice)*(365.0/days),precision);
          //partPrice=string(partPrice1*(days/365.0));
         }
         
          /*BROCAD2-4748*/
          unitMSRP = round(atof(partPrice)*days,precision);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         
        }
     
     
     for results in supportset{
      supp_rate=atof(get(results,"Support_Rate"));
      if(String(line.hiddenPrice_l)<>""){
       supp_price=String((round(line.hiddenPrice_l*supp_rate,precision))*NDP*Days/365);
        if(basePrice<>""){
       supp_rate1=((atof(basePrice)*supp_rate)*NDP*Days/365);
       unitMSRP=((supp_rate1)*atof(exch));
       extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
       }
     
       
     }
     //if(basePrice<>""){
     //unitMSRP=((atof(basePrice)*supp_rate)*atof(exch));}
     /*final_price=String((atof(supp_price)+(atof(supp_price)*upliftfactor)));
     sb4=stringbuilder(output4,line._document_number,"~perUnitPerListPrice_l~",final_price,"|");
     sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
     sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
     output4=sbtostring(sb4);*/
     }
     
     
     
     
     /*
     
     if(line.licenseType_l=="Subscription"){
      unitMSRP =(((atof(basePrice)/365)*)*atof(exch)*Days);
     }
     if(licensetype=="Perpetual" or licensetype=="UMF"){
      unitMSRP =(atof(basePrice)*atof(exch));
     }
     else
     {
      }*/
     sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
     if(line.renewalsImportPricing <> "no" and line.renewalsImportPricing <> "yes")
     { //coveredpdt="";
      env_selected = "";
      final_price=String((round((line.hiddenPrice_l+(line.hiddenPrice_l*upliftfactor)),precision)*(Days/365.0)));
      //final_price=String((line.hiddenPrice_l)+((line.hiddenPrice_l)*upliftfactor));
      sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(((line.hiddenPrice_l))+((line.hiddenPrice_l)*upliftfactor),precision)),"|");
      //added new variable for Jira#1617
      listPrice = string(round(((line.hiddenPrice_l))+((line.hiddenPrice_l)*upliftfactor),precision));
     }
     if(line.renewalsImportPricing == "no" or line.renewalsImportPricing == "yes")
     {
      final_price=String(line.hiddenPrice_l*Days/365);
       sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(line.hiddenPrice_l,precision)),"|");
       //added new variable for Jira#1617
       listPrice = string(round(line.hiddenPrice_l,precision));
     }

     //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
     sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
     sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
     //output4=sbtostring(sb4);
    }
    else
    {
     /*Start: Pricing Changes done by Ravi May-10-2019 BROCAD2-3103*/
     upliftfactor=3.0/100;//update the value as percentage value on 03/11
     partnumber=line._part_number;
     subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
     for subres in subset1{
     base_price1 =get(subres,"Base_Price");
     sub_type =get(subres,"Subscription_Type");
     }
     subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
     for subsfactresult in subs_factor_result{
     sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
     }
     upliftset=bmql("SELECT Uplift_Factor, Base_Price FROM BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
     for up in upliftset
     {
      basePrice=get(up,"Base_Price");
      upliftfactor=getfloat(up,"Uplift_Factor")/100;
     }
     if(line.renewalsImportPricing <> "no")
     {
      upliftfactor = upliftfactor;
     }
     if((core_t=="Commercial" OR core_t=="ZCA_NON_CORE") AND businessDivision_t=="Symantec")
     {
     upliftfactor = 10.0/100;
     }
     if((core_t=="ZCA_CORE") AND businessDivision_t=="Symantec")
     {
     upliftfactor = 0.0;
     }
     if(line.renewalsImportPricing == "no" or line.renewalsImportPricing == "yes")
     {
      upliftfactor = 0.0;
     }
     /*End: Pricing Changes done by Ravi May-10-2019 BROCAD2-3103*/
     if(line.contractStartDate_l<>"" ){
      StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
     }
     if(line.contractEndDate_l<>"" ){
      EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
     }
     Days=getdiffindays(StartDate,EndDate)+1;

     final_price=String((line.hiddenPrice_l+line.hiddenPrice_l*upliftfactor));
     sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
     //added new variable for Jira#1617
     listPrice = string(round(atof(final_price),precision));
     //Begin: Added Unit MSRP Calculations for Perpetual and UMF Lines for Import/Export on 07-25-2019 - BROCAD2-5532
     licensetype=line.licenseType_l;
     Contract_no=line.contractNumber_l;
        contractdetials=string[2];
        put(partNoDict,"Item1",partnumber);
        partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          //Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }
         //print line._document_number + " : " + Contract_no;
         partPrice=contractdetials[0];
         //changes added as part of BROCAD2 - 1617
         salesminprice=partPrice;
         /*BROCAD2-4748*/
          unitMSRP = (atof(base_price1)*atof(exch));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
          sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
          sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");

        }
     ////End: Added Unit MSRP Calculations for Perpetual and UMF Lines for Import/Export on 07-25-2019 - BROCAD2-5532
     if(line.licenseType_l=="Subscription"){
      if(line.renewalsImportPricing <> "no" and line.renewalsImportPricing <> "yes")
      {
       env_selected = "";
       final_price=String((round((line.hiddenPrice_l+(line.hiddenPrice_l*upliftfactor)),precision)*(Days/365.0)));
       //final_price = final_price;
       sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(((line.hiddenPrice_l))+((line.hiddenPrice_l)*upliftfactor),precision)),"|");
       //added new variable for Jira#1617
       listPrice = string(round(((line.hiddenPrice_l))+((line.hiddenPrice_l)*upliftfactor),precision));
      }
      if(line.renewalsImportPricing  == "no" or line.renewalsImportPricing == "yes")
      {
       final_price=String(line.hiddenPrice_l*Days/365);
       sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(line.hiddenPrice_l,precision)),"|");
       //added new variable for Jira#1617
       listPrice = string(round(line.hiddenPrice_l,precision));
      }
      if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
         partPrice=util.subscriptionPriceCalculation_brcm(partnumber,basePrice,StartDate,EndDate,_system_current_document_currency_pref);
         
         //partPrice1=round(atof(partPrice)*(365.0/days),precision);
         //partPrice=string(partPrice1*(days/365.0));
         
         //final_price=String(atof(partPrice)*atof(exch));
          /*BROCAD2-4748*/
          unitMSRP=(round(atof(base_price1)*sub_factor*atof(exch),precision))*(days/365.0);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",final_price,"|");
         sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
         sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
      }
     }

     param_per_unit_per_list_price = (line.hiddenPrice_l+line.hiddenPrice_l*upliftfactor)*atof(exch); 



     //final_price=String(line.hiddenPrice_l+line.hiddenPrice_l*upliftfactor*atof(exch));
     //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
     //output4=sbtostring(sb4);

    }
    //}
   }
  //}
  //salesmin and PromotionalSetup
  //changes added as part of BROCAD2 - 1617
  mpn_var=line._part_number;
  //final_price=string(round(atof(final_price),precision));
  final_price1 = final_price;
  
  if(trim(coveredpdt) <> "")
  {
   mpn_var = coveredpdt;
   
   if(trim(salesminprice) <> "")
    {
     final_price1=listPrice;
    }
  }
  salesMinl_var=0.0;
  salesMin2_var=0.0;
  salesMin3_var=0.0;
  promotion_type="Single";
  min_qty=line._price_quantity;
  promotion_req="N";
  
  
  res = bmql("select Sales_Min3,Sales_Min2,Sales_Min1,Start_Date,End_Date from BRCM_Part_Master_Prc where MPN = $mpn_var ORDER BY Start_Date ASC");
  for rec in res 
  {
   salesMinl_var = getfloat(rec,"Sales_Min1");
   salesMin2_var = getfloat(rec,"Sales_Min2");
   salesMin3_var = getfloat(rec,"Sales_Min3");

   if(get(rec,"Start_Date")<>"" AND get(rec,"End_Date")<>"")
   {
    salesMinl_var = (100-salesMinl_var)* atof(final_price1)/ 100;

    salesMin2_var = (100-salesMin2_var)* atof(final_price1) / 100;

    salesMin3_var = (100-salesMin3_var)* atof(final_price1) / 100;

   }
  }
  results4=bmql("select Promotion_Enabled from BRCM_Part_Master_Ext where MPN=$mpn_var");
  for res3 in results4
  {
   promotion_req=get(res3,"Promotion_Enabled");
  }

  if(promotion_req=="Y")
  {

   results2 = bmql("select Sales_Min1,Sales_Min2,Sales_Min3,Start_Date,End_Date,Promotion_Type,Minimum_Qty from BRCM_Promotion_Tb where MPN=$mpn_var");
   for result3 in results2 
   {
    if(strtojavadate(get(result3,"Start_Date"),"dd/MM/yyyy") <= Curr_date AND strtojavadate(get(result3,"End_Date"),"dd/MM/yyyy") >= Curr_date )
    {
     if(findinarray(mpn_arraymulti,mpn_var)<>-1 AND get(result3,"Promotion_Type")=="Multi")
     {

      if(atoi(get(result3,"Minimum_Qty")) > min_qty)
      {
       min_qty=atoi(get(result3,"Minimum_Qty"));
      }
      salesMinl_var=atof(get(result3,"Sales_Min1"));
      salesMinl_var= (100 - salesMinl_var) * atof(final_price1) / 100;
      salesMin2_var=atof(get(result3,"Sales_Min2"));
      salesMin2_var= (100 - salesMin2_var) * atof(final_price1)/ 100;
      salesMin3_var=atof(get(result3,"Sales_Min3"));
      salesMin3_var= (100 - SalesMin3_var) *atof(final_price1)/ 100;
     }
     else
     {

      if(get(result3,"Promotion_Type")=="Single" AND findinarray(mpn_arraymulti,mpn_var)==-1)
      {
       if(atoi(get(result3,"Minimum_Qty")) > min_qty)
       {
        min_qty=atoi(get(result3,"Minimum_Qty"));
       }
       salesMinl_var=atof(get(result3,"Sales_Min1"));
       salesMinl_var= (100 - salesMinl_var) * atof(final_price1)/ 100;
       salesMin2_var=atof(get(result3,"Sales_Min2"));
       salesMin2_var= (100 - salesMin2_var) * atof(final_price1)/ 100;
       salesMin3_var=atof(get(result3,"Sales_Min3"));
       salesMin3_var= (100 - SalesMin3_var) *atof(final_price1)/ 100;
      }
     }
    }

   }
  }
  //End of SalesMin and Setup
  //Calling Eligible Discounts Calculator
  documentnum=line._document_number;
  partNumber  = line._part_number;
  teststring=line._line_item_comment;
  //env_selected=line.enterEnvironment_l;
  quantity = min_qty;
  //Changes made as per VIPER - 304 - added condition to compare support term days attribute value with its previous value. 
  //Changes made as per VIPER - 304 - If there is any change in Term days value then this additional codition will allow control to go inside the condition and calculate Ext. Contract/List Price accordingly.
  
  if((getoldvalue("totalNewSupportTermDays_l",atoi(line._document_number))<>String(Days)) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(line._price_quantity)) OR (getoldvalue("enterEnvironment_l",atoi(line._document_number))<>line.enterEnvironment_l) OR (getoldvalue("_line_item_comment",atoi(line._document_number))<>line._line_item_comment) or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))<>final_price) OR (line.requestedQuantity_l<>min_qty)  OR (getoldvalue("extContractListPrice_l",atoi(line._document_number))=="0"))
  {
   if(coveredpdt <> ""){
    partNumber = line.coveredProduct_l;
   }
   if(teststring<>"")
   {
    obj=json(teststring);
    child=jsonget(obj,"child");
    childObj=json(child);
    env_selected=jsonget(childObj,"enterEnvironment");
    PartNum=jsonget(obj,"PartNumber");
    supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
    if (line._part_number == supportPartsPicklist)
    {
     partNumber=PartNum;
    }
   }
   
   
   //To calculate Ext Contract/List Price
   ExtListPrice = commerce.eligibleDiscounts_brcm(final_price,partNumber,env_selected,quantity);
   
   
   
   if(line._part_number<>"")
   {
    sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
    sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");                                             
    //output5=sbtostring(sb5);
    totalExtPrice = totalExtPrice + ExtListPrice;
   }
  }
  else
  {
   if(line._part_number<>"")
   { ExtListPrice = line.extContractListPrice_l;
   sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
   sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");                                            
   //output5=sbtostring(sb5);
   totalExtPrice = totalExtPrice + ExtListPrice;
   }
  }
  //Calling Requested Discounts Calculator
  starttime=getcurrenttimeinmillis();
  requestedDiscount=line.requestedDiscount_l;
  
  //To Calculate Requested Discount and Ext Proposed Net Unit Price
  if(final_price<>"0.0" AND round(requestedDiscount,0)==round(line.customDiscountValue_l,0) AND line.proposedNetUnitPriceRequested_l<>0.0 AND round(line.proposedNetUnitPriceRequested_l,4)<>round(line.proposedNetPriceRequestedHidden_ct,4) /*AND (line.hiddenProposedPrice_l == -1)*/){
   if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
    requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l*(Days/365.0),precision))*100/(round(ExtListPrice/quantity,precision)); 
   }
   else{
    requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l,precision))*100/(round(ExtListPrice/quantity,precision));
   }
   proposedPrice = round(ExtListPrice - ((ExtListPrice * requestedDiscount)/100),precision);
  }
  //elif(final_price<>"0.0" AND ((getoldvalue("extContractListPrice_l",atoi(line._document_number))<>string(ExtListPrice)) OR (getoldvalue("requestedDiscount_l",atoi(line._document_number))<>string(requestedDiscount)) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(quantity)))){
   //proposedPrice=round(commerce.calculateProposedPrice_brcm(ExtListPrice,quantity,requestedDiscount),precision);
  //}
  else{
   proposedPrice=round(commerce.calculateProposedPrice_brcm(ExtListPrice,quantity,requestedDiscount),precision);
  }
   //added the comparison of requested discount and custom discount so that import/export proposed price do not affect discounts 
   //and proposed price for EURO and other currencies that have "," instead of "."
  
   if(line.hiddenProposedPrice_l <> -1 AND round(requestedDiscount,0)<>round(line.customDiscountValue_l,0))
    { 
    if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
    
     if(quantity <> 0 and round(ExtListPrice,4) <> 0.0 AND round(line.requestedDiscount_l,0)==round(line.customDiscountValue_l,0)){
      if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
      
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l*(Days/365.0),precision))*100/(round(ExtListPrice/quantity,precision)); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity*(Days/365.0),precision);
      
      
      }else{
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l,precision))*100/(round(ExtListPrice/quantity,precision)); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity,precision);
      
      }
     }
     
     sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");
    }
   sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");  //Placed outside to set for all scenarios
  
  //Changes made as per VIPER-355  -  Added additional conditions to handle zero priced products based on license type or covered product
  if(final_price=="0" or final_price =="0.0000" or final_price =="0.0"){
   if(round(atof(final_price),0) == 0 and round(ExtListPrice,0)==0){
    if(licensetype=="Subscription" or coveredpdt<>"")
    {
     proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity*(Days/365.0),precision);
     requestedDiscount=0;
    }
    else{
     proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity,precision);
     requestedDiscount=0;
    }

   }
  }
  if(line._model_name == "")
  {
   if(atof(exch) <> 0){
    totalUSD= totalUSD + (proposedPrice/atof(exch));
   }
   total=total+round(proposedPrice,precision);
   if(coveredpdt <> ""){
    totalMaintenanceFee = totalMaintenanceFee + round(proposedPrice,precision);
    if(quoteType_t == "renewalQuote" and line.dropProduct_l == true){
     totalMaintenanceFee = totalMaintenanceFee - round(proposedPrice,precision);
    }
   }
   else{
    totalLicenseFee = totalLicenseFee + round(proposedPrice,precision);
    if(quoteType_t == "renewalQuote" and line.dropProduct_l == true){
     totalLicenseFee = totalLicenseFee - round(proposedPrice,precision);
    }
    //sb6=stringbuilder(sb6,line._document_number,"~totalFee_l~",string(round(proposedPrice,precision)),"|");
   }
   /*
   if(line.fulfillmentSet_l <> "" and line.fulfillmentSet_l == fulfillmentSet and coveredpdt <> ""){
    totalFee = totalFee + round(proposedPrice,precision);
    sb6=stringbuilder(sb6,string((atoi(line._document_number)-1)),"~totalFee_l~",string(totalFee),"|");
   }
   else{
    fulfillmentSet = line.fulfillmentSet_l;
    totalFee = round(proposedPrice,precision);
   }
   */
   //To Calculate Proposed Net Unit Price
   if(licensetype=="Subscription" or coveredpdt<>"")
   {
    
    TermsDays = 0.0;
    TermsDays=getdiffindays(StartDate,EndDate)+1.0;
    DivFactor=TermsDays/365.0;
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
   }
    
   else 
   {
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round(proposedPrice/min_qty,precision)),"|");
    
    //output6=sbtostring(sb6);
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round(proposedPrice/min_qty,precision)),"|");
    //output7=sbtostring(sb7);
   }
   if(requestedDiscount<=0 AND round(atof(final_price),4) == 0){
    requestedDiscount=0;
   }
   sb8=stringbuilder(sb8,line._document_number,"~requestedDiscount_l~",string(requestedDiscount),"|");
   sb9=stringbuilder(sb9,line._document_number,"~extProposedNetPriceRequested_l~",string(proposedPrice),"|");
   //output9=sbtostring(sb9);
   endtime=getcurrenttimeinmillis();
   logtime("proposed price block",endtime-starttime);
   // Adding changes for New Annual Renewal
   sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,proposedPrice,line._document_number,line._part_number,line._model_name,line.contractEndDate_l,line.contractStartDate_l,line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));
   //output9a=sbtostring(sb9a);
   lineDiscount = atof(final_price) - proposedPrice/min_qty;
   if(atof(exch) <> 0) {
    sb10=stringbuilder(sb10,line._document_number,"~totalValueUSD~",string(proposedPrice/atof(exch)),"|");
    //output10=sbtostring(sb10);
   }
   sb11=stringbuilder(sb11,line._document_number,"~lineDiscountAmount_l~",string(lineDiscount),"|");
   //output11=sbtostring(sb11);
   sb12=stringbuilder(sb12,line._document_number,"~customDiscountValue_l~",string(requestedDiscount),"|", line._document_number, dlim, "unitMSRP_l", dlim, string(unitMSRP), dend, line._document_number, dlim, "uplift_l", dlim, string(upliftfactor*100), dend);
   //output12=sbtostring(sb12);
   param_proposed_net_unit_price_requested = proposedPrice/min_qty;
   extLineDiscount = ExtListPrice - proposedPrice;
   if(requestedDiscount<=0){
    extLineDiscount=0;
   }


   sb13=stringbuilder(sb13,line._document_number,"~extLineDiscountAmount_l~",string(extLineDiscount),"|");
   //output13=sbtostring(sb13);
   if(string(line.approverRecommendedNetUnitPrice_l) <> "")
   {
    param_approver_recc_net_unit_price = line.approverRecommendedNetUnitPrice_l;
    param_approver_ext_recc_net_unit_price = param_approver_recc_net_unit_price * min_qty;
   }
   sb14=stringbuilder(sb14,line._document_number,"~approverRecommendedExtNetPrice_l~",string(param_approver_ext_recc_net_unit_price),"|");
   //output14=sbtostring(sb14);
   sm1 = round(salesMinl_var,precision);
   sb15=stringbuilder(sb15,line._document_number,"~salesMin1_l~",string(sm1),"|");
   //output15=sbtostring(sb15);
   sm2 = round(salesMin2_var,precision);
   sb16=stringbuilder(sb16,line._document_number,"~salesMin2_l~",string(sm2),"|");
   //output16=sbtostring(sb16);
   sm3 = round(salesMin3_var,precision);
   sb17=stringbuilder(sb17,line._document_number,"~salesMin3_l~",string(sm3),"|");
   //output17=sbtostring(sb17);
   sb18=stringbuilder(sb18,line._document_number,"~_price_quantity~",string(min_qty),"|");
   //output18=sbtostring(sb18);
   sb18=stringbuilder(sb18,line._document_number,"~requestedQuantity_l~",string(min_qty),"|");
   //output18=sbtostring(sb18);

   if(Contract_no=="NA"){
    sb19=stringbuilder(sb19,line._document_number,"~contractNumber_l~","","|");
   }
   else
   {
    sb19=stringbuilder(sb19,line._document_number,"~contractNumber_l~",Contract_no,"|");
   }

   //output19=sbtostring(sb19); 

  }
  if(line.dropProduct_l == true)
  {
   sb20=stringbuilder(sb20,line._document_number,"~proposedNetUnitPriceRequested_l~",string(0),"|");
   //output20=sbtostring(sb20);
   sb21=stringbuilder(sb21,line._document_number,"~extProposedNetPriceRequested_l~",string(0),"|");
   //output21=sbtostring(sb21);

   // Adding changes for New Annual Renewal
   sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,0.0,line._document_number,line._part_number,line._model_name,line.contractEndDate_l,line.contractStartDate_l,line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));
   //output9a=sbtostring(sb9a);

   totalUSD = totalUSD - (proposedPrice/atof(exch));
   total=total-proposedPrice;
  }
  }

  //merge approval flag
  //Satyabrata Acharya; //VIPER-438 ; Satyabrata Acharya ; Adding the  code to make installed at fields editable;
   
    sb20=stringbuilder(sb20,line._document_number,"~installedAtCustomerNumber_l~",line.installedAtCustomerNumber_l,"|");
    sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",line.siteID_l,"|");
    sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",line.siteIDStreetAddress_l,"|");
    sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",line.siteIDCityStateZip_l,"|");
    sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",line.siteIDZip_l,"|");
  //end of code
   

  flag = true;
  part=line._part_number;

  if(part <> ""  and line._part_number <> "Cust")
  {
   if(quoteType_t == "renewalQuote" and upper(line.transactionTypeM_l) <> "NEW"  and line.transactionTypeM_l <> "")
   {
    flag = true;
    sb1=stringbuilder(sb1,result,line._document_number, "~approvalFlag_l~", String(flag), "|");
    //result=sbtostring(sb1);
   }
   else
   {
    CustomerAccountArray = String[]{Customer,BillTo,EndCust};
    resultset=bmql("SELECT MPN,Item_Price FROM BRCM_Cust_Pricelist WHERE MPN= $part AND Customer_Account_No IN $CustomerAccountArray");
    for res1 in resultset
    {
     price = get(res1,"Item_Price");
     if(price <> "")
     {
      flag = false;
     }
    }
    if(flag == false)
    {
     if(line.requestedDiscount_l <> 0.0)
     {
      flag = true;
     }
    }
    if(flag == true)
    {
     if( line.noBid_l == true)
     {
      flag = false;
     }
    }
    if(flag and part == "Cust")
    {
     flag = false;
    }
    if(propPrice > 0 and atof(final_price) == 0)
    {
     flag = true;
    }
    sb1=stringbuilder(sb1,result,line._document_number, "~approvalFlag_l~", String(flag), "|");
    //result=sbtostring(sb1);
   }
   if((flag and propPrice < line.salesMin1_l) or (flag and propPrice > 0 and atof(final_price) == 0))
   {
    approveFlag = true;
   } 
   if(dDRFlag == false)
   {
    if(startswith(line.isDiscountable_l,"N"))
    {
     dDRFlag = true;
    }
    resultset = bmql("select Restricted from BRCM_Part_Master_Prc where MPN = $part");
    restFlag = "";
    for record in resultset 
    {
     restFlag = get(record,"Restricted");
    } 
    if(restFlag == "Y")
    {
     dDRFlag = true;
    }
   }
  }
  //end merge

}
 }
 
 sb = sbappend(sb,sb1,sb2,sb3,sb4,sb5,sb6,sb7,sb9, sb9a,sb8,sb10,sb11,sb12,sb13,sb14,sb15,sb16,sb17,sb19,sb18,sb20,sb21,sb29,sb30,sb31,sb32,sb23,sb24,sb25,sb27,result);
 result= sbtostring(sb);
 
}

//Contract Quote Logic
if(quoteType_t=="contractQuote")
{
 for line in transactionLine
 {   
   
  
  licensetype=line.licenseType_l;
  //constraint rule :Constrain Education Line Items; kacharya
  if(find(QuoteDealType, searchString) >= 0)
  {
   if(line._part_number <> "")
   {
    if(not containsKey(parentPartDictionary,line._part_number))
    {
     put(parentPartDictionary, line._part_number, line._price_quantity);
    }
   }
  }
  lineold=getoldvalue("_line_item_comment",atoi(line._document_number));
  contractenddateold=getoldvalue("contractEndDate_l",atoi(line._document_number));
  contractstartdateold=getoldvalue("contractStartDate_l",atoi(line._document_number));
  coveredold=getoldvalue("coveredProduct_l",atoi(line._document_number));
  licenseold=getoldvalue("licenseType_l",atoi(line._document_number));
  //if(line.lineItemComment_avg<>line._line_item_comment){
   if(line._line_item_comment<>"" and line._part_number<>"Cust")
   {
    sb1=stringbuilder(sb1,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchConfigAttributesFromCommerce_brcm(line._document_number, line._part_number, line._line_item_comment, line.effectiveStartDate_l, line.lineExpirationDate_l, line._model_name));
    //output1=sbtostring(sb1);
   }
  //}
  if(billToCustomerId_t=="" or soldToCustomerAccountID_t=="" or shipToPartyID_t=="" or _transaction_customer_id=="" or line.lineItemComment_avg<>line._line_item_comment){
   if(line._part_number=="Cust" AND line._model_name==""){ 
    sb2=stringbuilder(sb2,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchCustomerSearchDetails_brcm(line._model_name, line._part_number, line._line_item_comment));
    //output2=sbtostring(sb2);
   }
  }
  //Condition for Defer Pricing Logic (Currently not in use)
  if(avoidPricingCalculations_t == false){
  min_qty=line._price_quantity;
  final_price="0";
  if(line._part_number<>"Cust" AND line._model_name==""){
   coveredProduct_l=line.coveredProduct_l;
   if(quoteType_t=="contractQuote")
   {
    effectivestartDate=strtojavadate(line.effectiveStartDate_l,"yyyy-MM-dd HH:mm:ss");


    //for each in mpn_array
    // {

    i=0;
    find_var=findinarray(mpn_array,line._part_number);
    append(mpn_array,line._part_number);
    if(find_var<>-1)
    {

     if(comparedates(effectivestartDate,effectivestartDate_array[i])==0 and cpn_array[i]==line.cPN_l) 
     {

      ret = "true";
     }  
     //}
     i=i+1;
    }
    //append(mpn_array,line._part_number);
    append(effectivestartDate_array,effectivestartDate);
    append(cpn_array,line.cPN_l);


    sb3=stringbuilder(sb3,"1" , dlim , "contractDateValidation_avg" , dlim , ret , dend);
    //output3=sbtostring(sb3);
   }
   supportType_l=line.supportType_l;
   accountbuilder=stringbuilder(_transaction_customer_id,"~",billToCustomerId_t,"~",_transaction_customer_id , "~" , endCustomerParentId_avg , "~" , endCustomerGrandParentId_avg , "~" , line.cPN_l , "~" ,line.effectiveStartDate_l , "~" , line.effectiveStartDate_l , "~" , routeToMarket_t , "~" , billToParentId_avg ,"~" , billToGrandParentId_avg , "~" , quoteType_t);
   AccountNums=sbtostring(accountbuilder);
   if(line.contractStartDate_l<>"" )
   {
    StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
   }
   if(line.contractEndDate_l<>"" ){
    EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
   }
   
   final_price=string(line.perUnitPerListPrice_l);
   if(line.hiddenPrice_l==0.0)
   {
    if(line._price_list_price_each==0.0)
    {if(getoldvalue(routeToMarket_t)<>routeToMarket_t or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.00") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0") OR (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.0000") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="") or (getoldvalue("contractEndDate_l",atoi(line._document_number))<>line.contractEndDate_l) OR (getoldvalue("contractStartDate_l",atoi(line._document_number))<>line.contractStartDate_l) OR (getoldvalue("coveredProduct_l",atoi(line._document_number))<>line.coveredProduct_l) OR (getoldvalue("licenseType_l",atoi(line._document_number))<>line.licenseType_l))
    {
     if(line.coveredProduct_l=="")
     {

      Days=getdiffindays(StartDate,EndDate)+1;
      partnumber=line._part_number;

      subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
      for res2 in subset1{
       if(get(res2 ,"Start_Date")<>"" and get(res2 ,"End_Date")<>"")
       {
        if(strtojavadate(get(res2 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res2 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
        {

         Contract_no="NA";
         contractdetials=string[2];
         put(partNoDict,"Item1",partnumber);

         partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
         if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l==""){

          if(find(get(partPriceDict,"Item1"),"~")<>-1)
          {
           contractdetials= split(get(partPriceDict,"Item1"), "~");
           Contract_no=contractdetials[1];
          }
          else
          {
           contractdetials[0]=get(partPriceDict,"Item1");
           Contract_no="NA";
          }
          partPrice=string(atof(contractdetials[0])*atof(exch));


          final_price=String(round(atof(partPrice),precision));
          sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
          //added new variable for Jira#1617
          listPrice = string(round(atof(final_price),precision));
          //output4=sbtostring(sb4);

         }
        }
       }
      }
     }
     /*******************************************************************************
      * Calculation of Contract/List Unit Price for Standalone Support/Maintenance
      * SKUs
      ******************************************************************************/
     else
     {
      Days=getdiffindays(StartDate,EndDate)+1;

      basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredProduct_l");
      supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType_l");
      subset=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredProduct_l ORDER BY Start_Date ASC");
      for res2 in basepriceset{
       Division=get(res2,"Business_Div");
      }
      for res1 in subset{
       if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
       {              basePrice=get(res1,"Base_Price");
       NDP=atof(get(res1,"Base_Support_Value"));


       }
      }
      if(Division=="CAD" or Division=="SED")
      {
       Contract_no="NA";
       contractdetials=string[2];
       put(partNoDict,"Item1",coveredProduct_l);
       partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
       if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l==""){

        if(find(get(partPriceDict,"Item1"),"~")<>-1)
        {
         contractdetials= split(get(partPriceDict,"Item1"), "~");
         Contract_no=contractdetials[1];
        }
        else
        {
         contractdetials[0]=get(partPriceDict,"Item1");
         Contract_no="NA";
        }

        partPrice=string(atof(contractdetials[0])*atof(exch));


       }

       For outputs in supportset{

        supp_rate=atof(get(outputs,"Support_Rate"));
        if(partPrice<>""){
         supp_price=String((round(atof(partPrice)*supp_rate,precision))*NDP*Days/365);

        }

        final_price=String(atof(supp_price));
        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(supp_price)*365/Days,precision)),"|");
        //added new variable for Jira#1617
        listPrice = String(round(atof(supp_price)*365/Days,precision));

       }
      }
      elif(Division=="BSN"){
       For outputs in supportset{
        supp_rate=atof(get(outputs,"Support_Rate"));
        supp_price=String((atof(basePrice)*supp_rate)*NDP);

        final_price=String(atof(supp_price)*atof(exch));
        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(basePrice)*atof(exch),precision)),"|");
        //added new variable for Jira#1617
        listPrice = String(round(atof(basePrice)*atof(exch),precision));
        //output4=sbtostring(sb4);
       }
      }
      //}

     }
    }
    }
    /** ************************************************************************************ */
    else
    {

     if(line._model_name=="" AND line._parent_doc_number<>""){

      final_price=String(line._price_list_price_each);
      sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(line._price_list_price_each,precision)),"|");
      //added new variable for Jira#1617
      listPrice = String(round(line._price_list_price_each,precision));
      //output4=sbtostring(sb4);
      param_per_unit_per_list_price = line._price_list_price_each;
      coveredpdt=line.coveredProduct_l;
      licensetype=line.licenseType_l;
      supportType=line.supportType_l;
      obj=json();
      if(line._line_item_comment<>"")
      {
       teststring=line._line_item_comment;
       obj=json(teststring);
       child=jsonget(obj,"child");
       childObj=json(child);
       PartNumber=jsonget(obj,"PartNumber");
       licensetype=jsonget(childObj,"selectLicenseType");
       supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
       supportType=jsonget(childObj,"supportType");
       transactionTypeM=jsonget(childObj,"transactionType");
       if (line._part_number == supportPartsPicklist)
       {
        coveredpdt=PartNumber;
       }

       if(jsonget(childObj,"startDate")<>"" ){
        StartDate=strtojavadate(jsonget(childObj,"startDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }

       if(jsonget(childObj,"endDate")<>"" ){
        EndDate=strtojavadate(jsonget(childObj,"endDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }
      }

      //For running the pricing logic for items added using configurator
      if(coveredpdt=="")
      {
       if(line.contractStartDate_l<>"" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l<>"" ){
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
       partnumber=line._part_number;

       subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for res2 in subset1{
        if(get(res2 ,"Start_Date")<>"" and get(res2 ,"End_Date")<>"")
        {
         if(strtojavadate(get(res2 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res2 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
         {

          Contract_no="NA";
          contractdetials=string[2];
          put(partNoDict,"Item1",partnumber);

          partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
          if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

           if(find(get(partPriceDict,"Item1"),"~")<>-1)
           {
            contractdetials= split(get(partPriceDict,"Item1"), "~");
            Contract_no=contractdetials[1];
           }
           else
           {
            contractdetials[0]=get(partPriceDict,"Item1");
            Contract_no="NA";
           }
           partPrice=string(atof(contractdetials[0])*atof(exch));


           final_price=String(round(atof(partPrice),precision));
           sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
           //added new variable for Jira#1617
           listPrice = string(round(atof(final_price),precision));
           //output4=sbtostring(sb4);

          }

         }
        }
       }
      }
      /*******************************************************************************
       * Calculation of Contract/List Unit Price for Support/Maintenance
       * SKUs
       ******************************************************************************/
      else
      {

       Days=getdiffindays(StartDate,EndDate)+1;
       basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredpdt");
       supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType");
       subset=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date from BRCM_Part_Master_Prc WHERE MPN=$coveredProduct_l ORDER BY Start_Date ASC");
       for res2 in basepriceset{
        Division=get(res2,"Business_Div");
       }
       for res1 in subset{
        if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
        {              basePrice=get(res1,"Base_Price");
        NDP=atof(get(res1,"Base_Support_Value"));


        }
       }
       if(Division=="CAD" or Division=="SED")
       { 
        Contract_no="NA";
        contractdetials=string[2];
        put(partNoDict,"Item1",coveredpdt);
        partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         partPrice=string(atof(contractdetials[0])*atof(exch));


        }

        For outputs in supportset{

         supp_rate=atof(get(outputs,"Support_Rate"));
         if(partPrice<>""){
          supp_price=String((round(atof(partPrice)*supp_rate,precision))*NDP*Days/365);

         }

         final_price=String(atof(supp_price));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(supp_price)*365/Days,precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(supp_price)*365/Days,precision));
         //output4=sbtostring(sb4);
        }
       }
       elif(Division=="BSN"){
        For outputs in supportset{
         supp_rate=atof(get(outputs,"Support_Rate"));
         supp_price=String((atof(basePrice)*supp_rate)*NDP);

         final_price=String(atof(supp_price)*atof(exch));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(basePrice)*atof(exch),precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(basePrice)*atof(exch),precision));
         //output4=sbtostring(sb4);
        }
       }
      }
      //End of code
     }
    }
   }
   else
   { if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
   if(licenseType=="Subscription" or coveredpdt<>""){
     final_price=String(line.hiddenPrice_l*(Days/365.0));
   }
   else{
     final_price=String(line.hiddenPrice_l);
   }
   partNo=line._part_number;
   sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(line.hiddenPrice_l,precision)),"|");
   //added new variable for Jira#1617
   listPrice = String(round(line.hiddenPrice_l,precision));
   //output4=sbtostring(sb4);

   }


   //Calling Eligible Discounts Calculator
   documentnum=line._document_number;
   partNumber  = line._part_number;
   teststring=line._line_item_comment;
   env_selected=line.enterEnvironment_l;
   //coveredpdt=line.coveredProduct_l;
   quantity = min_qty;
   
   //To calculate Ext Contract/List Price
   ExtListPrice =atof(final_price)*quantity;
   if((getoldvalue("enterEnvironment_l",atoi(line._document_number))<>line.enterEnvironment_l) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(line._price_quantity)) OR (getoldvalue("_line_item_comment",atoi(line._document_number))<>line._line_item_comment) or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))<>final_price) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(min_qty))  OR (getoldvalue("extContractListPrice_l",atoi(line._document_number))=="0"))
   {
    if(line._part_number<>"")
    { sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
    sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");
    totalExtPrice = totalExtPrice + ExtListPrice;
    }
   }
   else{
    if(line._part_number<>"")
    { ExtListPrice = line.extContractListPrice_l;
    sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
    sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");
    totalExtPrice = totalExtPrice + ExtListPrice;
    }
   }

   //Calling Requested Discounts Calculator
   requestedDiscount=line.requestedDiscount_l;
   
   //To Calculate Requested Discount and Ext Proposed Price
   if(final_price<>"0.0" AND round(requestedDiscount,0)==round(line.customDiscountValue_l,0) AND line.proposedNetUnitPriceRequested_l<>0.0 AND round(line.proposedNetUnitPriceRequested_l,4)<>round(line.proposedNetPriceRequestedHidden_ct,4) /*AND (line.hiddenProposedPrice_l == -1)*/){
    if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
     requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l*(Days/365.0),precision))*100/(round(ExtListPrice/quantity,precision)); 
    }
    else{
     requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l,precision))*100/(round(ExtListPrice/quantity,precision));
    }
    proposedPrice = round(ExtListPrice - ((ExtListPrice * requestedDiscount)/100),precision); 
   }
   
   
   
   if(line._model_name == "")
   {//if((getoldvalue("extProposedNetPriceRequested_l",atoi(line._document_number))<>string(ExtListPrice)) or (getoldvalue("requestedDiscount_l",atoi(line._document_number))<>string(requestedDiscount)) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(quantity))){
    proposedPrice=round(commerce.calculateProposedPrice_brcm(ExtListPrice,quantity,requestedDiscount),precision);
   //}else{
    //proposedPrice=line.extProposedNetPriceRequested_l;

   //}
   //added the comparison of requested discount and custom discount so that import/export proposed price do not affect discounts 
   //and proposed price for EURO and other currencies that have "," instead of "."
   
   if(line.hiddenProposedPrice_l <> -1 AND round(requestedDiscount,0)<>round(line.customDiscountValue_l,0))
    { 
    if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       Days=getdiffindays(StartDate,EndDate)+1;
    
     if(quantity <> 0 and round(ExtListPrice,4) <> 0.0 AND round(line.requestedDiscount_l,0)==round(line.customDiscountValue_l,0)){
      if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
      
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l*(Days/365.0),precision))*100/(round(ExtListPrice,precision)/quantity); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity*(Days/365.0),precision);
      
      
      }else{
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l,precision))*100/(round(ExtListPrice/quantity,precision)); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity,precision);
      
      }
     }
     
     sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");
    }
    
   //Changes made as per VIPER-355  -  Added additional conditions to handle zero priced products based on license type or covered product
   if(final_price=="0" or final_price =="0.0000" or final_price =="0.0"){
    if(round(atof(final_price),0) == 0 and round(ExtListPrice,0)==0){

     if(licensetype=="Subscription" or coveredpdt<>"")
     {
      proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity*(Days/365.0),precision);
      requestedDiscount=0;
     }
     else{
      proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity,precision);
      requestedDiscount=0;
     }    
    }
   }
    
   sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");  //Placed outside to set for all scenarios
   totalUSD=totalUSD + (proposedPrice/atof(exch));
   if(coveredpdt <> ""){
    totalMaintenanceFee = totalMaintenanceFee + round(proposedPrice,precision);
   }
   else{
    totalLicenseFee = totalLicenseFee + round(proposedPrice,precision);
    //sb6=stringbuilder(sb6,line._document_number,"~totalFee_l~",string(round(proposedPrice,precision)),"|");
   }
   /*
   if(line.fulfillmentSet_l <> "" and line.fulfillmentSet_l == fulfillmentSet and coveredpdt <> ""){
    totalFee = totalFee + round(proposedPrice,precision);
    sb6=stringbuilder(sb6,string((atoi(line._document_number)-1)),"~totalFee_l~",string(totalFee),"|");
   }
   else{
    fulfillmentSet = line.fulfillmentSet_l;
    totalFee = round(proposedPrice,precision);
   }
   */
   //To Calculate Proposed Net Unit Price
   if(licensetype=="Subscription" or coveredpdt<>"")
    {
    
    TermsDays = 0.0;
    TermsDays=getdiffindays(StartDate,EndDate)+1.0;
    DivFactor=TermsDays/365.0;
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
    }
    
   else 
    {
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round(proposedPrice/min_qty,precision)),"|");
    
    //output6=sbtostring(sb6);
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round(proposedPrice/min_qty,precision)),"|");
    //output7=sbtostring(sb7);
    }
   if(requestedDiscount<=0 and round(atof(final_price),0) == 0){
    requestedDiscount=0;
   }
   sb8=stringbuilder(sb8,line._document_number,"~requestedDiscount_l~",string(requestedDiscount),"|");
   //output8=sbtostring(sb8);
   sb9=stringbuilder(sb9,line._document_number,"~extProposedNetPriceRequested_l~",string(proposedPrice),"|");
   //output9=sbtostring(sb9);

   // Adding changes for New Annual Renewal
   sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,proposedPrice,line._document_number,line._part_number,line._model_name,line.contractEndDate_l,line.contractStartDate_l,line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));
   //output9a=sbtostring(sb9a);

   lineDiscount = atof(final_price) - proposedPrice/min_qty;
   if(requestedDiscount<=0){
    lineDiscount=0;
   }
   }
   sb10=stringbuilder(sb10,line._document_number,"~lineDiscountAmount_l~",string(lineDiscount),"|");
   //output10=sbtostring(sb10);
   sb11=stringbuilder(sb11,line._document_number,"~customDiscountValue_l~",string(requestedDiscount),"|");
   //output11=sbtostring(sb11);
   if(requestedDiscount<=0){
    extLineDiscount=0;
   }
  }
 }
 }
 sb = sbappend(sb,sb1,sb2,sb3,sb4,sb5,sb6,sb7,sb9, sb9a, sb8,sb10,sb11,result);
 result= sbtostring(sb);
}
//result= sbtostring(sb);
//merge approval flag
if(NOT startswith(dealType_t,"bSN"))
{
 dDRFlag = false;
}
//BROCAD-5278
/*if(renewalFlag)
{
//BROCAD2-3504-BEGIN
 if(aRR_t >= 99.7)
//BROCAD2-3504-END
 {
  renewalFlag = false;
 }
}*/
if(capacityFlag and NOT capacityDeviation_t)
{
 capacityFlag = false;
}

//validation rule: Validate Support Types on Line Items; adithya
sb2=stringbuilder(result,"1~validateSupportTypesOnLineItemsFlag_t~",string(validateSupportTypesOnLineItemsFlag),"|");
result=sbtostring(sb2);

//validation rule: Validate Covered Products On Lines; adithya
coveredPartArray = keys(coveredProductDictionary);
resultSet = bmql("select MPN,Support_Required from BRCM_Part_Master_Ext where MPN IN $coveredPartArray");
countOfRecords = 0;
for each_record in resultSet
{
 countOfRecords = countOfRecords + 1;
 part_number = get(each_record,"MPN");
 put(coveredProductsFromTableDictionary,part_number,part_number);
}
noOfProducts = sizeofarray(coveredPartArray);
if(countOfRecords <> noOfProducts)
{
 sb=stringbuilder(sb,"1~validateCoveredProductsOnLinesFlag_t~","true","|");
}
else{
 sb=stringbuilder(sb,"1~validateCoveredProductsOnLinesFlag_t~","false","|");
}

//constrain : Constrain Education Line Items
if(find(QuoteDealType, searchString) >= 0)
{
 parentPartArray = keys(parentPartDictionary);
 yesLiteral = "Y";
 resultSet = bmql("select MPN,Support_Required from BRCM_Part_Master_Ext where MPN IN $parentPartArray and Support_Required = $yesLiteral");
 count = 0;
 for record in resultSet
 {
  count = count + 1;
 }
 if(count <> 0){
  validation="true";
 }
}

sb=stringbuilder(result,commerce.updateBillingSchedule2(totalMaintenanceFee, totalLicenseFee), "1" , dlim , "totalValueUSD_t" , dlim , string(totalUSD) , dend, "1" , dlim , "totalValueUSDFloat_t" , dlim ,string(totalUSD) , dend, "1" , dlim , "totalProposedNetPriceLC_t" , dlim , string(total) , dend, "1" , dlim , "totalProposedNetPriceUSD_t" , dlim , string(totalUSD) , dend, "1" , dlim , "totalProposedNetPriceUSDFloat_t" , dlim , string(totalUSD) , dend,"1~totalExtListPrice_t~",string(totalExtPrice),"|","1~errorLines_t~",errorLines,"|","1~constrainEducationLineItems_t~",validation,"|", "1~capacityApprovalFlag_t~", String(capacityFlag), "|", "1~lineApprovalFlag_t~", String(approveFlag), "|", "1~dDRFlag_t~", String(dDRflag), "|",  "1~getTotalLicenseFee_t~", String(totalLicenseFee), "|", "1~getTotalMaintanenceFee_t~", String(totalMaintenanceFee), "|","1~eStoreEDI_t~",eDIsymorder,"|","1~totalLineItems_t~",String(numberOfLineItems),"|");
result=sbtostring(sb);
//end merge
return result;