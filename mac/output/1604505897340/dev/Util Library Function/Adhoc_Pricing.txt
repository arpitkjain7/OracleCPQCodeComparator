/************************************************
Rule Name: Adhoc_Pricing
Description: This library triggers a logic to fetch the transaction id and trigger an action which updates unit MSRP
Author: M Vamsi Krishna
Creation Date: 14-OCT-2020
*/
dictUpdate = dict("string");
headersdict = dict("string");
userName = "";
   pwd = "";
   fileLocation = "";
   url = "";
   data = "";
   prcocessed = "Processed";
   
 resultSet = bmql("SELECT Username,Password,File_Location,SoapEndpoint FROM INT_SYSTEM_DETAILS WHERE System='ADHOC_PRICING'");
  for vals in resultSet{
  userName = get(vals,"Username");
   pwd = get(vals,"Password");
   fileLocation = get(vals,"File_Location");
   url = get(vals,"SoapEndpoint");
  }
  
  // pass values in dictionary 
 put(dictUpdate,"companyName",_company_name);
 put(dictUpdate,"userName",userName);
 put(dictUpdate,"pwd",pwd);
 put(dictUpdate,"forLoop",data);
 
 transactionResults = bmql("select TRANSACTION_ID from ADHOC_PRICING");
 for results in transactionResults
 {
 tableUpdate = "";
 transactionID = get(results,"TRANSACTION_ID");
 put(dictUpdate,"bs_Id",transactionID);
 
 //apply template
 
 retVal = applytemplate(fileLocation,dictUpdate,"Not_Found");
 retVal = replace(retVal,"&lt;","<");
 retVal = replace(retVal,"&gt;",">");
 retVal = replace(retVal,"&quot;","\"");
 
 
 // post data in the webservice
 retVal1 = urldatabypost(url,retVal,"",headersdict,true);
 print retVal1;
 if(find(retVal1,"Success") < 0)
 {
  prcocessed = "error";
 }
 
 tableUpdate = tableUpdate + "<bm:TRANSACTION_ID>"+transactionID+"</bm:TRANSACTION_ID>";
 tableUpdate = tableUpdate + "<bm:IS_PROCESSED>"+prcocessed+"</bm:IS_PROCESSED>";
 print tableUpdate;
 res = util.aDHOC_DATA_TABLE_UPDATE("ADHOC_PRICING", tableUpdate);
 }
 
 return "";