/*********************************************************************
Function Name: config API - import parts
Description: This library function is used to add new lines to the quote
Author: Shruti Sawla
User Story #:UID-101
Date: 15th dec 2018
******************************Change Log*****************************
edited by Shruti on 25-Feb-2019 for setting some more line level attributes
*********************************************************************/

//import the CSV file
value="";
if(importQuoteDetails_t==""){
value="";
}
else{ 
mainattachment = getattachmentdata(importQuoteDetails_t);

value = "";

//read the CSV and decode it
content= replace(decodebase64(get(mainattachment ,"filecontent", "string")),"\n","@@");
if(content <> ""){

//declaring array

fileArray = string[]; // split the data of imported file
jsonObj = json(); // json to store file data
lineArray= string[]; // will store quote line document number
jsonAry = string[]; // json array to store the excel row data for addition of lines
linesFromFile=string[]; // lines from file
partArray = string[]; // will store quote line part number
jsonUpdateAry = string[]; // json array to store the excel row data for updating lines



// fetching line item data for partNumber/documentNumber
for line in transactionLine{
 append(lineArray,line._document_number);
 append(partArray,line._part_number);
} 


// reading the imported file and split it
fileArray =split((substring(content,0,len(content)-2)),"@@");
cnt = 0;
for each in fileArray{
 val = split(each,",");
 if(find(val[0],"Line Number") > -1){
  cnt = 1;
  }
 elif(cnt == 1){
 if(val[1] <> ""  AND val[1] <> " " AND NOT(isnull(val[1]))){
 jsonput(jsonObj,"partNumber",val[1]);
 }
 if(val[2] <> ""  AND val[2] <> " " AND NOT(isnull(val[2])) AND isnumber(val[2]) ){
 jsonput(jsonObj,"quantity",val[2]);
 }
 if(val[3] <> ""  AND val[3] <> " " AND NOT(isnull(val[3])) ){
 jsonput(jsonObj,"hiddenPrice_l",val[3]);
 }
 if(val[4] <> ""  AND val[4] <> " " AND NOT(isnull(val[4])) ){
 jsonput(jsonObj,"extContractListPrice_l",val[4]);
 }
 if(val[5] <> ""  AND val[5] <> " " AND NOT(isnull(val[5])) ){
 jsonput(jsonObj,"proposedNetUnitPriceRequested_l",val[5]);
 }
 if(val[6] <> ""  AND val[6] <> " " AND NOT(isnull(val[6])) ){
 jsonput(jsonObj,"extProposedNetPriceRequested_l",val[6]);
 }
 if(val[8] <> ""  AND val[8] <> " " AND NOT(isnull(val[8]))){
 jsonput(jsonObj,"productType_l",val[8]);
 }
 if(val[9] <> ""  AND val[9] <> " " AND NOT(isnull(val[9]))){
 jsonput(jsonObj,"transactionType_l",val[9]);
 }
 if(val[10] <> ""  AND val[10] <> " " AND NOT(isnull(val[10]))){
 jsonput(jsonObj,"licenseType_l",val[10]);
 }
 if(val[11] <> ""  AND val[11] <> " " AND NOT(isnull(val[11]))){
 jsonput(jsonObj,"licenseMetric_l",val[11]);
 }
 
 if(val[12] <> ""  AND val[12] <> " " AND NOT(isnull(val[12]))){
 jsonput(jsonObj,"enterEnvironment_l",val[12]);
 
 }
 if(val[13] <> ""  AND val[13] <> " " AND NOT(isnull(val[13]))){
 jsonput(jsonObj,"languageRequired_l",val[13]);
 }
 if(val[14] <> ""  AND val[14] <> " " AND NOT(isnull(val[14]))){
 jsonput(jsonObj,"supportType_l",val[14]);
 }
 if(val[15]<> BRCM_blankDate_t)
 {
 jsonput(jsonObj,"effectiveStartDate_l",val[15]);
 }
 
 if(val[16]<> BRCM_blankDate_t)
 {
 jsonput(jsonObj,"lineExpirationDate_l",val[15]);
 }
 
 if(val[17] <> ""  AND val[17] <> " " AND NOT(isnull(val[17]))){
 jsonput(jsonObj,"requestedDiscount_l",val[17]);
 }
 if(val[18] <> ""  AND val[18] <> " " AND NOT(isnull(val[18]))){
 jsonput(jsonObj,"businessDivision_l",val[18]);
 }
 if(val[19]<> BRCM_blankDate_t)
 {
 jsonput(jsonObj,"contractStartDate_l",val[19]);
 }
 if(val[20]<> BRCM_blankDate_t)
 {
 jsonput(jsonObj,"contractEndDate_l",val[20]);
 }
 
 if(val[21] <> ""  AND val[21] <> " " AND NOT(isnull(val[21]))){
 jsonput(jsonObj,"installedAtCustomerNumber_l",val[21]);
 }
 if(val[22] <> ""  AND val[22] <> " " AND NOT(isnull(val[22]))){
 jsonput(jsonObj,"siteID_l",val[22]);
 }
 if(val[23] <> ""  AND val[23] <> " " AND NOT(isnull(val[23]))){
 jsonput(jsonObj,"dropProduct_l",val[23]);
 }
 if(val[24] <> ""  AND val[24] <> " " AND NOT(isnull(val[24]))){
 jsonput(jsonObj,"dropReason_l",val[24]);
 }
 if(val[25] <> ""  AND val[25] <> " " AND NOT(isnull(val[25]))){
 jsonput(jsonObj,"existingQuantity_l",val[25]);
 }
 if(val[26] <> ""  AND val[26] <> " " AND NOT(isnull(val[26]))){
 jsonput(jsonObj,"contractedOrPriorDealValue_l",val[26]);
 }
 if(val[27] <> ""  AND val[27] <> " " AND NOT(isnull(val[27]))){
 jsonput(jsonObj,"internalComments_l",val[27]);
 }
 if(val[28] <> ""  AND val[28] <> " " AND NOT(isnull(val[28]))){
 jsonput(jsonObj,"cPN_l",val[28]);
 }
 if(val[29] <> ""  AND val[29] <> " " AND NOT(isnull(val[29]))){
 jsonput(jsonObj,"cPNRequired_l",val[29]);
 }
 if(val[30] <> ""  AND val[30] <> " " AND NOT(isnull(val[30]))){
 jsonput(jsonObj,"_document_number",val[30]);
 }
  ret = jsontostr(jsonObj);
  append(linesFromFile,ret);

  }
 else{
  continue;
  }
}  
cnt = 0;
if (isempty(lineArray))
{
for each in LinesFromFile
 {
 if(each<>"" or each<>" " or each <> "null" or not (isnull(each))){
 
  append(jsonAry,each);
  
  }
 }
}
else
{

  for each in LinesFromFile
  { 
  
  jsonObj1 = json(each);
  val1 = jsonget(jsonObj1,"_document_number");
   if(lineArray[cnt] == val1){
   
    cnt= cnt + 1;
    }
    
   else{ 
   val2= each;
   

    append(jsonAry,val2);
    }
 
  }
}

dictUpdate= dict("string");
userName = "";
pwd = "";
url = "";
fileLocation ="";
trans = "";


//fetching the username, password, template location and url to hit for webservice call
put(dictUpdate,"companyName",_system_company_name);
 resultSet = bmql("SELECT Username,Password,File_Location,SoapEndpoint FROM INT_SYSTEM_DETAILS WHERE System='CONFIG_IMPORT'");
 for vals in resultSet{
 userName = get(vals,"Username");
  pwd = get(vals,"Password");
  fileLocation = get(vals,"File_Location");
  url = get(vals,"SoapEndpoint");
 }

for each in jsonAry{
line = json(each);
partNo = jsonget(line,"partNumber");
partName = "";
resultSet = bmql("SELECT Product_Name FROM BRCM_Part_Master WHERE MPN=$partNo");
for val in resultSet{
partName = get(val,"Product_Name");
}

trans = trans + "<bm:attribute bm:_variableName=\"selectProductByNameFlag_avg\"><bm:value>true</bm:value></bm:attribute>";
trans = trans + "<bm:attribute bm:_variableName=\"partSelectionArrayControl_avg\"><bm:value>1</bm:value></bm:attribute>";
trans = trans + "<bm:attribute bm:_variableName=\"select_avg\"><bm:value>true</bm:value></bm:attribute>";
trans = trans + "<bm:attribute bm:_variableName=\"PartNumber_avg\"><bm:value>"+partNo+"</bm:value></bm:attribute>";
trans = trans + "<bm:attribute bm:_variableName=\"showHideButton_avg \"><bm:value>SHOW</bm:value></bm:attribute>";
trans = trans + "<bm:attribute bm:_variableName=\"selectLicenseType_avg \"><bm:value>"+jsonget(line,"licenseType_l")+"</bm:value></bm:attribute>";
trans = trans + "<bm:attribute bm:_variableName=\"enterEnvironment_avg \"><bm:value>"+jsonget(line,"enterEnvironment_l")+"</bm:value></bm:attribute>";

trans = trans + "<bm:attribute bm:_variableName=\"selectProductByName_avg\"><bm:value>"+partName+"</bm:value></bm:attribute>";
trans = trans + "<bm:attribute bm:_variableName=\"quantity_avg\"><bm:value>"+jsonget(line,"quantity")+"</bm:value></bm:attribute>";
trans = trans + "<bm:attribute bm:_variableName=\"parentChildString_avg\"><bm:value>"+"{\"0\":{\"Sr_No\":0,\"PartNumber\":\""+partNo+"\",\"Quantity\":"+jsonget(line,"quantity")+",\"child\":{\"transactionType\":"+"\""+jsonget(line,"transactionType_l")+"\""+",\"businessTransactionType\":\"\",\"specialMetric\":false,\"enterEnvironment\":"+"\""+jsonget(line,"enterEnvironment_l")+"\""+",\"selectLicenseType\":"+"\""+jsonget(line,"licenseType_l")+"\""+",\"supportType\":"+"\""+jsonget(line,"supportType_l")+"\""+",\"supportPartsPicklist\":\"\",\"languageRequired\":"+"\""+jsonget(line,"languageRequired_l")+"\""+",\"startDate\":\"\",\"endDate\":\"\",\"standardQuantity\":"+jsonget(line,"quantity")+",\"existingQuantity\":"+jsonget(line,"existingQuantity_l")+",\"licenseMetric\":"+"\""+jsonget(line,"licenseMetric_l")+"\""+",\"specialMetricLicense\":\"\",\"UsageQuantity\":\"\",\"UsageExistingQuantity\":\"\",\"ProductType\":"+"\""+jsonget(line,"productType_l")+"\""+"}}}"+"</bm:value></bm:attribute>";

// pass values in dictionary 
put(dictUpdate,"bs_Id",bs_id);
put(dictUpdate,"companyName",_system_company_name);
put(dictUpdate,"userName",userName);
put(dictUpdate,"pwd",pwd);
put(dictUpdate,"forLoop",trans);

//apply template

retVal = applytemplate(fileLocation,dictUpdate,"Not_Found");
retVal = replace(retVal,"&lt;","<");
retVal = replace(retVal,"&gt;",">");
retVal = replace(retVal,"&quot;","\"");

// post data in the webservice
retVal1 = urldatabypost(url,retVal,"ERROR");

if(retVal1 == "ERROR"){
value =  "ERROR";
continue;
}
 
          
}



value = value;


}
else{
value = "";
}
}

return value;