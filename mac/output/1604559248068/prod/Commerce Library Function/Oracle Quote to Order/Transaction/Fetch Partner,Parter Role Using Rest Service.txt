/***********************************************************************************************************************
Function Name: Fetch Partner Information using Rest Service
Description: This library function is to fetch Partner Information from OEC in Quote based on Based on Distributor Role.
User Story #: UID-1
History:     Date          Author            Comment 
    03/15/2019    Keerthivasan         Initial Version 
    05/09/2019    Satyabrata Acharya   Optimized function and leveraged string builder
    01/09/2020    Kavita Lolla     SYMINT-3133 - Decoupling Partner name and email address.
    01/10/2020    Keerthivasan A         SYMINT-3776 Added Validation Logic for Billing Date when When Payment Plan is Custom
***********************************************************************************************************************/
result = "";
partyName = "";
partyRole = "";
partyName1 = "";
partyRole1 = "";
encodedCredential = "";
url = "";
correctStatusCode = "200";
partyEmail = "";

//attributes used for SYMINT-3776
errorLineBillingDate = "";
row = json();
custom = "custom";
sb = stringbuilder();

//SYMINT-3776 :: Validation functionality for Billing Date in Bill plan to be made mandatory before submitting to order
if(paymentPlan_t == "custom"){ 
   loop = range(billingScheduleController_t);
   print loop;
   for line in loop{
      row = jsonarrayget(newBillingSchedule_t, line, "json");
      rowLicenseFee = jsonget(row,"licenseFee", "string","");
      rowMaintFee = jsonget(row,"maintenanceFee", "string","");
   rowBillingDate = jsonget(row,"billingDate", "string","");
      if((rowLicenseFee <> "0" or rowMaintFee <> "0") and rowBillingDate ==""){
            line_BillingDate= jsonget(row,"scheduleID", "string","");
   errorBuilderBillingDate =stringbuilder(errorLineBillingDate,line_BillingDate," , ");
   errorLineBillingDate = sbtostring(errorBuilderBillingDate);
      }
    }
}
// End of SYMINT-3776

//setting values for SYMINT-3776
sbappend(sb,"1~errorLineBillingDate_t~",errorLineBillingDate,"|");

if(opportunityNumber_t <> "")
 {
 print "inside";
 resultSet = bmql("select SoapEndpoint,Username,Password from INT_SYSTEM_DETAILS where System = 'PARTNER_FETCH'");
   for record in resultSet
  {
  url = get(record,"SoapEndpoint");
  encodedCredential = encodebase64(get(record,"Username") + ":" + get(record,"Password"));
  }
  
    url = replace(url, "opportunityNumber_t", opportunityNumber_t);
    auth = "Basic" + " " + encodedCredential;
    headersDict = dict("string"); 
    put(headersDict,"Content-Type","application/json"); 
    put(headersDict,"Authorization",auth);
    response=Dict("string");
    response = urldata(url,"GET",headersDict, "5000");
    print response;
 if(get(response, "Status-Code")==correctStatusCode) 
  {
  jsonResponse=get(response,"Message-Body");
  jsonObject = json(jsonresponse);
  jsonLine = jsonpathgetmultiple(jsonObject, "$..items[?(@.BRCRM_PARTNER_ROLE_V2_c=='Reseller')]");
  jsonLineLoop = range(jsonarraysize(jsonLine));
  if(isnull(jsonLine))
   {
   partyName ="";
   } 
  else
   {
   for each in jsonLineLoop 
    {
    jsonObj = json(jsonarrayget(jsonLine, each));
    partyRole = partyRole + jsonget(jsonObj,"BRCRM_PARTNER_ROLE_V2_c","string") ;
    if(partyRole == "Reseller") 
     {
     partyName =jsonget(jsonObj, "PartyName", "string");
     //SYMINT-3133 - Begin - Removing the email concatenation in the Partner name.
     partyName = partyName;
     partyEmail = jsonget(jsonObj,"PreferredContactEmail","string");
     //SYMINT-3133 - End
     break;
     }
    }
   }
  /*if(routeToMarket_t == "tier1" or routeToMarket_t == "tier2"){
  jsonLine = jsonpathgetmultiple(jsonObject, "$..items[?(@.BRCRM_PARTNER_ROLE_V2_c=='Distributor')]");
  jsonLineLoop = range(jsonarraysize(jsonLine));
  if(isnull(jsonLine))
   {
   partyName1 ="";
   } 
  else
   {
   for each in jsonLineLoop 
    {
    jsonObj = json(jsonarrayget(jsonLine, each));
    partyRole1 = partyRole1 + jsonget(jsonObj,"BRCRM_PARTNER_ROLE_V2_c","string") ;
    if(partyRole1 == "Distributor") 
     {
     partyName1 =jsonget(jsonObj, "PartyName", "string");
     partyName1 = partyName1 + "(" + jsonget(jsonObj,"PreferredContactEmail","string") + ")";
     break;
     }
    }
   } 
   
  }
  if(routeToMarket_t == "mSP"){
  jsonLine = jsonpathgetmultiple(jsonObject, "$..items[?(@.BRCRM_PARTNER_ROLE_V2_c=='Resales')]");
  jsonLineLoop = range(jsonarraysize(jsonLine));
  if(isnull(jsonLine))
   {
   partyName1 ="";
   } 
  else
   {
   for each in jsonLineLoop 
    {
    jsonObj = json(jsonarrayget(jsonLine, each));
    partyRole1 = partyRole1 + jsonget(jsonObj,"BRCRM_PARTNER_ROLE_V2_c","string") ;
    if(partyRole1 == "MSP") 
     {
     partyName1 =jsonget(jsonObj, "PartyName", "string");
     partyName1 = partyName1 + "(" + jsonget(jsonObj,"PreferredContactEmail","string") + ")";
     break;
     }
    }
   } 
   
  }*/
  //Added stringbuilder to for performance improvement.
 //SYMINT-3133 - Begin - Assigning the partyEmail to the respective attribute 
     //sbPartner = stringbuilder(result, "1~partner2_t~",partyName, "|","1~partner2Role_t~",partyRole,"|");
     sbPartner = stringbuilder(result, "1~partner2_t~",partyName, "|","1~partner2Role_t~",partyRole,"|");
      
    sbappend(sb,sbtostring(sbPartner),"1~partnerContactEmail_t~",partyEmail,"|");
   
     //SYMINT-3133 - End
  }
}  
result = sbtostring(sb);
return result;