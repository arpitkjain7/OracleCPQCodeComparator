/*****************************************************************************************************
Function Name : Current Step
Author : Nandhini Vurimella.
Description : Determines the previous and next step in the standard step flow for the current step for the transaction.  
              This is used for debugging modifications to the Commerce Process Steps.
*****************************************************************************************************/
// list of step variable names
listOfSteps = String[]{
 "start_step",
 "pending_process",
 "waitingForInternalApproval",
 "approved",
 "waitingForSignature",
 "signed",
 "orderedBeingFulfilled",
 "beingChangedCanceled",
 "closedFulfilled",
 "canceled",
 "rejectedByCustomer",
 "alternateVersionOrdered"
};
lastStepPos = sizeofarray(listOfSteps) - 1;

// fancier display names
fancyStepDict = dict("string");
put(fancyStepDict, "start_step", "Start");
put(fancyStepDict, "pending_process", "In Progress");
put(fancyStepDict, "waitingForInternalApproval", "Waiting for Internal Approval");
put(fancyStepDict, "approved", "Approved");
put(fancyStepDict, "waitingForSignature", "Waiting for Signature");
put(fancyStepDict, "signed", "Signed");
put(fancyStepDict, "orderedBeingFulfilled", "Ordered");
put(fancyStepDict, "beingChangedCanceled", "Being Changed / Canceled");
put(fancyStepDict, "closedFulfilled", "Fulfilled");
put(fancyStepDict, "canceled", "Canceled");
put(fancyStepDict, "rejectedByCustomer", "Rejected By Customer");
put(fancyStepDict, "alternateVersionOrdered", "Alternate Version Ordered");

viewStep = "STEP NOT MATCHED";

//Check the current step position in ListOfSteps array and check parameter value --logic based on parameter "Direction"= next or previous.

currStepPos = findinarray(listOfSteps, _system_current_step_var);
if (currStepPos > -1){
 if (direction == "next") {
 /*In case direction is next, If system current step position is equal to last step position. Then, initialize return value with first step in array.If its before the last step, then assign the just next step value from listOfSteps array.*/
  if (currStepPos == lastStepPos){
   viewStep = listOfSteps[0];
  } elif (currStepPos < lastStepPos){
   viewStep = listOfSteps[currStepPos + 1];
  }

 } elif (direction == "previous"){
 /*In case direction is previous, If system current step position is 0(first index). Then, initialize return value with last step in array.If it is before or at the last step, then assign the just previous step value from listOfSteps array.*/
  if (currStepPos == 0){
  viewStep = listOfSteps[lastStepPos];
  } elif (currStepPos <= lastStepPos){
   viewStep = listOfSteps[currStepPos -1];
  }
 }
 //If return value is not blank, assign the fancy value from fancyStepDict string dictionary.
 if (viewStep <> ""){
  if (containskey(fancyStepDict, viewStep)){
   viewStep = get(fancyStepDict, viewStep);
  } else {
   viewStep = "(" + viewStep + ")";
  }
 }
}
return viewStep;