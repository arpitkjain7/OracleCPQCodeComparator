/********************************************************************
Function Name: Updating financial summary attributes
Description: Used to update the financial summary attributes on header.
Author: Nandhini Vurimella
Date: 05-01-2019
********************************************************************/
/********************************************************************
Function Name: Updating financial summary attributes
Description: Adding changes for calculating Total Capacity Deviation as part of BROCAD2-4874
Author: Keerthivasan A
Date: 07-03-2019
********************************************************************/

/********************************************************************
Function Name: Updating financial summary attributes
Description: BROCAD2-5278 - Moving Renewal Flag updation from save action to update financial summary action.
Author: Kavita Lolla
Date: 15-07-2019

Changes done by Shruti for VIPER-215 on 30th July 2019 to set errorShowingAttribute attribute to blank after import/export is done
********************************************************************/
/********************************************************************
Function Name: Updating financial summary attributes
Description: VIPER-415 - Route Renewal Approval based on Account type classification.
Author: Kavita Lolla
Date: 11-09-2019
********************************************************************
Author : Kavita Lolla
Changes done for SYMINT-5533
Date: 13/02/2020  
Change Description:- ARR Calculation for Upgrade Transaction Type.
********************************************************************
Author : Adithya Suresh
Changes done for VIPER-748
Date: 26/03/2020  
Change Description:- Excluding dropped lines from the financial summary calculations
************************************************************************* 
Author : Sindhura Chintakindi
Changes done for VIPER-864
Date: 10/06/2020  
Change Description:- Approval logic based on EAR(USD)
**************************************************************************/ 
/**************************************************************************
Author : Sindhura Chintakindi
Changes done for VIPER-923
Date: 30/06/2020  
Change Description:- Approval logic based on ARR for Stated renewal no and core account
**************************************************************************/ 
/**************************************************************************
Author : Sravan Madala.
Changes done for VIPER-1045
Date: 30/06/2020  
Change Description:- Approval Logic change for Core Renewal Quotes, Stated Renewal Yes, Removed Going Forward (regardless of ARR%)  should route for approval
**************************************************************************/ 

result="";
dlim="~";
dend="|";

extProposedNetPriceRequested = 0;
extContractListPrice = 0;
sumExtContractListPrice =0.0;
lineDiscountAmount = 0;
proposedNetPriceRequested = 0;
extLineDiscountAmount = 0;
localCurrencyExchangeRate = 0.0;
expiringAnnualRenewalRenew =0.0;
expiringAnnualRenewalNew =0.0;
expiringAnnualRenewalCapacity =0.0;
renewalRateHeader=0.0;
aRRPercent =0.0;
sumExtCost=0.0;
grossContractListPrice =0.0;
discDOffContractListPrice = 0.0;
extProposedNetPriceRequested =0.0;
sumExtProposedNetPriceRequested = 0.0;
proposedLicSubFeeNew = 0.0;
proposedLicSubFeeRenew =0.0;
proposedLicSubFeeCapacity =0.0;
proposedLicSubFeeTotal =0.0;
sumEstAnnualizedBookingD =0.0;
sumEstQuarterlyBookingD =0.0;
totalMarginPercent =0.0;
totalMarginDollar =0.0;
discPerContractListPrice=0.0;
sumExpAnnualRenewalValue =0.0;
sumPriceUpliftAnnualRenewalValue = 0.0;
proposedSupportNew =0.0;
proposedSupportRenew =0.0;
proposedSupportCapacity =0.0;
proposedSupportTotal =0.0;
sumExpiringAnnualRenewalValue =0.0;
sumNewAnnualRenewalValue =0.0;
sumExtLineDiscountAmount =0.0;
newAnnualRenewalRenew =0.0;
newAnnualRenewalNew =0.0;
newAnnualRenewalCapacity =0.0;
totalProposedNetPriceUSD=totalProposedNetPriceUSDFloat_t;
totalProposedNetPriceLC=totalProposedNetPriceLC_t;
// Initializing Attributes for BROCAD2-4874 - Total Capacity Deviation - Start
totalProposedNetPrice = 0.0;
totalExtendedPriorPrice = 0.0;
// Initializing Attributes for BROCAD2-4874 - Total Capacity Deviation - End
//BROCAD2-5278-BEGIN
renewalFlag = false;
//BROCAD2-5278-END
//SYMINT-5533-Begin
newAnnualRenewalUpgrade = 0.0;
expiringAnnualRenewalUpgrade = 0.0;
//SYMINT-5533 -End
precision = 0;

res = bmql("SELECT Precision from Func_Curr_Prec_Map WHERE Functional_Currency=$_system_current_document_currency_pref");

for line in res{
 precision=atoi(get(line,"Precision"));
 
}



for line in transactionline
{

 

     //VIPER-748 Excluding dropped lines from the calculations 
     if((line._part_number<>"Cust" OR  line._model_name=="") and line.dropProduct_l <> true){
 grossContractListPrice = grossContractListPrice + line.extContractListPrice_l;
 if(quoteType_t <> "contractQuote")
 {
         sumExtLineDiscountAmount = sumExtLineDiscountAmount + round(line.extLineDiscountAmount_l,precision);
  discDOffContractListPrice = discDOffContractListPrice + round(line.lineDiscountAmount_l,precision);
  sumExtProposedNetPriceRequested = sumExtProposedNetPriceRequested + line.extProposedNetPriceRequested_l; 
  sumExtContractListPrice = sumExtContractListPrice + line.extContractListPrice_l;
  sumExtCost = sumExtCost + line.extCost_l;
         if( line.extContractListPrice_l <>0)
  {
   discPerContractListPrice =  (1- ( sumExtProposedNetPriceRequested/ sumExtContractListPrice))*100;
   
  } 
  if(line.transactionTypeM_l == "New" and line.coveredProduct_l == "")
  {
   proposedLicSubFeeNew = proposedLicSubFeeNew + line.extProposedNetPriceRequested_l;
  } 
  if(line.transactionTypeM_l == "Renew" and line.coveredProduct_l == "")
  {
    proposedLicSubFeeRenew = proposedLicSubFeeRenew + line.extProposedNetPriceRequested_l;
  } 
  if(line.transactionTypeM_l == "Capacity" and line.coveredProduct_l == "")
  {
    proposedLicSubFeeCapacity = proposedLicSubFeeCapacity + line.extProposedNetPriceRequested_l;
  }
  if(line.transactionTypeM_l == "New" and line.coveredProduct_l <> "")
  {
    proposedSupportNew = proposedSupportNew + line.extProposedNetPriceRequested_l;
  }
  if(line.transactionTypeM_l == "Renew" and line.coveredProduct_l <> "")
  {
    proposedSupportRenew = proposedSupportRenew + line.extProposedNetPriceRequested_l;
  }
  if(line.transactionTypeM_l == "Capacity" and line.coveredProduct_l <> "")
  {
    proposedSupportCapacity = proposedSupportCapacity + line.extProposedNetPriceRequested_l;
  }
  //adding this calculate total estAnnualizedBooking for commercial order submitted quotes
  //start of code
   estAnnualizedBooking=0.0;
   dateFormat = "yyyy-MM-dd HH:mm:ss";
   if(line.contractStartDate_l <> "")
   {
    if(find(line.contractStartDate_l,"/") > 0)
    {
     dateFormat = "MM/dd/yyyy HH:mm:ss";
    }
   }
   if(line.effectiveStartDate_l <> "")
   {
    if(find(line.effectiveStartDate_l,"/") > 0)
    {
     dateFormat = "MM/dd/yyyy HH:mm:ss";
    }
   }
  
   if(line._part_number <> "" and line._part_number <> "Cust")
   {
    if(quoteType_t == "renewalQuote" and line.dropProduct_l == true and line.dropReason_l == "droppedMigratedOrUpgradedToDifferentCode")
    {
     estAnnualizedBooking= 0.0;
    }
    elif(line.contractStartDate_l <> "" and line.contractEndDate_l <> "")
    {
     endDateObj = strtodate(line.contractEndDate_l, dateFormat );
     startDateObj = strtodate(line.contractStartDate_l, dateFormat );
     duration = getdiffindays(endDateObj,startDateObj) + 1;
     if(duration <= 365)
     {
      estAnnualizedBooking=line.extProposedNetPriceRequested_l;
     }
     else
     {
      contractValue = (line.extProposedNetPriceRequested_l/duration)*365;
      estAnnualizedBooking = contractValue;
     }
    }
   }
   //end of code
  sumEstAnnualizedBookingD = sumEstAnnualizedBookingD + round(estAnnualizedBooking,2);
  sumEstQuarterlyBookingD = sumEstQuarterlyBookingD + line.estQuarterlyRevenue_l;
  
  if( sumExtProposedNetPriceRequested <> 0)
  {
   totalMarginPercent = ( (sumExtProposedNetPriceRequested -sumExtCost)/(sumExtProposedNetPriceRequested)) *100;
  }
  totalMarginDollar = (sumExtProposedNetPriceRequested - sumExtCost);
         //sumExpiringAnnualRenewalValue =sumExpiringAnnualRenewalValue +line.expiringAnnualRenewal_l;
  sumNewAnnualRenewalValue = sumNewAnnualRenewalValue +line.newAnnualRenewalValue_l;
  sumPriceUpliftAnnualRenewalValue = sumPriceUpliftAnnualRenewalValue + line.priceUpliftAnnualRenewalValue_l;
  
     extProposedNetPriceRequested = extProposedNetPriceRequested + line.extProposedNetPriceRequested_l;
  
     // Setting Days for BROCAD2-4874 - Total Capacity Deviation - Start
     Days=line.totalNewSupportTermDays_l;
  if( line.transactionTypeM_l== "Capacity")
  {
   // Setting Days for BROCAD2-4874 - Total Capacity Deviation - End
   // Calculating Total Proposed Net Price and Total Extended Prior Price for BROCAD2-4874 - Total Capacity Deviation - Start
             totalProposedNetPrice = totalProposedNetPrice + line.extProposedNetPriceRequested_l;
             totalExtendedPriorPrice = totalExtendedPriorPrice + (line.contractedOrPriorLicenseSubFee_l*(Days/365.0)*line._price_quantity);
  }
     
     
 
 }
    }
    
    //VIPER-748 Including dropped lines for total EAR
    if(line._part_number<>"Cust" OR  line._model_name==""){
     if(quoteType_t <> "contractQuote"){
      sumExpiringAnnualRenewalValue =sumExpiringAnnualRenewalValue +line.expiringAnnualRenewal_l;
      
      if (quoteType_t =="renewalQuote" )
  {
         if( line.transactionTypeM_l== "Renew")
      {
             expiringAnnualRenewalRenew = expiringAnnualRenewalRenew + line.expiringAnnualRenewal_l;
             newAnnualRenewalRenew = newAnnualRenewalRenew + line.newAnnualRenewalValue_l;
             //BROCAD2-5278 - BEGIN
             renewalFlag = true;
             //BROCAD2-5278 - END
         }
         if( line.transactionTypeM_l== "New")
   {
             expiringAnnualRenewalNew = expiringAnnualRenewalNew + line.expiringAnnualRenewal_l;
             newAnnualRenewalNew = newAnnualRenewalNew + line.newAnnualRenewalValue_l;
         }
         if( line.transactionTypeM_l== "Capacity")
   {
             expiringAnnualRenewalCapacity = expiringAnnualRenewalCapacity + line.expiringAnnualRenewal_l;
             newAnnualRenewalCapacity = newAnnualRenewalCapacity + line.newAnnualRenewalValue_l;
         }
         //SYMINT-5533-Begin - Computing Annual Renewal value for Upgrade lines.
           if(line.transactionTypeM_l == "Upgrade")
           {
            expiringAnnualRenewalUpgrade = expiringAnnualRenewalUpgrade + line.expiringAnnualRenewal_l;
            newAnnualRenewalUpgrade = newAnnualRenewalUpgrade + line.newAnnualRenewalValue_l;
           }
         //SYMINT-5533-End
     }
      
     }
    } 
    
}
proposedLicSubFeeTotal=proposedLicSubFeeCapacity + proposedLicSubFeeNew +proposedLicSubFeeRenew;
proposedSupportTotal =proposedSupportCapacity +proposedSupportNew + proposedSupportRenew;
if(expiringAnnualRenewalRenew <> 0.0)
{     
    renewalRateHeader =   ( newAnnualRenewalRenew/expiringAnnualRenewalRenew)*100 ;
}
//SYMINT-5533-Begin - Including New Annual Renewal Values and Expiring Annual Renewal Values for Upgrade lines.
//sumForAnnualRenewal= (expiringAnnualRenewalRenew + expiringAnnualRenewalNew + expiringAnnualRenewalCapacity) ;
//sumForNewAnnualRenewal = (newAnnualRenewalCapacity + newAnnualRenewalNew + newAnnualRenewalRenew);
sumForAnnualRenewal= (expiringAnnualRenewalRenew + expiringAnnualRenewalNew + expiringAnnualRenewalCapacity + expiringAnnualRenewalUpgrade) ;
sumForNewAnnualRenewal = (newAnnualRenewalCapacity + newAnnualRenewalNew + newAnnualRenewalRenew + newAnnualRenewalUpgrade);
//SYMINT-5533-End
if(sumForAnnualRenewal <> 0.0)
{
    aRRPercent = (sumForNewAnnualRenewal / sumForAnnualRenewal)*100; 
}

///VIPER_864-BEGIN

exch=string(currencyExchange_t);
EARUSD=0.0;
EARLC=expiringAnnualRenewalValue_t;
if(atof(exch) <> 0)
{
EARUSD=EARUSD + (EARLC/atof(exch));
}
expiringAnnualRenewalValue_USD_t = EARUSD;

///VIPER_864-END

//BROCAD2-5278-BEGIN
//If quote with ARR% >= 99.7 having Renewal flag true, Renewal approval is not required.
if(renewalFlag)
{
//VIPER-415 - Route Renewal Approval based on Account type classification.
   if(core_t == "ZCA_CORE")
 {
 //Jira-864 Start :Core - route for approval if following conditions are not met
 if(statedRenewal_t == "No")
 {
 //Jira-923 Start-added ARR% as condition for renewal approval for quotes with statedrenewal no and core account
   if( expiringAnnualRenewalValue_USD_t <> 0 AND expiringAnnualRenewalValue_USD_t < 100000 AND (round(aRRPercent,2) >= 120))
   {
     renewalFlag = false;
   } 
   //Jira-923 end-added ARR% as condition for renewal approval for quotes with statedrenewal no and core account
 }
 elif(statedRenewal_t == "yesRemovedGoingForward")
 {
  //VIPER-1045 - Refer to JIRA, commented EAR check.
   if( expiringAnnualRenewalValue_USD_t  <> 0 AND (expiringAnnualRenewalValue_USD_t  < 100000 /*OR expiringAnnualRenewalValue_USD_t  >= 100000*/ ))
   {
     renewalFlag = false;
   }
 }
 else
 {
   if( expiringAnnualRenewalValue_USD_t  <> 0 AND expiringAnnualRenewalValue_USD_t  < 100000)
   {
     renewalFlag = false;
   }
 }
 //Jira-864 END :Core - route for approval if following conditions are not met 
 }
 else
 {
 //Non-Core - route for approval if below 99.7%
  if(round(aRRPercent,2) >= 99.7)
  {
   renewalFlag = false;
  }
 }
//VIPER-415 - END
}


//BROCAD2-5278-END
result= result + _transaction_document_number + dlim + "renewalRate_t" + dlim + string(renewalRateHeader) + dend;
result= result + _transaction_document_number + dlim + "aRR_t" + dlim + string(aRRPercent) + dend;
result= result + _transaction_document_number + dlim + "grossContractListPrice_t" + dlim + string(grossContractListPrice) + dend;
result= result + _transaction_document_number + dlim + "discountPercentOffContractListPrice_t" + dlim + string(discPerContractListPrice) + dend;
result= result + _transaction_document_number + dlim + "discountOffContractListPrice_t" + dlim + string(discDOffContractListPrice) + dend;
result= result + _transaction_document_number + dlim + "proposedLicSubFeeNewProduct_t" + dlim + string(proposedLicSubFeeNew) + dend;
result= result + _transaction_document_number + dlim + "proposedLicSubFeeRenewal_t" + dlim + string(proposedLicSubFeeRenew) + dend;
result= result + _transaction_document_number + dlim + "proposedLicSubFeeCapacity_t" + dlim + string(proposedLicSubFeeCapacity) + dend;
result= result + _transaction_document_number + dlim + "proposedLicSubFeeGrandTotal_t" + dlim + string(proposedLicSubFeeTotal) + dend;
result= result + _transaction_document_number + dlim + "proposedSupportNewProduct_t" + dlim + string(proposedSupportNew) + dend;
result= result + _transaction_document_number + dlim + "proposedSupportRenewal_t" + dlim + string(proposedSupportRenew) + dend;
result= result + _transaction_document_number + dlim + "proposedSupportCapacity_t" + dlim + string(proposedSupportCapacity) + dend;
result= result + _transaction_document_number + dlim + "proposedSupportFeeGrandTotal_t" + dlim + string(proposedSupportTotal) + dend;
result= result + _transaction_document_number + dlim + "estAnnualizedBooking_t" + dlim + string(sumEstAnnualizedBookingD) + dend;
result= result + _transaction_document_number + dlim + "estQuarterlyBooking_t" + dlim + string(sumEstQuarterlyBookingD) + dend;
result= result + _transaction_document_number + dlim + "totalMarginPercent_t" + dlim + string(totalMarginPercent) + dend;
result= result + _transaction_document_number + dlim + "totalMarginDollar_t" + dlim + string(totalMarginDollar) + dend;
result= result + _transaction_document_number + dlim + "totalCOGS_t" + dlim + string(sumExtCost) + dend;
result= result + _transaction_document_number + dlim + "expiringAnnualRenewalValue_t" + dlim + string(sumExpiringAnnualRenewalValue) + dend;
result= result + _transaction_document_number + dlim + "priceUpliftAnnualRenewalValue_t" + dlim + string(sumPriceUpliftAnnualRenewalValue) + dend;
result= result + _transaction_document_number + dlim + "newAnnualRenewalValue_t" + dlim + string(sumNewAnnualRenewalValue) + dend;
result= result + _transaction_document_number + dlim + "extLineDiscountAmount_t" + dlim + string(sumExtLineDiscountAmount) + dend;
result= result + _transaction_document_number + dlim + "totalProposedNetPriceUSDFS_t" + dlim + string(totalProposedNetPriceUSD) + dend;
result= result + _transaction_document_number + dlim + "totalProposedNetPriceLCFS_t" + dlim + string(totalProposedNetPriceLC) + dend;
result= result + _transaction_document_number + dlim + "expiringAnnualRenewalValue_USD_t" + dlim + string(EARUSD) + dend;

//BROCAD2-5278 - BEGIN
result= result + "1" + dlim + "renewalApprovalFlag_t" + dlim + string(renewalFlag) + dend;
//BROCAD2-5278 - END

// VIPER-215 changes done on 30th July by shruti to set errorShowingAttribute attribute to blank after import/export functionality is used
result= result + _transaction_document_number + dlim + "errorShowingAttribute" + dlim + "" + dend;
//end of VIPER-215

// Setting the final value for BROCAD2-4874 - Total Capacity Deviation
result= result + _transaction_document_number + dlim + "totalCapacityDeviation_t" + dlim + string(totalExtendedPriorPrice - totalProposedNetPrice) + dend;
return result;