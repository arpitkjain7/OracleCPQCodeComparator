/********************************************************************
Function Name: Update Billing Schedule
Description: To update the billing schedule based on billing frequency.
Author: Adithya Suresh
Date: 27-02-2019
********************************************************************/
result="";
dlim="~";
dend="|";
dateFormat = "yyyy-MM-dd HH:mm:ss";
billingSchedule=jsonarray();
totalLicenseFee = 0;
totalMaintenanceFee = 0;
for line in transactionLine{

 if(line.coveredProduct_l <> ""){
  totalMaintenanceFee = totalMaintenanceFee + line.extProposedNetPriceRequested_l;
 }
 else{
  totalLicenseFee = totalLicenseFee + line.extProposedNetPriceRequested_l;
 }
 
}  

if(paymentPlan_t == "paidInFull"){

 totalFees = 0;
 payment = json();
 row = json();
 committedPayments = 0.0;
 if((previousPaymentPlan_t == "paidInFull")  and (jsonarraytostr(newBillingSchedule_t) <>  "[]")){
  row = jsonarrayget(newBillingSchedule_t, 0, "json");
  committedPayments = jsonget(row,"committedPayments", "integer");
  jsonput(payment,"committedPayments",committedPayments);
 }
 else{
  jsonput(payment,"committedPayments",committedPayments);
 }
 jsonput(payment,"scheduleID",1);
 jsonput(payment,"billingDate",contractStartDate_t);
 jsonput(payment,"licenseFee",totalLicenseFee);
 jsonput(payment,"maintenanceFee",totalMaintenanceFee);
 
 jsonput(payment,"orderID",oRCL_ERP_OrderID_t);
 totalFees = totalLicenseFee + totalMaintenanceFee;
 jsonput(payment,"totalFee",totalFees);
 jsonarrayappend(billingSchedule, payment);
 
 result= result + _transaction_document_number + dlim + "newBillingSchedule_t" + dlim + jsonarraytostr(billingSchedule) + dend;
 result= result + _transaction_document_number + dlim + "billingScheduleFlag_t" + dlim + string(False) + dend;
 result= result + _transaction_document_number + dlim + "previousPaymentPlan_t" + dlim + "paidInFull" + dend;
 result= result + _transaction_document_number + dlim + "previousNoOfBillings_t" + dlim + "0" + dend;
} 

if(paymentPlan_t == "yearly"){
 
 addStartDate = strtodate(contractEndDate_t, dateFormat );
 endDateObj = strtodate(contractEndDate_t, dateFormat );
 startDateObj = strtodate(contractStartDate_t, dateFormat );
 duration = getdiffindays(endDateObj,startDateObj);

 noOfYears = integer(duration/365.5) + 1;
 
 loop = range(noOfYears);
 
 oneLicenseFee = totalLicenseFee/noOfYears;
 oneMaintenanceFee = totalMaintenanceFee/noOfYears;
 startDate = contractStartDate_t;
 payment = json();
 counter = 1;
 grandTotal = 0;
 totalCommittedPayments = 0;
 for line in loop{
  
  totalFees = 0;
  jsonput(payment,"scheduleID",counter);
  counter = counter + 1;
  jsonput(payment,"billingDate",startDate);
  
  startAry = split(startDate,"-");
  startY = atoi(startAry[0]);
  leapDate = startAry[0] + "-02-29 00:00:00";
  leapDate1 = strtodate(leapDate,dateFormat);
  EndFebDate = startAry[0] + "-02-28 00:00:00";
  EndFebDate1 = strtodate(EndFebDate,dateFormat);
  nextLeapDate1 = strtodate(startDate,dateFormat);
  startY2 = startY + 1;
  if(isleap(startY2)){
   nextYear = string(startY2);
   nextLeapDate = nextYear + "-02-29 00:00:00";
   nextLeapDate1 = strtodate(nextLeapDate,dateFormat);
   
   
  }
  
  newStartDate = strtodate(startDate,dateFormat );
  
  if(isleap(startY) and (comparedates(newStartDate, leapDate1) == -1)){
   
   addStartDate = adddays(newStartDate, 366);
   
   
  }
  elif(isleap(startY2) and (comparedates(newStartDate, EndFebDate1) == -1)){
   
   addStartDate = adddays(newStartDate, 365);
   
   
  }
  elif(isleap(startY2) and (comparedates(newStartDate, nextLeapDate1) == -1)){
   
   addStartDate = adddays(newStartDate, 366);
   
   
  }
   
  else{
   
   addStartDate = adddays(newStartDate, 365);
  } 
  
  
  
  startDate = datetostr(addStartDate,dateFormat );
  row = json();
  committedPayments = 0;
  if((previousPaymentPlan_t == "yearly") and (contractEndDate_t == previousContractEndDate_t) and (jsonarraytostr(newBillingSchedule_t) <>  "[]")){
   row = jsonarrayget(newBillingSchedule_t, line, "json");
   committedPayments = atof(jsonget(row,"committedPayments", "string",string(0)));
   
   jsonput(payment,"committedPayments",committedPayments);
  }
  else{
   jsonput(payment,"committedPayments",committedPayments);
  }
  jsonput(payment,"licenseFee",oneLicenseFee);
  jsonput(payment,"maintenanceFee",oneMaintenanceFee);
  totalCommittedPayments = totalCommittedPayments + committedPayments;
  jsonput(payment,"orderID",oRCL_ERP_OrderID_t);
  totalFees = oneLicenseFee + oneMaintenanceFee;
  grandTotal = grandTotal + totalFees;
  jsonput(payment,"totalFee",totalFees);
  jsonarrayappend(billingSchedule, payment);
 }
 totalRow = json();
 jsonput(totalRow,"scheduleID","GRAND TOTAL");
 jsonput(totalRow,"licenseFee",totalLicenseFee);
 jsonput(totalRow,"maintenanceFee",totalMaintenanceFee);
 jsonput(totalRow,"committedPayments",totalCommittedPayments);
 jsonput(totalRow,"totalFee",grandTotal);
 jsonarrayappend(billingSchedule, totalRow);
 result= result + _transaction_document_number + dlim + "newBillingSchedule_t" + dlim + jsonarraytostr(billingSchedule) + dend; 
 result= result + _transaction_document_number + dlim + "billingScheduleFlag_t" + dlim + string(False) + dend;
 result= result + _transaction_document_number + dlim + "previousPaymentPlan_t" + dlim + "yearly" + dend;
 result= result + _transaction_document_number + dlim + "previousContractEndDate_t" + dlim + contractEndDate_t + dend;
 result= result + _transaction_document_number + dlim + "previousNoOfBillings_t" + dlim + "0" + dend;
}


if(paymentPlan_t == "quarterly"){
 days = dict("integer");
 put(days,1,31);
 put(days,2,28);
 put(days,3,31);
 put(days,4,30);
 put(days,5,31);
 put(days,6,30);
 put(days,7,31);
 put(days,8,31);
 put(days,9,30);
 put(days,10,31);
 put(days,11,30);
 put(days,12,31);
 
 startDate = contractStartDate_t;
 endDateObj = strtodate(contractEndDate_t, dateFormat );
 startDateObj = strtodate(contractStartDate_t, dateFormat );
 duration = getdiffindays(endDateObj,startDateObj);

 noOfQuarters = integer(duration/91.4) + 1;
 if(noOfQuarters == 0){
  noOfQuarters = 1;
 } 
 loop = range(noOfQuarters);
 
 oneLicenseFee = round(totalLicenseFee/noOfQuarters,2);
 
 oneMaintenanceFee = totalMaintenanceFee/noOfQuarters;
 
 addStartDate = strtodate(startDate, dateFormat );
 startStr = datetostr(addStartDate,"MM/dd/yyyy");
 startAry = split(startStr,"/");

 
 startD = atoi(startAry[1]);
 
 payment = json();
 counter = 1;
 grandTotal = 0;
 totalCommittedPayments = 0;
 for line in loop{
  
  totalFees = 0;
  jsonput(payment,"scheduleID",counter);
  counter = counter + 1;
  jsonput(payment,"billingDate",startDate);
  
  addStartDate = strtodate(startDate, dateFormat );
  startStr = datetostr(addStartDate,"MM/dd/yyyy");
  startAry = split(startStr,"/");
 
  startY = atoi(startAry[2]);
  startM = atoi(startAry[0]);
 
  nextDay = startD;
  nextMonth = startM + 3;
 
  if((startM + 3) > 12){
   startM = (startM + 3) % 12;
   startY = startY + 1;
  }
  else{
   startM = startM + 3;
  }
  lastDayOfMonth = get(days, startM);
  
 
  if(startD > lastDayOfMonth){
  
   nextDay = lastDayOfMonth;
  }
 
 
 
  startDate = string(startY) + "-" + string(startM) + "-" + string(nextDay) + " 00:00:00";
   
  
  row = json();
  committedPayments = 0;
  if((previousPaymentPlan_t == "quarterly") and (contractEndDate_t == previousContractEndDate_t) and (jsonarraytostr(newBillingSchedule_t) <>  "[]")){
   row = jsonarrayget(newBillingSchedule_t, line, "json");
   committedPayments = atof(jsonget(row,"committedPayments", "string",string(0)));
   jsonput(payment,"committedPayments",committedPayments);
  }
  else{
   jsonput(payment,"committedPayments",committedPayments);
  }
  if(line==(noOfQuarters-1)){
   
   oneLicenseFee=totalLicenseFee-oneLicenseFee*(noOfQuarters-1);
   
  }
  jsonput(payment,"licenseFee",oneLicenseFee);
  jsonput(payment,"maintenanceFee",oneMaintenanceFee);
  
  jsonput(payment,"orderID",oRCL_ERP_OrderID_t);
  totalCommittedPayments = totalCommittedPayments + committedPayments;
  totalFees = oneLicenseFee + oneMaintenanceFee;
  
  grandTotal = grandTotal + totalFees;
  jsonput(payment,"totalFee",totalFees);
  jsonarrayappend(billingSchedule, payment);
  
 }
 totalRow = json();
 jsonput(totalRow,"scheduleID","GRAND TOTAL");
 jsonput(totalRow,"licenseFee",totalLicenseFee);
 jsonput(totalRow,"maintenanceFee",totalMaintenanceFee);
 jsonput(totalRow,"committedPayments",totalCommittedPayments);
 jsonput(totalRow,"totalFee",grandTotal);
 jsonarrayappend(billingSchedule, totalRow);
 result= result + _transaction_document_number + dlim + "newBillingSchedule_t" + dlim + jsonarraytostr(billingSchedule) + dend; 
 result= result + _transaction_document_number + dlim + "billingScheduleFlag_t" + dlim + string(False) + dend;
 result= result + _transaction_document_number + dlim + "previousPaymentPlan_t" + dlim + "quarterly" + dend;
 result= result + _transaction_document_number + dlim + "previousContractEndDate_t" + dlim + contractEndDate_t + dend;
 result= result + _transaction_document_number + dlim + "previousNoOfBillings_t" + dlim + "0" + dend;

}

/*
if(paymentPlan_t == "custom" and billingScheduleFlag_t == False and billingScheduleController_t <> 0){
 customBillingSchedule=jsonarray();
 counter = 1;
 payment = json();
 
 indices = range(billingScheduleController_t);
 
 for index in indices {
     jsonput(payment,"scheduleID",counter);
     counter = counter + 1;
     
     jsonput(payment,"billingDate","");
     jsonput(payment,"licenseFee",0);
     jsonput(payment,"maintenanceFee",0);
     jsonput(payment,"committedPayments",0);
     jsonput(payment, "totalFee", 0 );
     jsonarrayappend(customBillingSchedule, payment);
  
 } 
 result= result + _transaction_document_number + dlim + "newBillingSchedule_t" + dlim + jsonarraytostr(custombillingSchedule) + dend;
 result= result + _transaction_document_number + dlim + "billingScheduleFlag_t" + dlim + string(True) + dend;
 result= result + _transaction_document_number + dlim + "previousNoOfBillings_t" + dlim + string(0) + dend;
}
*/
if(paymentPlan_t == "custom"){

 customBillingSchedule=jsonarray();
 totalBillingAmount = 0;
 counter = 1;
 dateFlag = False;
 payment = json();
 
 indices = range(billingScheduleController_t);
 /*
 if(previousPaymentPlan_t <> "custom"){
  indices = range(billingScheduleController_t);
  result= result + _transaction_document_number + dlim + "billingScheduleController_t" + dlim + string(billingScheduleController_t) + dend;
 }*/
 
  
 
 grandTotal = 0;
 totalCommittedPayments = 0;
 totalRowLicenseFee = 0;
 totalRowMaintenanceFee = 0;
 
 for index in indices {
    totalFees = 0;
    row = json();
    
    if((index < previousNoOfBillings_t)  and (jsonarraytostr(newBillingSchedule_t) <>  "[]")){
     row = jsonarrayget(newBillingSchedule_t, index, "json");
    }
    if((previousPaymentPlan_t <> "custom") and (previousNoOfBillings_t <> 0)  and (jsonarraytostr(newBillingSchedule_t) <>  "[]")){
     row = jsonarrayget(newBillingSchedule_t, index, "json");
    }
    rowDate = jsonget(row,"billingDate", "string","");
    
    rowLicenseFee = jsonget(row,"licenseFee", "float",0.0);
    rowMaintenanceFee = jsonget(row,"maintenanceFee", "float",0.0);
    rowCommittedPayments = jsonget(row,"committedPayments", "integer",0);
    if(rowDate <> ""){
     if((comparedates(strtodate(rowDate,dateFormat ),strtodate(contractStartDate_t,dateFormat )) == -1) or (comparedates(strtodate(rowDate,dateFormat ), strtodate(contractEndDate_t,dateFormat )) == 1)){
      dateFlag = True;
      jsonput(payment,"billingDate","");
     }
    }
    
 
    
    
    jsonput(payment,"billingDate",rowDate);
    
    jsonput(payment,"scheduleID",counter);
    counter = counter + 1;
    
  
    
    jsonput(payment,"orderID",oRCL_ERP_OrderID_t);
    jsonput(payment,"licenseFee",rowLicenseFee);
    jsonput(payment,"maintenanceFee",rowMaintenanceFee);
    jsonput(payment,"committedPayments",rowCommittedPayments);
    
    if(previousNoOfBillings_t <> 0){
    if(previousNoOfBillings_t <> billingScheduleController_t){
    if(index == previousNoOfBillings_t){ 
     jsonput(payment,"billingDate","");
  jsonput(payment,"licenseFee",0);
  jsonput(payment,"maintenanceFee",0);
  jsonput(payment,"committedPayments",0);
  jsonput(payment, "totalFee", 0 );
  rowLicenseFee = 0.0;
  rowMaintenanceFee = 0.0;
  rowCommittedPayments = 0;
    }
    }
    }
    if(billingScheduleFlag_t == false){
     jsonput(payment,"billingDate","");
  jsonput(payment,"licenseFee",0);
  jsonput(payment,"maintenanceFee",0);
  jsonput(payment,"committedPayments",0);
  jsonput(payment, "totalFee", 0 );
  rowLicenseFee = 0.0;
  rowMaintenanceFee = 0.0;
  rowCommittedPayments = 0;
    }
    
    totalRowLicenseFee = totalRowLicenseFee + rowLicenseFee;
    totalRowMaintenanceFee = totalRowMaintenanceFee + rowMaintenanceFee;
    totalCommittedPayments = totalCommittedPayments + rowCommittedPayments;
    totalFees = rowLicenseFee + rowMaintenanceFee;
    grandTotal = grandTotal + totalFees;
    jsonput(payment, "totalFee", totalFees);
    
  
    
    jsonarrayappend(customBillingSchedule, payment);
    totalBillingAmount = totalBillingAmount + totalFees;
 }
 
 totalRow = json();
 jsonput(totalRow,"scheduleID","GRAND TOTAL");
 jsonput(totalRow,"licenseFee",totalRowLicenseFee);
 jsonput(totalRow,"maintenanceFee",totalRowMaintenanceFee);
 jsonput(totalRow,"committedPayments",totalCommittedPayments);
 jsonput(totalRow,"totalFee",grandTotal);
 jsonarrayappend(custombillingSchedule, totalRow);
 
 if(dateFlag == true){
  /*customBillingSchedule=jsonarray();
  counter = 1;
  payment = json();
  indices = range(billingScheduleController_t);
  for index in indices {
     jsonput(payment,"scheduleID",counter);
     counter = counter + 1;
     
     jsonput(payment,"billingDate","");
     jsonput(payment,"licenseFee",0);
     jsonput(payment,"maintenanceFee",0);
     jsonput(payment,"committedPayments",0);
     jsonput(payment, "totalFee", 0 );
     jsonarrayappend(customBillingSchedule, payment);
  
  } 
  result= result + _transaction_document_number + dlim + "newBillingSchedule_t" + dlim + jsonarraytostr(custombillingSchedule) + dend;*/
  result= result + _transaction_document_number + dlim + "billingScheduleCheck_t" + dlim + "Date" + dend;
 }
 elif((totalBillingAmount <> round(totalLicenseFee + totalMaintenanceFee,4)) and  (previousPaymentPlan_t == "custom") and (previousNoOfBillings_t == billingScheduleController_t)){
  result= result + _transaction_document_number + dlim + "billingScheduleCheck_t" + dlim + "Fee" + dend;
 }
 else{
  result= result + _transaction_document_number + dlim + "billingScheduleCheck_t" + dlim + "Nope" + dend;
 } 
 
 
  result= result + _transaction_document_number + dlim + "newBillingSchedule_t" + dlim + jsonarraytostr(custombillingSchedule) + dend;
  result= result + _transaction_document_number + dlim + "previousPaymentPlan_t" + dlim + "custom" + dend;
  result= result + _transaction_document_number + dlim + "previousNoOfBillings_t" + dlim + string(billingScheduleController_t) + dend;
  result= result + _transaction_document_number + dlim + "billingScheduleFlag_t" + dlim + string(True) + dend;
  /*if(previousNoOfBillings_t <> 0){
   result= result + _transaction_document_number + dlim + "previousNoOfBillings_t" + dlim + string(billingScheduleController_t - 1) + dend;
  }*/
  
  

}

if(paymentPlan_t == ""){ 
 result= result + _transaction_document_number + dlim + "newBillingSchedule_t" + dlim + jsonarraytostr(billingSchedule) + dend;
 
} 

return result;