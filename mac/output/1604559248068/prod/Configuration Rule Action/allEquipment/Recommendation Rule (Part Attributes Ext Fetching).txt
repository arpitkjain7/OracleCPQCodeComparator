/************************************************
Rule Name: Part Attributes Ext Fetching
Description: Fetch Part Attributes from DB and storing in text area - Part Attributes Fetched.
Author: Shivendra
Creation Date: 16-Jan-2020
 */


upgpart_idx = findinarray(selectUpgdSKUarr_avg,true);
part_idx = findinarray(select_avg,true);
currdate=getdate();
part = PartNumber_avg[part_idx];
upgPart = upgradeSKU_avg_picker[upgpart_idx];
res = recordset();
resultset = recordset();
if(selectUpgradeProduct_avg == true){
res = bmql("select Support_Required,Std_Lic_Metric,Maintenance_Required from BRCM_Part_Master_Ext where MPN = $upgPart");
}
else{
res = bmql("select Support_Required,Std_Lic_Metric,Maintenance_Required from BRCM_Part_Master_Ext where MPN = $part");
}
SupString = "";
SupReqString = "";
licenseMetric="";
maintenanceRequired = "";
partJson = json();
for s in res
{
 SupReqString = get(s,"Support_Required");
 licenseMetric = get(s,"Std_Lic_Metric");
 maintenanceRequired  = get(s,"Maintenance_Required"); 
}
if(selectUpgradeProduct_avg == true){
resultset=bmql("select Existing_Suprt_Type,Start_Date,End_Date from BRCM_Part_Master_Prc where MPN = $upgPart ORDER BY Start_Date ASC");
}
else{
resultset=bmql("select Existing_Suprt_Type,Start_Date,End_Date from BRCM_Part_Master_Prc where MPN = $part ORDER BY Start_Date ASC");
}
for each in resultset{
if(strtojavadate(get(each,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(each,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
   {
    
    SupString = get(each,"Existing_Suprt_Type");
   }

}
jsonput(partJson,"Support Type",SupString);
jsonput(partJson,"Support Required",SupReqString);
jsonput(partJson,"License Metric",licenseMetric);
jsonput(partJson,"Maintenance Required",maintenanceRequired);
finalStr = jsontostr(partJson);
print finalStr;
return finalStr;