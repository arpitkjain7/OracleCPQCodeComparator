/************************************************
/Action Name: ADHOC_CUSTOMER_DETAILS_UPDATE
/Description: This program is responsible for generating renewal quotes and update the tables accordingly
/Author: M Vamsi Krishna
/Creation Date: 28-Jul-2020
History:
 Date          Author            Comment 
 07/28/2020    M Vamsi   VIPER-910 Ability to Mass Update Customer Details on Quote 
 09/28/2020    Satyabrata Acharya       VIPER-985 Updating Customer Classification in CPQ
 */

data = "";
quoteOwner ="";
newQuoteOwner = "";
transactionID = "";
updateResults = bmql("select * from ADHOC_CUST_DETLS_UPD");

//fetching all the details to update in the quote
for updateResult in updateResults
{
 sb = stringbuilder();
 dtsb = stringbuilder();
 response1 =Dict("string");
 response1 =Dict("string");
 Credentials = "";
 url = "";
 addressDetailsNotUpdated = "";
 if(get(updateResult,"QUOTE_STATUS") == "In Progress" or get(updateResult,"QUOTE_STATUS") == "Pending Approval")
 {
 transactionID = get(updateResult,"TRANSACTION_ID");
 print transactionID;
 billToCustomer = get(updateResult,"BILL_TO_CUSTOMER");
 billToAccount = get(updateResult,"BILL_TO_ERP_ACCOUNT");
 billToSiteNum = get(updateResult,"BILL_TO_SITE_NUM");
 billToAddress = get(updateResult,"BILL_TO_ADDRESS");
 billToCity = get(updateResult,"BILL_TO_CITY");
 billToState = get(updateResult,"BILL_TO_STATE");
 billToCountry = get(updateResult,"BILL_TO_COUNTRY");
 billToZip = get(updateResult,"BILL_TO_ZIP");
 billToContactName = get(updateResult,"BILL_TO_CNTCT_NAME");
 billToContactEmail = get(updateResult,"BILL_TO_CNTCT_EMAIL");
 billToContactPhone = get(updateResult,"BILL_TO_CNTCT_PHONE");
 billToContactMobile = get(updateResult,"BILL_TO_CNTCT_MOBILE");
 shipToCustomer = get(updateResult,"SHIP_TO_CUSTOMER");
 shipToAccount = get(updateResult,"SHIP_TO_ERP_ACCOUNT");
 shipToSiteNum = get(updateResult,"SHIP_TO_SITE_NUM");
 shipToAddress = get(updateResult,"SHIP_TO_ADDRESS");
 shipToAddress2 = get(updateResult,"SHIP_TO_ADDRESS_2");
 shipToCity = get(updateResult,"SHIP_TO_CITY");
 shipToState = get(updateResult,"SHIP_TO_STATE");
 shipToCountry = get(updateResult,"SHIP_TO_COUNTRY");
 shipToZip = get(updateResult,"SHIP_TO_ZIP");
 shipToContactName = get(updateResult,"SHIP_TO_CNTCT_NAME");
 shipToContactEmail = get(updateResult,"SHIP_TO_CNTCT_EMAIL");
 shipToContactPhone = get(updateResult,"SHIP_TO_CNTCT_PHONE");
 soldToSiteNum = get(updateResult,"SOLD_TO_SITE_NUM");
 soldToERPNum = get(updateResult,"SOLD_TO_ERP_NUM");
 soldToAddress = get(updateResult,"SOLD_TO_ADDRESS");
 soldToAddress2 = get(updateResult,"SOLD_TO_ADDRESS_2");
 soldToCity = get(updateResult,"SOLD_TO_CITY");
 soldToState = get(updateResult,"SOLD_TO_STATE");
 soldToCountry = get(updateResult,"SOLD_TO_COUNTRY");
 soldToZip = get(updateResult,"SOLD_TO_ZIP");
 soldToContactName = get(updateResult,"SOLD_TO_CNTCT_NAME");
 soldToContactEmail = get(updateResult,"SOLD_TO_CNTCT_EMAIL");
 soldToContactPhone = get(updateResult,"SOLD_TO_CNTCT_PHONE");
 soldToContactMobile = get(updateResult,"SOLD_TO_CNTCT_MOBILE");
 opportunityNumber = get(updateResult,"OPPORTUNITY_NUMBER");
 //VIPER-985 : Adding Customer Classification for adhoc updates
 custClassification = get(updateResult,"CUST_CLASSIFICATION");
 status = get(updateResult,"STATUS");
 
 
 
    if(trim(billToSiteNum) <> "" and NOT isnull(billToSiteNum))
    {
    if(trim(billToCustomer) <> "" and NOT isnull(billToCustomer))
    { 
    sb = sbappend(sb,"<bm:billToCustomer_t>",billToCustomer,"</bm:billToCustomer_t>");
    }
    if(trim(billToAccount) <> "" and NOT isnull(billToAccount))
    {   
    sb = sbappend(sb,"<bm:eRPAccountNumberPurchaseCustomer_t>",billToAccount,"</bm:eRPAccountNumberPurchaseCustomer_t>");
    }
    if(trim(billToSiteNum) <> "" and NOT isnull(billToSiteNum))
    {
    sb = sbappend(sb,"<bm:billToSiteNumber_t>",billToSiteNum,"</bm:billToSiteNumber_t>");
    }
    
    if(trim(billToAddress) <> "" and NOT isnull(billToAddress))
    {
    sb = sbappend(sb,"<bm:billToAddress_t>",billToAddress,"</bm:billToAddress_t>");
    }
    if(trim(billToCity) <> "" and NOT isnull(billToCity))
    {
    sb = sbappend(sb,"<bm:billToCity_t>",billToCity,"</bm:billToCity_t>");
    }
    if(trim(billToState) <> "" and NOT isnull(billToState))
    {
    sb = sbappend(sb,"<bm:billToState_t>",billToState,"</bm:billToState_t>");
    }
    if(trim(billToCountry) <> "" and NOT isnull(billToCountry))
    {
    sb = sbappend(sb,"<bm:billToCountry_t>",billToCountry,"</bm:billToCountry_t>");
    }
    if(trim(billToZip) <> "" and NOT isnull(billToZip))
    {
    sb = sbappend(sb,"<bm:billToZip_t>",billToZip,"</bm:billToZip_t>");
    }
    
    if(trim(billToContactName) <> "" and NOT isnull(billToContactName))
    {
    sb = sbappend(sb,"<bm:billToContactName_t>",billToContactName,"</bm:billToContactName_t>");
    }
    if(trim(billToContactEmail) <> "" and NOT isnull(billToContactEmail))
    {
    sb = sbappend(sb,"<bm:billToContactEmail_t>",billToContactEmail,"</bm:billToContactEmail_t>");
    }
    if(trim(billToContactPhone) <> "" and NOT isnull(billToContactPhone))
    {
    sb = sbappend(sb,"<bm:billToContactWorkPhone_t>",billToContactPhone,"</bm:billToContactWorkPhone_t>");
    }
    if(trim(billToContactMobile) <> "" and NOT isnull(billToContactMobile))
    {
    sb = sbappend(sb,"<bm:billToContactMobilePhone_t>",billToContactMobile,"</bm:billToContactMobilePhone_t>");
    }
    }
    else
    {
     addressDetailsNotUpdated = "Bill To Details not updated as Bill To Site Num is NULL";
    }
    //VIPER-985 : Adding Customer Classification for adhoc updates
    if(trim(custClassification) <> "" and NOT isnull(custClassification))
    {
    sb = sbappend(sb,"<core_t>",custClassification,"</core_t>");
    }
    
    if(trim(shipToSiteNum) <> "" and NOT isnull(shipToSiteNum))
    {
    if(trim(shipToCustomer) <> "" and NOT isnull(shipToCustomer))
    {
    sb = sbappend(sb,"<bm:shipToCustomerSite_t>",shipToCustomer,"</bm:shipToCustomerSite_t>");
    }
    if(trim(shipToAccount) <> "" and NOT isnull(shipToAccount))
    {
    sb = sbappend(sb,"<bm:shipToPartyID_t>",shipToAccount,"</bm:shipToPartyID_t>");
    }
    if(trim(shipToSiteNum) <> "" and NOT isnull(shipToSiteNum))
    {
    sb = sbappend(sb,"<bm:shipToSiteNumber_t>",shipToSiteNum,"</bm:shipToSiteNumber_t>");
    }
    
    
    if(trim(shipToAddress) <> "" and NOT isnull(shipToAddress))
    {
    sb = sbappend(sb,"<bm:_shipTo_t_address>",shipToAddress,"</bm:_shipTo_t_address>");
    }
    if(trim(shipToAddress2) <> "" and NOT isnull(shipToAddress2))
    {
    sb = sbappend(sb,"<bm:_shipTo_t_address_2>",shipToAddress2,"</bm:_shipTo_t_address_2>");
    }
    if(trim(shipToCity) <> "" and NOT isnull(shipToCity))
    {
    sb = sbappend(sb,"<bm:_shipTo_t_city>",shipToCity,"</bm:_shipTo_t_city>");
    }
    if(trim(shipToState) <> "" and NOT isnull(shipToState))
    {
    sb = sbappend(sb,"<bm:_shipTo_t_state>",shipToState,"</bm:_shipTo_t_state>");
    }
    if(trim(shipToCountry) <> "" and NOT isnull(shipToCountry))
    {
    sb = sbappend(sb,"<bm:shipToCountry_t>",shipToCountry,"</bm:shipToCountry_t>");
    }
    if(trim(shipToZip) <> "" and NOT isnull(shipToZip))
    {
    sb = sbappend(sb,"<bm:_shipTo_t_zip>",shipToZip,"</bm:_shipTo_t_zip>");
    }
    
    if(trim(shipToContactName) <> "" and NOT isnull(shipToContactName))
    {
    sb = sbappend(sb,"<bm:shipToContactName_t>",shipToContactName,"</bm:shipToContactName_t>");
    }
    if(trim(shipToContactEmail) <> "" and NOT isnull(shipToContactEmail))
    {
    sb = sbappend(sb,"<bm:shipToContactEmail_t>",shipToContactEmail,"</bm:shipToContactEmail_t>");
    }
    if(trim(shipToContactPhone) <> "" and NOT isnull(shipToContactPhone))
    {
    sb = sbappend(sb,"<bm:shipToContactWorkPhone_t>",shipToContactPhone,"</bm:shipToContactWorkPhone_t>");
    }
    }
    else
    {
     addressDetailsNotUpdated = addressDetailsNotUpdated +"::"+ "Ship To Details not updated as Ship To Site Num is NULL";
    }
    
    if(trim(soldToSiteNum) <> "" and NOT isnull(soldToSiteNum))
    {
    if(trim(soldToERPNum) <> "" and NOT isnull(soldToERPNum))
    {
    sb = sbappend(sb,"<bm:eRPAccountNumberShipTo_t>",soldToERPNum,"</bm:eRPAccountNumberShipTo_t>");
    }
    if(trim(soldToSiteNum) <> "" and NOT isnull(soldToSiteNum))
    {
    sb = sbappend(sb,"<bm:sellToSiteNumber_t>",soldToSiteNum,"</bm:sellToSiteNumber_t>");
    }
    
    if(trim(soldToAddress) <> "" and NOT isnull(soldToAddress))
    {
    sb = sbappend(sb,"<bm:_soldTo_t_address>",soldToAddress,"</bm:_soldTo_t_address>");
    }
    if(trim(soldToAddress2) <> "" and NOT isnull(soldToAddress2))
    {
    sb = sbappend(sb,"<bm:_soldTo_t_address_2>",soldToAddress2,"</bm:_soldTo_t_address_2>");
    }
    if(trim(soldToCity) <> "" and NOT isnull(soldToCity))
    {
    sb = sbappend(sb,"<bm:_soldTo_t_city>",soldToCity,"</bm:_soldTo_t_city>");
    }
    if(trim(soldToState) <> "" and NOT isnull(soldToState))
    {
    sb = sbappend(sb,"<bm:_soldTo_t_state>",soldToState,"</bm:_soldTo_t_state>");
    }
    if(trim(soldToCountry) <> "" and NOT isnull(soldToCountry))
    {
    sb = sbappend(sb,"<bm:_soldTo_t_country>",soldToCountry,"</bm:_soldTo_t_country>");
    }
    if(trim(soldToZip) <> "" and NOT isnull(soldToZip))
    {
    sb = sbappend(sb,"<bm:_soldTo_t_zip>",soldToZip,"</bm:_soldTo_t_zip>");
    }
    
    if(trim(soldToContactName) <> "" and NOT isnull(soldToContactName))
    {
    sb = sbappend(sb,"<bm:soldToContactName_t>",soldToContactName,"</bm:soldToContactName_t>");
    }
    if(trim(soldToContactEmail) <> "" and NOT isnull(soldToContactEmail))
    {
    sb = sbappend(sb,"<bm:soldToContactEmail_t>",soldToContactEmail,"</bm:soldToContactEmail_t>");
    }
    if(trim(soldToContactPhone) <> "" and NOT isnull(soldToContactPhone))
    {
    sb = sbappend(sb,"<bm:soldToContactWorkPhone_t>",soldToContactPhone,"</bm:soldToContactWorkPhone_t>");
    }
    if(trim(soldToContactMobile) <> "" and NOT isnull(soldToContactMobile))
    {
    sb = sbappend(sb,"<bm:soldToContactMobilePhone_t>",soldToContactMobile,"</bm:soldToContactMobilePhone_t>");
    }
    }
    else
    {
     addressDetailsNotUpdated = addressDetailsNotUpdated +"::"+"Sold To  Details not updated as Sold To Site Num is NULL";
    }

           
  
  
 
 data = sbtostring(sb);
 if(status == "" or isnull(status))
 {
 if(NOT isnull(data) and trim(data) <> "")
 {
 
 
 //fetching all the required details to update opportunity in OEC if bill to account is different from licensee account
 results=bmql("select Username,Password,SoapEndpoint from INT_SYSTEM_DETAILS where System='Create_Opportunity'");
 for result in results
 {
 Credentials_sb=stringbuilder();
 Credentials_sb = sbappend(Credentials_sb, get(result,"Username"), ":", get(result,"Password"));
 Credentials=sbtostring(Credentials_sb);
 url=get(result,"SoapEndpoint");
 
 
 }
 
 headersDict = dict("string"); 

 put(headersDict,"Content-Type","application/json");
 encodecredential=encodebase64(Credentials);
 authstring="Basic " + encodecredential;
 put(headersDict,"Authorization",authstring);
 
 GETURL_sb=stringbuilder();
 GETURL_sb=sbappend(GETURL_sb,url,"crmRestApi/resources/11.13.18.02/accounts?q=OrganizationDEO_BRCM_ERPAccount_c='",billToAccount,"'");
 GETURL=sbtostring(GETURL_sb);
 
 url_CreateOpportunity_sb=stringbuilder();
 url_CreateOpportunity_sb=sbappend(url_CreateOpportunity_sb,url,"crmRestApi/resources/11.13.17.11/opportunities");
 url_CreateOpportunity=sbtostring(url_CreateOpportunity_sb);
 
 //fetching information of bill to customer account
 response1 = urldata(GETURL,"GET",headersDict, "");
 
 if(isnull(response1)<>true)
  {
  str1= get(response1,"Message-Body");
  if(Trim(str1) <> "" AND NOT isnull(str1))
  {
  jsonObj2=json(str1);
  billto_Id_array=jsonpathgetmultiple(jsonObj2,"$..PartyId");
  
  if(jsonarraysize(billto_Id_array)>0)
   {
   billto_Id=jsonarrayget(billto_Id_array,0);
   if(Trim(billto_Id) <> "" AND NOT isnull(billto_Id))
   {
   data = data + "<bm:billToCustomerId_t>"+ billto_Id +"</bm:billToCustomerId_t>";
   }
   jsonBodyString_sb1=stringbuilder();
   jsonBodyString_sb1=sbappend(jsonBodyString_sb1,"{\"BRCM_EndCustomerName_Id_c\":",billto_Id,"}");
   response_Opportunity=Dict("string");
   jsonBodyString1=sbtostring(jsonBodyString_sb1);
   
   urlsb=stringbuilder();
   urlsb=sbappend(urlsb,url_CreateOpportunity,"/",opportunityNumber);
   url_CreateOpportunity=sbtostring(urlsb);
   //updating opportunity with BILL TO Account
   response_Opportunity = urldata(url_CreateOpportunity,"PATCH",headersDict,jsonBodyString1);
   }
   }
  }
 //triggering save action to save all the updated details
 
 res=commerce.aDHOC_SAVE(transactionID, data);
 
 dtsb = sbappend(dtsb,"<bm:TRANSACTION_ID>",transactionID,"</bm:TRANSACTION_ID>");
 if(res == "save")
 {
  //triggering sync to opportunity
  syncResponse = util.renewalAdHocSyncToOpty(transactionID);
  
  if(trim(addressDetailsNotUpdated) == "" OR isnull(addressDetailsNotUpdated))
  {
   dtsb = sbappend(dtsb,"<bm:STATUS>","Customer Details Updated and Synced","</bm:STATUS>");
  }
  else
  {
   dtsb = sbappend(dtsb,"<bm:STATUS>",addressDetailsNotUpdated,"</bm:STATUS>");
  }
  
 }
 else
 {
  dtsb = sbappend(dtsb,"<bm:STATUS>",res,"</bm:STATUS>");
  
 }
 //updating ADHOC_CUST_DETLS_UPD data table to mark the record as processed
 dataTableUpdate = commerce.aDHOC_DATA_TABLE_UPDATE("ADHOC_CUST_DETLS_UPD", sbtostring(dtsb));
 
 
 }
 }
 }
}
return "";