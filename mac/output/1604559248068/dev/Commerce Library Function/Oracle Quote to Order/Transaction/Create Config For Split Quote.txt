/************************************************
Rule Name: Create Config For Split Quote
Description: Create Configuration Lines For Split Quote Functionality 
Author: Ramesh Nellimarla
*/

result = "";
response = " ";
modelArray = string[];
partArray  = String[];
lineSelected=FALSE;
jsonObj1 = json();
jsonObj2 = json();

for line in transactionLine{
 if(line.selectLineItem_l == true){
   lineSelected = true;
 }
 }

//==============================================================
//Load selected model lines into an array
//==============================================================
if (lineSelected == true)
{
    modelDocNum= "";
    
    for line in transactionLine
    {  
      if (line._model_variable_name <> "")
      { 
        jsonput(jsonobj1,"model",line._model_variable_name); 
        jsonput(jsonobj1,"productLine",line._model_product_line_var_name); 
        jsonput(jsonobj1,"segment",line._model_segment_var_name);  
        jsonput(jsonobj1,"documentNum",line._document_number);     
                     
        jsonModelString = jsontostr(jsonobj1);
        append(modelArray,jsonModelString); 
         
        modelDocNum  = line._document_number;
      } 
  
     if(line._parent_doc_number <> "" AND line._parent_doc_number == modelDocNum)
      {  
        CStartDate = " ";
        CEndDate = " ";                         
        ltransactionType =" ";
        lbusinessTransactionType =" ";
        lspecialMetric =" "; 
        lenterEnvironment=" ";
        llicenseType =" ";     
        lselectLicenseType =" ";      
        lsupportType  =" ";           
        lsupportPartsPicklist  =" ";  
        llanguageRequired =" ";
        lstandardQuantity =" ";       
        lexistingQuantity =" "; 
        lnonStandardLicenseMetric=" ";      
        llicenseMetric  =" ";        
        lspecialMetricLicense =" ";   
        lUsageQuantity =" ";          
        lUsageExistingQuantity =" ";  
        lProductType =" ";
                
        if (line.contractStartDate_l <> "") {CStartDate = datetostr(strtojavadate(line.contractStartDate_l,"MM/dd/yyyy"),"MM/dd/yyyy HH:mm:ss");}
        if (line.contractEndDate_l<>""){CEndDate = datetostr(strtojavadate(line.contractEndDate_l,"MM/dd/yyyy"),"MM/dd/yyyy HH:mm:ss");}
      
        if (not isnull(line.transactionType_l)){ltransactionType = line.transactionType_l;}
        if (not isnull(line.businessTransactionType_l)){lbusinessTransactionType = line.businessTransactionType_l;}
        if (not isnull(line.specialMetric_l)){lspecialMetric = line.specialMetric_l;}
        if (not isnull(line.enterEnvironment_l)){lenterEnvironment = line.enterEnvironment_l;}
        if (not isnull(line.licenseType_l)){llicenseType = line.licenseType_l;}
        if (not isnull(line.supportType_l)){lsupportType = line.supportType_l;}
        if (not isnull(line.supportPartsPicklist_l)){lsupportPartsPicklist = line.supportPartsPicklist_l;}
        if (not isnull(line.languageRequired_l)){llanguageRequired= line.languageRequired_l;}
      
        if (not isnull(line.standardQuantity_l)){lstandardQuantity = line.standardQuantity_l;}
        if (not isnull(line.existingQuantity_l)){lexistingQuantity = line.existingQuantity_l;}
        if (not isnull(line.nonStandardLicenseMetric_l)){lnonStandardLicenseMetric = line.nonStandardLicenseMetric_l;}
        if (not isnull(line.specialMetricLicense_l)){lspecialMetricLicense = line.specialMetricLicense_l;}
        if (not isnull(line.usageQuantity_l)){lUsageQuantity = line.usageQuantity_l;}
        if (not isnull(line.usageExistingQuantity_l)){lUsageExistingQuantity = line.usageExistingQuantity_l;}
        if (not isnull(line.productType_l)){lProductType = line.productType_l;}
                                            
         jsonput(jsonObj2,"partNum",line._part_number);
         jsonput(jsonObj2,"partName",line.productName_l);
         jsonput(jsonObj2,"quantity",line._price_quantity );
         jsonput(jsonObj2,"licenceType",line.licenseType_l);  
                
         jsonput(jsonObj2,"transactionType",ltransactionType);
         jsonput(jsonObj2,"businessTransactionType",lbusinessTransactionType);
         jsonput(jsonObj2,"specialMetric",lspecialMetric);
         jsonput(jsonObj2,"enterEnvironment",lenterEnvironment);
         jsonput(jsonObj2,"selectLicenseType",llicenseType);
         jsonput(jsonObj2,"supportType",lsupportType);
         jsonput(jsonObj2,"supportPartsPicklist",lsupportPartsPicklist);
         jsonput(jsonObj2,"languageRequired",llanguageRequired);
         jsonput(jsonObj2,"startDate",CStartDate);
         jsonput(jsonObj2,"endDate",CEndDate);
         jsonput(jsonObj2,"standardQuantity",lstandardQuantity);
         jsonput(jsonObj2,"existingQuantity",lexistingQuantity);
         jsonput(jsonObj2,"licenseMetric",lnonStandardLicenseMetric);
         jsonput(jsonObj2,"specialMetricLicense",lspecialMetricLicense);
         jsonput(jsonObj2,"UsageQuantity",lusageQuantity);
         jsonput(jsonObj2,"UsageExistingQuantity",lusageExistingQuantity);
         jsonput(jsonObj2,"ProductType",lproductType);                  
         jsonput(jsonobj2,"documentNum",line._document_number); 
         jsonput(jsonObj2,"parentDoc",line._parent_doc_number);
           
         jsonPartString = jsontostr(jsonobj2);
         append(partArray,jsonPartString);                
       }
    }
 }
//========================================================================

for each in modelArray
{
jsonObj1 = json(each);
docNum   = jsonget(jsonObj1,"documentNum");
model    = jsonget(jsonObj1,"model");
Product  = jsonget(jsonObj1,"productLine");
segment  = jsonget(jsonObj1,"segment");

}



for each1 in partArray
{
jsonObj2      = json(each1);
docNum        = jsonget(jsonObj2,"documentNum");
partNo        = jsonget(jsonObj2,"partNum");
qty           = jsonget(jsonObj2,"quantity");
licenceType   = jsonget(jsonObj2,"licenceType");
parentDoc     = jsonget(jsonObj2,"parentDoc");
}
//===============================================================================
//===============================================================================
//Call to Config API

//================================================================================

if (NOT isempty(modelArray)){
response = util.createModel2(modelArray, partArray, TransactionID, _system_user_session_id);
result = response;
}   
  
 
 Return Result;