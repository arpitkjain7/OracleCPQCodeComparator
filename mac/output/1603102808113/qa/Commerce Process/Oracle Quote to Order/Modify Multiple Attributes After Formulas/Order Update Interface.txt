/************************************************
/Action Name: Order Update Interface
/Description: This action will fetch the order detials from EBS and update the billing schedule accordingly
History:
 Date          Author            Comment 
 09/15/2020    M Vamsi   VIPER-857 Issue with field type in CPQ for Invoice number (invoiceNumber_t )
 */
 result="";
dlim="~";
dend="|";
dateFormat = "MM/dd/yyyy HH:mm:ss";

billingSchedule = jsonarray();
sb = stringbuilder();

mulDelim ="@@@"; //added 
stringfromEBS =updateBillingPlan_t;
splitString =string[]; 
invoiceScheduleID = "";  //added
invoiceNumber_t="";    //added
// VIPER - 857 - Begin - Added new string attribute for invoioce number
invoiceNumber_STR_t=""; //added
// VIPER - 857 - End

invoiceDateSetting_t="";   //added
invoiceStatus_t="";   //added

if(stringfromEBS <> "" and not isnull(stringfromEBS))
{
        splitString = split(stringfromEBS, mulDelim);

}
invoiceScheduleID = splitString[0];
invoiceNumber_t=splitString[1];
invoiceDateSetting_t=splitString[2];
invoiceStatus_t=splitString[3];

row = json();
rowDate = "";
rowLicenseFee = 0.0;
rowMaintenanceFee = 0.0;
rowCommittedPayments = 0.0;
rowTotalFees = 0.0;
totalLicenseFee = 0.0;
totalMaintenanceFee = 0.0;
totalCommittedPayments = 0.0;
grandTotal = 0.0;
quoteRequest = "";
if(jsonarraytostr(newBillingSchedule_t) <> "[]")
{
 if(paymentPlan_t == "paidInFull")
 {
  payment = json();
  row = jsonarrayget(newBillingSchedule_t, 0, "json");
  rowScheduleID = jsonget(row,"scheduleID", "string","");
  rowDate = jsonget(row,"billingDate", "string","");
  rowLicenseFee = jsonget(row,"licenseFee", "float",0.0);
  rowMaintenanceFee = jsonget(row,"maintenanceFee", "float",0.0);
  rowCommittedPayments = jsonget(row,"committedPayments", "float",0.0);
  rowTotalFees = jsonget(row,"totalFee", "float",0.0);
  //rowInvoiceNumber = jsonget(row,"invoiceNumber_t", "integer",0);
  // VIPER - 857 - Begin - assigning new string invoice number with the corresponding value
  rowInvoiceNumber = jsonget(row,"invoiceNumber_t", "string","");
  // VIPER - 857 - End
  rowDateSetting = jsonget(row,"invoiceDateSetting_t", "string","");
  rowInvoiceStatus =  jsonget(row,"invoiceStatus_t", "string","");
  
  jsonput(payment,"scheduleID",rowScheduleID);
  jsonput(payment,"billingDate",rowDate);
  jsonput(payment,"licenseFee",rowLicenseFee);
  jsonput(payment,"maintenanceFee",rowMaintenanceFee);
  jsonput(payment,"committedPayments",rowCommittedPayments);
  jsonput(payment,"totalFee",rowTotalFees);
  jsonput(payment,"invoiceNumber_t",rowInvoiceNumber);
  // VIPER - 857 - Begin - updating new string invoice number with the corresponding value
  if(NOT isnull(rowInvoiceNumber) AND trim(rowInvoiceNumber) <> "")
  {
   jsonput(payment,"invoiceNumber_STR_t",rowInvoiceNumber);
  }
  // VIPER - 857 - End
  jsonput(payment,"invoiceDateSetting_t",rowDateSetting);
  jsonput(payment,"invoiceStatus_t",rowInvoiceStatus);
  
  if(rowScheduleID == invoiceScheduleID){
   //jsonput(payment,"invoiceNumber_t",invoiceNumber_t); 
   // VIPER - 857 - Begin - updating new string invoice number with the corresponding value
   jsonput(payment,"invoiceNumber_STR_t",invoiceNumber_t);
   // VIPER - 857 - End 
   jsonput(payment,"invoiceDateSetting_t",invoiceDateSetting_t);
   jsonput(payment,"invoiceStatus_t",invoiceStatus_t);
  }
  
  
  
  jsonarrayappend(billingSchedule, payment);
  sbappend(sb,_transaction_document_number,dlim,"newBillingSchedule_t",dlim,jsonarraytostr(billingSchedule),dend);
 
 }

 if(paymentPlan_t == "yearly")
 {
  addStartDate = strtodate(contractEndDate_t, dateFormat );
  endDateObj = strtodate(contractEndDate_t, dateFormat );
  startDateObj = strtodate(contractStartDate_t, dateFormat );
  duration = getdiffindays(endDateObj,startDateObj);
 
  noOfYears = integer(duration/365.5) + 1;
  
  loop = range(noOfYears); 
 
  for line in loop
  {
   payment = json();
   row = jsonarrayget(newBillingSchedule_t, line, "json");
   rowScheduleID = jsonget(row,"scheduleID", "string","");
   rowDate = jsonget(row,"billingDate", "string","");
   rowLicenseFee = jsonget(row,"licenseFee", "float",0.0);
   rowMaintenanceFee = jsonget(row,"maintenanceFee", "float",0.0);
   rowCommittedPayments = jsonget(row,"committedPayments", "float",0.0);
   rowTotalFees = jsonget(row,"totalFee", "float",0.0);
   //rowInvoiceNumber = jsonget(row,"invoiceNumber_t", "integer",0);
   // VIPER - 857 - Begin - assigning new string invoice number with the corresponding value
   rowInvoiceNumber = jsonget(row,"invoiceNumber_t", "string","");
   // VIPER - 857 - End
   rowDateSetting = jsonget(row,"invoiceDateSetting_t", "string","");
   rowInvoiceStatus =  jsonget(row,"invoiceStatus_t", "string","");
   
   totalLicenseFee = totalLicenseFee + rowLicenseFee;
   totalMaintenanceFee = totalMaintenanceFee + rowMaintenanceFee;
   totalCommittedPayments = totalCommittedPayments + rowCommittedPayments;
   grandTotal = grandTotal + rowTotalFees;
   
   jsonput(payment,"scheduleID",rowScheduleID);
   jsonput(payment,"billingDate",rowDate);
   jsonput(payment,"licenseFee",rowLicenseFee);
   jsonput(payment,"maintenanceFee",rowMaintenanceFee);
   jsonput(payment,"committedPayments",rowCommittedPayments);
   jsonput(payment,"totalFee",rowTotalFees);
   jsonput(payment,"invoiceNumber_t",rowInvoiceNumber);
   // VIPER - 857 - Begin - updating new string invoice number with the corresponding value
   if(NOT isnull(rowInvoiceNumber) AND trim(rowInvoiceNumber) <> "")
   {
   jsonput(payment,"invoiceNumber_STR_t",rowInvoiceNumber);
   }
   // VIPER - 857 - End
   jsonput(payment,"invoiceDateSetting_t",rowDateSetting);
   jsonput(payment,"invoiceStatus_t",rowInvoiceStatus);
   
   if(rowScheduleID == invoiceScheduleID){
   //jsonput(payment,"invoiceNumber_t",invoiceNumber_t); 
   // VIPER - 857 - Begin - updating new string invoice number with the corresponding value
   jsonput(payment,"invoiceNumber_STR_t",invoiceNumber_t);
   // VIPER - 857 - End 
   jsonput(payment,"invoiceDateSetting_t",invoiceDateSetting_t);
   jsonput(payment,"invoiceStatus_t",invoiceStatus_t);
   }
  
   
  
   jsonarrayappend(billingSchedule, payment);
   

  }
  
  totalRow = json();
  jsonput(totalRow,"scheduleID","GRAND TOTAL");
  jsonput(totalRow,"licenseFee",totalLicenseFee);
  jsonput(totalRow,"maintenanceFee",totalMaintenanceFee);
  jsonput(totalRow,"committedPayments",totalCommittedPayments);
  jsonput(totalRow,"totalFee",grandTotal);
   
  jsonarrayappend(billingSchedule, totalRow);
  sbappend(sb,_transaction_document_number,dlim,"newBillingSchedule_t",dlim,jsonarraytostr(billingSchedule),dend);
 }

 if(paymentPlan_t == "quarterly")
 {
  days = dict("integer");
  put(days,1,31);
  put(days,2,28);
  put(days,3,31);
  put(days,4,30);
  put(days,5,31);
  put(days,6,30);
  put(days,7,31);
  put(days,8,31);
  put(days,9,30);
  put(days,10,31);
  put(days,11,30);
  put(days,12,31);
 
  startDate = contractStartDate_t;
  endDateObj = strtodate(contractEndDate_t, dateFormat );
  startDateObj = strtodate(contractStartDate_t, dateFormat );
  duration = getdiffindays(endDateObj,startDateObj);

  noOfQuarters = integer(duration/91.4) + 1;
  if(noOfQuarters == 0)
  {
   noOfQuarters = 1;
  } 
  loop = range(noOfQuarters);
 
  for line in loop
  {
   payment = json();
   row = jsonarrayget(newBillingSchedule_t, line, "json");
   rowScheduleID = jsonget(row,"scheduleID", "string","");
   rowDate = jsonget(row,"billingDate", "string","");
   rowLicenseFee = jsonget(row,"licenseFee", "float",0.0);
   rowMaintenanceFee = jsonget(row,"maintenanceFee", "float",0.0);
   rowCommittedPayments = jsonget(row,"committedPayments", "float",0.0);
   rowTotalFees = jsonget(row,"totalFee", "float",0.0);
   //rowInvoiceNumber = jsonget(row,"invoiceNumber_t", "integer",0);
   // VIPER - 857 - Begin - assigning new string invoice number with the corresponding value
   rowInvoiceNumber = jsonget(row,"invoiceNumber_t", "string","");
   // VIPER - 857 - End
   rowDateSetting = jsonget(row,"invoiceDateSetting_t", "string","");
   rowInvoiceStatus =  jsonget(row,"invoiceStatus_t", "string","");
   
   totalLicenseFee = totalLicenseFee + rowLicenseFee;
   totalMaintenanceFee = totalMaintenanceFee + rowMaintenanceFee;
   totalCommittedPayments = totalCommittedPayments + rowCommittedPayments;
   grandTotal = grandTotal + rowTotalFees;
   
   jsonput(payment,"scheduleID",rowScheduleID);
   jsonput(payment,"billingDate",rowDate);
   jsonput(payment,"licenseFee",rowLicenseFee);
   jsonput(payment,"maintenanceFee",rowMaintenanceFee);
   jsonput(payment,"committedPayments",rowCommittedPayments);
   jsonput(payment,"totalFee",rowTotalFees);
   jsonput(payment,"invoiceNumber_t",rowInvoiceNumber);
   // VIPER - 857 - Begin - updating new string invoice number with the corresponding value
   if(NOT isnull(rowInvoiceNumber) AND trim(rowInvoiceNumber) <> "")
   {
   jsonput(payment,"invoiceNumber_STR_t",rowInvoiceNumber);
   }
   // VIPER - 857 - End
   jsonput(payment,"invoiceDateSetting_t",rowDateSetting);
   jsonput(payment,"invoiceStatus_t",rowInvoiceStatus);
   
   if(rowScheduleID == invoiceScheduleID){
   //jsonput(payment,"invoiceNumber_t",invoiceNumber_t); 
   // VIPER - 857 - Begin - updating new string invoice number with the corresponding value
   jsonput(payment,"invoiceNumber_STR_t",invoiceNumber_t); 
   // VIPER - 857 - End
   jsonput(payment,"invoiceDateSetting_t",invoiceDateSetting_t);
   jsonput(payment,"invoiceStatus_t",invoiceStatus_t);
   }
  
   
  
   jsonarrayappend(billingSchedule, payment);
  }
  
  totalRow = json();
  jsonput(totalRow,"scheduleID","GRAND TOTAL");
  jsonput(totalRow,"licenseFee",totalLicenseFee);
  jsonput(totalRow,"maintenanceFee",totalMaintenanceFee);
  jsonput(totalRow,"committedPayments",totalCommittedPayments);
  jsonput(totalRow,"totalFee",grandTotal);
   
  jsonarrayappend(billingSchedule, totalRow);
  sbappend(sb,_transaction_document_number,dlim,"newBillingSchedule_t",dlim,jsonarraytostr(billingSchedule),dend);
 }

 if(paymentPlan_t == "custom")
 {
  loop = range(billingScheduleController_t);
  for line in loop
  {
   payment = json();
   row = jsonarrayget(newBillingSchedule_t, line, "json");
   rowScheduleID = jsonget(row,"scheduleID", "string","");
   rowDate = jsonget(row,"billingDate", "string","");
   rowLicenseFee = jsonget(row,"licenseFee", "float",0.0);
   rowMaintenanceFee = jsonget(row,"maintenanceFee", "float",0.0);
   rowCommittedPayments = jsonget(row,"committedPayments", "float",0.0);
   rowTotalFees = jsonget(row,"totalFee", "float",0.0);
   //rowInvoiceNumber = jsonget(row,"invoiceNumber_t", "integer",0);
   // VIPER - 857 - Begin - assigning new string invoice number with the corresponding value
   rowInvoiceNumber = jsonget(row,"invoiceNumber_t", "string","");
   // VIPER - 857 - End
   rowDateSetting = jsonget(row,"invoiceDateSetting_t", "string","");
   rowInvoiceStatus =  jsonget(row,"invoiceStatus_t", "string","");
   
   totalLicenseFee = totalLicenseFee + rowLicenseFee;
   totalMaintenanceFee = totalMaintenanceFee + rowMaintenanceFee;
   totalCommittedPayments = totalCommittedPayments + rowCommittedPayments;
   grandTotal = grandTotal + rowTotalFees;
   
   jsonput(payment,"scheduleID",rowScheduleID);
   jsonput(payment,"billingDate",rowDate);
   jsonput(payment,"licenseFee",rowLicenseFee);
   jsonput(payment,"maintenanceFee",rowMaintenanceFee);
   jsonput(payment,"committedPayments",rowCommittedPayments);
   jsonput(payment,"totalFee",rowTotalFees);
   jsonput(payment,"invoiceNumber_t",rowInvoiceNumber);
   // VIPER - 857 - Begin - updating new string invoice number with the corresponding value
   if(NOT isnull(rowInvoiceNumber) AND trim(rowInvoiceNumber) <> "")
   {
   jsonput(payment,"invoiceNumber_STR_t",rowInvoiceNumber);
   }
   // VIPER - 857 - End
   jsonput(payment,"invoiceDateSetting_t",rowDateSetting);
   jsonput(payment,"invoiceStatus_t",rowInvoiceStatus);
   
   if(rowScheduleID == invoiceScheduleID){
   //jsonput(payment,"invoiceNumber_t",invoiceNumber_t); 
   // VIPER - 857 - Begin - updating new string invoice number with the corresponding value
   jsonput(payment,"invoiceNumber_STR_t",invoiceNumber_t);
   // VIPER - 857 - End 
   jsonput(payment,"invoiceDateSetting_t",invoiceDateSetting_t);
   jsonput(payment,"invoiceStatus_t",invoiceStatus_t);
   }
  
   
  
   jsonarrayappend(billingSchedule, payment);
   
  }
  
  totalRow = json();
  jsonput(totalRow,"scheduleID","GRAND TOTAL");
  jsonput(totalRow,"licenseFee",totalLicenseFee);
  jsonput(totalRow,"maintenanceFee",totalMaintenanceFee);
  jsonput(totalRow,"committedPayments",totalCommittedPayments);
  jsonput(totalRow,"totalFee",grandTotal);
   
  jsonarrayappend(billingSchedule, totalRow);
  sbappend(sb,_transaction_document_number,dlim,"newBillingSchedule_t",dlim,jsonarraytostr(billingSchedule),dend);
 }
 
}

result = sbtostring(sb);
return result;