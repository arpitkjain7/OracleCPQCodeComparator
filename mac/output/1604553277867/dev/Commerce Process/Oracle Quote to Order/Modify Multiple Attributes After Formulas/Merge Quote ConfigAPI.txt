/************************************************
Rule Name: Merge Quote ConfigAPI
Description: This action triggers config API and Merge Quote Action which add all the line items from child to parent quote
Author: M Vamsi Krishna
Creation Date: 22-FEB-2019
Modified by Ravi on July 27 2019 for populating Product Group Config Attribute  and to convert part name to upper case as part of Regression Issue BROCAD2-5543
Modified by Ravi on Feb 06 2020 As part of Jira # SYMINT-4215 to include HW Upgrade SKUS changes in Merge, A new Parent child String format is introdused for Upgrade SKU's
04/16/2020    M Vamsi   VIPER-778 - Resolve 20A upgrade issue
05/27/2020    Adithya Suresh  SYMINT-7850 - Added Prior Contract Number and Prior Contract Line Number to the upgrade parent child string
13/07/2020 Kavita Lolla  VIPER-779 - Regression Issue: Unable to merge Configured parts with special characters in Description
14/07/2020 M Vamsi   VIPER-716 - Merge Quote - Update Line Discounts from Merged quotes to Parent quote for Configured lines
*/

retString = "";
xpaths = string[1];

segmentName = "";
productLineName = "";
modelName = "";
documentNumber = "";
parentDocumentNumber = "";
modelVarName = "";
modelArray = string[];
saveTransaction = false;
JsonMergedQuotes = jsonarray();
resultarray = "";
mergedQuoteID = "";
username = "";
password = "";
fileLocation = "";
soapendpoint = "";
productgroup = "";
transactionID = bs_id;
requestedDisc = "";
previousPartNumber = "";
discount = stringbuilder();
prevPartumber = string[];
sb = stringbuilder();
lcurrentSKU = "";
lfinalUpgradeSKU = "";
lserial = "";

//SYMINT-7850
lpriorContractNumber = "";
lpriorContractLineNumber = "";

lunlimited = "";
lsupportOptOut = "";
ltotalNewSupportTermDays = "";
ltransactionType = "";
count = 0;
count1 =0;
    d= dict("string");
       
        resultDet= bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Merge_Quote'");

for r in resultDet
{
username = get(r,"Username");
password = get(r,"Password");
fileLocation = get(r,"File_Location");
soapendpoint = get(r,"SoapEndpoint");
}


 put(d,"userName",username); 
  put(d,"pwd",password);



if(quotationList_t <> "" and quotationList_t <> " " and NOT isnull(quotationList_t)){
 jsonObj = json(quotationList_t);
 
 jsonArrayIndex = range(jsonarraysize(selectedQuotes_array_t));
 
 for eachIndex in jsonArrayIndex{
  jsonSelectedObj = jsonarrayget(selectedQuotes_array_t, eachIndex, "json");
  selectedRow = jsonget(jsonSelectedObj, "selectQuotes_t", "string");
  if(selectedRow == "True" or selectedRow == "true"){
   quoteID = jsonget(jsonSelectedObj, "quotes_t", "string");
           mergedQuoteID = mergedQuoteID + "," + quoteID;
   bsID = jsonget(jsonObj, quoteID, "string");
   result = util.getTransactions(bsID);
   
   if(containskey(result, "ERROR")){
    retString = get(result, "ERROR");
   }elif(containskey(result, "SUCCESS")){
    xmlResponse = get(result, "SUCCESS");
    count = 0;
    subDocStartPosition = find(xmlResponse, "<bm:sub_documents>");
    subDocEndPosition = find(xmlResponse, "</bm:sub_documents>");
    subDocument = substring(xmlResponse, subDocStartPosition+len("<bm:sub_documents>"), subDocEndPosition+len("</bm:sub_documents>"));
    //print subDocument;
    //VIPER-716 - Begin - Creating XPath for Fulfillement set 
    xpathbuilder = "/soap:Envelope/soap:Body/bm:getTransactionResponse/bm:transaction/bm:data_xml/bm:transaction/bm:sub_documents/bm:transactionLine[bm:fulfillmentSet_l=";
    //VIPER-716 - End
    
    jsonArrayObj = jsonarray();
    lineArray = split(subDocument,"</bm:transactionLine>");
    resultAttributeArray = string[];
    jsonArrayObj=jsonarray();
    
    for each in lineArray
      {
     modelattr=find (each, "<bm:_model_name>");
     
     
    modelparentattr=find (each, "<bm:_parent_line_item>");
    
    if(modelattr > 0)
    {
     
     modelVarNameStartPoristion = find(each, "<bm:_model_variable_name>");
     modelVarNameEndPosition = find(each, "</bm:_model_variable_name>");
     modelVarName = substring(each, modelVarNameStartPoristion+len("<bm:_model_variable_name>"), modelVarNameEndPosition);
     
     
     
     modelNameStartPoristion = find(each, "<bm:_model_name>");
     modelNameEndPosition = find(each, "</bm:_model_name>");
     modelName = substring(each, modelNameStartPoristion+len("<bm:_model_name>"), modelNameEndPosition);
     
     
     
     segmentNameStartPoristion = find(each, "<bm:_model_segment_var_name>");
     segmentNameEndPoristion = find(each, "</bm:_model_segment_var_name>");
     segmentName = substring(each, segmentNameStartPoristion+len("<bm:_model_segment_var_name>"), segmentNameEndPoristion);
     
     
     productLineNameStartPoristion = find(each, "<bm:_model_product_line_var_name>");
     productLineNameEndPoristion = find(each, "</bm:_model_product_line_var_name>");
     productLineName = substring(each, productLineNameStartPoristion+len("<bm:_model_product_line_var_name>"), productLineNameEndPoristion);
     
     
     
     if(find(each,"<bm:_document_number>") > 0)
     {
     documentNumberStartPosition = find(each,"<bm:_document_number>");
     documentNumberEndPosition = find(each,"</bm:_document_number>");
     documentNumber = substring(each, documentNumberStartPosition+len("<bm:_document_number>"), documentNumberEndPosition);
     }
     
     jsonModelObj = json();
     jsonput(jsonModelObj,"modelName",modelName);
     jsonput(jsonModelObj,"segmentName",segmentName);
     jsonput(jsonModelObj,"productLineName",productLineName);
     
     retVal = "";
     retVal1 = "";
     trans       = ""; 
       PCStr       = " ";
       strPSAC     = 0 ;
       strSAVG     = " ";
       strPartNo   = " ";
       strPartName = " ";
       strQty      = " ";
       strLicencetype = "";
       coveredProduct = "";
       //VIPER-716 - Variable Declaration
       requestedDisc = "";
       fulfillmentSetID = "";
       Partandfulfillment = "";
       count1 = 0;
       //VIPER-716 - End
   

       put(d,"sessionId",_system_user_session_id);
       put(d,"Company_Name",_system_company_name);
       put(d,"Product_Family",segmentName);
       put(d,"Product_Line",productLineName);
       put(d,"Model",modelVarName);
       put(d,"bs_id",bs_id);
       
     for eachModel in lineArray
      {
      
      
      parentLineItemStartPoristion = find(eachModel, "<bm:_parent_line_item>");
      parentLineItemEndPosition = find(eachModel, "</bm:_parent_line_item>");
      parentLineItem = substring(eachModel, parentLineItemStartPoristion+len("<bm:_parent_line_item>"), parentLineItemEndPosition);
      
      if(find(eachModel,"<bm:_parent_doc_number>") > 0)
     {
      parentDocumentNumberStartPosition = find(eachModel,"<bm:_parent_doc_number>");
     parentDocumentNumberEndPosition = find(eachModel,"</bm:_parent_doc_number>");
     parentDocumentNumber = substring(eachModel, parentDocumentNumberStartPosition+len("<bm:_parent_doc_number>"), parentDocumentNumberEndPosition);
     }
         
     
      
      
      modelattr=find (eachModel, "<bm:_model_name>");
      modelparentattr=find (eachModel, "<bm:_parent_line_item>");
      if(modelName == parentLineItem and documentNumber == parentDocumentNumber)
       {
       if(find(eachModel,"<bm:coveredProduct_l>") > 0)
              {
        coveredProductStartPosition = find(eachModel, "<bm:coveredProduct_l>");
        coveredProductEndPosition = find(eachModel, "</bm:coveredProduct_l>");
        coveredProduct = substring(eachModel, coveredProductStartPosition+len("<bm:coveredProduct_l>"), coveredProductEndPosition);
        }
       if(find(eachModel,"<bm:fulfillmentSet_l>") > 0)
              {
        fulfillmentSetStartPosition = find(eachModel, "<bm:fulfillmentSet_l>");
        fulfillmentSetEndPosition = find(eachModel, "</bm:fulfillmentSet_l>");
        fulfillmentSetID = substring(eachModel, fulfillmentSetStartPosition +len("<bm:fulfillmentSet_l>"), fulfillmentSetEndPosition );
        }
       
       if(len(coveredProduct) < 1)
        {
              partNumber        = "";
       partName      = "";
       quantity      = "";
       licenseType   = "";
       ltransactionType = "";
       lbusinessTransactionType = "";
       lspecialMetric = "";
       lenterEnvironment = "";
       llicenseType = "";
       lsupportType = "";
       llanguageRequired = "";
       lstandardQuantity = "";
       lexistingQuantity = "";
       lnonStandardLicenseMetric = "";
       llicenseMetric = "";
       lspecialMetricLicense = "";
       lUsageQuantity = "";
       lUsageExistingQuantity = "";
       lProductType = "";
       CStartDate = "";
       CEndDate = "";
       supportPart= "";
       //requestedDisc = "";
       
       
        if(find(eachModel,"<bm:_part_number>") > 0)
              {
        partNumberStartPosition = find(eachModel, "<bm:_part_number>");
        partNumberEndPosition = find(eachModel, "</bm:_part_number>");
        partNumber = substring(eachModel, partNumberStartPosition+len("<bm:_part_number>"), partNumberEndPosition);
        }
        if(find(eachModel,"<bm:_price_quantity>") > 0)
              {
        quantityStartPosition = find(eachModel, "<bm:_price_quantity>");
        quantityEndPosition = find(eachModel, "</bm:_price_quantity>");
        quantity = substring(eachModel, quantityStartPosition+len("<bm:_price_quantity>"), quantityEndPosition);
        }
        if(find(eachModel,"<bm:_part_desc>") > 0)
              {
        partNameStartPosition = find(eachModel,"<bm:_part_desc>");
        partNameEndPosition = find(eachModel,"</bm:_part_desc>");
        partName = substring(eachModel, partNameStartPosition+len("<bm:_part_desc>"), partNameEndPosition);
        }
        
        if(find(eachModel,"<bm:licenseType_l>") > 0)
              {
        licenseTypeStartPosition = find(eachModel,"<bm:licenseType_l>");
        licenseTypeEndPosition = find(eachModel,"</bm:licenseType_l>");
        licenseType = substring(eachModel, licenseTypeStartPosition+len("<bm:licenseType_l>"), licenseTypeEndPosition);
        }
        
        if(find(eachModel,"<bm:transactionTypeM_l>") > 0)
           {
           ltransactionTypeStartPosition = find(eachModel, "<bm:transactionTypeM_l>");
           ltransactionTypeEndPosition = find(eachModel, "</bm:transactionTypeM_l>");
           ltransactionType = substring(eachModel, ltransactionTypeStartPosition+len("<bm:transactionTypeM_l>"), ltransactionTypeEndPosition);
           
           }
           
           if(find(eachModel,"<bm:businessTransactionType_l>") > 0)
           {
           lbusinessTransactionTypeStartPosition = find(eachModel, "<bm:businessTransactionType_l>");
           lbusinessTransactionTypeEndPosition = find(eachModel, "</bm:businessTransactionType_l>");
           lbusinessTransactionType = substring(eachModel, lbusinessTransactionTypeStartPosition+len("<bm:businessTransactionType_l>"), lbusinessTransactionTypeEndPosition);
           
           }
           
           if(find(eachModel,"<bm:specialMetric_l>") > 0)
           {
           lspecialMetricStartPosition = find(eachModel, "<bm:specialMetric_l>");
           lspecialMetricEndPosition = find(eachModel, "</bm:specialMetric_l>");
           lspecialMetric = substring(eachModel, lspecialMetricStartPosition+len("<bm:specialMetric_l>"), lspecialMetricEndPosition);
           
           }
           
           if(find(eachModel,"<bm:enterEnvironment_l>") > 0)
           {
           lenterEnvironmentStartPosition = find(eachModel, "<bm:enterEnvironment_l>");
           lenterEnvironmentEndPosition = find(eachModel, "</bm:enterEnvironment_l>");
           lenterEnvironment = substring(eachModel, lenterEnvironmentStartPosition+len("<bm:enterEnvironment_l>"), lenterEnvironmentEndPosition);
           
           }
           
           if(find(eachModel,"<bm:licenseType_l>") > 0)
           {
           llicenseTypeStartPosition = find(eachModel, "<bm:licenseType_l>");
           llicenseTypeEndPosition = find(eachModel, "</bm:licenseType_l>");
           llicenseType = substring(eachModel, llicenseTypeStartPosition+len("<bm:licenseType_l>"), llicenseTypeEndPosition);
           
           }
           
            
           
            if(find(eachModel,"<bm:supportType_l>") > 0)
           {    
           lsupportTypeStartPosition = find(eachModel, "<bm:supportType_l>");
           lsupportTypeEndPosition = find(eachModel, "</bm:supportType_l>");
           lsupportType = substring(eachModel, lsupportTypeStartPosition+len("<bm:supportType_l>"), lsupportTypeEndPosition);
           
              }        
           
           
           if(find(eachModel,"<bm:languageRequired_l>") > 0)
           {
           llanguageRequiredStartPosition = find(eachModel, "<bm:languageRequired_l>");
           llanguageRequiredEndPosition = find(eachModel, "</bm:languageRequired_l>");
           llanguageRequired = substring(eachModel, llanguageRequiredStartPosition+len("<bm:languageRequired_l>"), llanguageRequiredEndPosition);
           
           }
           
           if(find(eachModel,"<bm:standardQuantity_l>") > 0)
           {
           lstandardQuantityStartPosition = find(eachModel, "<bm:standardQuantity_l>");
           lstandardQuantityEndPosition = find(eachModel, "</bm:standardQuantity_l>");
           lstandardQuantity = substring(eachModel, lstandardQuantityStartPosition+len("<bm:standardQuantity_l>"), lstandardQuantityEndPosition);
           
           }
           
           if(find(eachModel,"<bm:existingQuantity_l>") > 0)
           {
           lexistingQuantityStartPosition = find(eachModel, "<bm:existingQuantity_l>");
           lexistingQuantityEndPosition = find(eachModel, "</bm:existingQuantity_l>");
           lexistingQuantity = substring(eachModel, lexistingQuantityStartPosition+len("<bm:existingQuantity_l>"), lexistingQuantityEndPosition);
           
           }
           
           if(find(eachModel,"<bm:nonStandardLicenseMetric_l>") > 0)
           {
           lnonStandardLicenseMetricStartPosition = find(eachModel, "<bm:nonStandardLicenseMetric_l>");
           lnonStandardLicenseMetricEndPosition = find(eachModel, "</bm:nonStandardLicenseMetric_l>");
           lnonStandardLicenseMetric = substring(eachModel, lnonStandardLicenseMetricStartPosition+len("<bm:nonStandardLicenseMetric_l>"), lnonStandardLicenseMetricEndPosition);
           
           }
           
           if(find(eachModel,"<bm:licenseMetric_l>") > 0)
           {
           llicenseMetricStartPosition = find(eachModel, "<bm:licenseMetric_l>");
           llicenseMetricEndPosition = find(eachModel, "</bm:licenseMetric_l>");
           llicenseMetric = substring(eachModel, llicenseMetricStartPosition+len("<bm:licenseMetric_l>"), llicenseMetricEndPosition);
           
           }
        //Changes made as part of BROCAD2-5543 - To include product group in Merge Config api call as it was new attribute added to config screen 
        if(find(eachModel,"<bm:productGroup_l>") > 0)
           {
           productGroupStartPosition = find(eachModel, "<bm:productGroup_l>");
           productGroupEndPosition = find(eachModel, "</bm:productGroup_l>");
           productGroup = substring(eachModel, productGroupStartPosition+len("<bm:productGroup_l>"), productGroupEndPosition);
           
           }
        ////Changes made as part of BROCAD2-5543  End 
           
           if(find(eachModel,"<bm:specialMetricLicense_l>") > 0)
           {
           lspecialMetricLicenseStartPosition = find(eachModel, "<bm:specialMetricLicense_l>");
           lspecialMetricLicenseEndPosition = find(eachModel, "</bm:specialMetricLicense_l>");
           lspecialMetricLicense = substring(eachModel, lspecialMetricLicenseStartPosition+len("<bm:specialMetricLicense_l>"), lspecialMetricLicenseEndPosition);
           
           }
           
           if(find(eachModel,"<bm:usageQuantity_l>") > 0)
           {
           lUsageQuantityStartPosition = find(eachModel, "<bm:usageQuantity_l>");
           lUsageQuantityEndPosition = find(eachModel, "</bm:usageQuantity_l>");
           lUsageQuantity = substring(eachModel, lUsageQuantityStartPosition+len("<bm:usageQuantity_l>"), lUsageQuantityEndPosition);
           
           }
           
           if(find(eachModel,"<bm:usageExistingQuantity_l>") > 0)
           {
           lUsageExistingQuantityStartPosition = find(eachModel, "<bm:usageExistingQuantity_l>");
           lUsageExistingQuantityEndPosition = find(eachModel, "</bm:usageExistingQuantity_l>");
           lUsageExistingQuantity = substring(eachModel, lUsageExistingQuantityStartPosition+len("<bm:usageExistingQuantity_l>"), lUsageExistingQuantityEndPosition);
           
           }
           
           if(find(eachModel,"<bm:productType_l>") > 0)
           {
           lProductTypeStartPosition = find(eachModel, "<bm:productType_l>");
           lProductTypeEndPosition = find(eachModel, "</bm:productType_l>");
           lProductType = substring(eachModel, lProductTypeStartPosition+len("<bm:productType_l>"), lProductTypeEndPosition);
           
           }
           if(find(eachModel,"<bm:contractStartDate_l>") > 0)
           {
           CStartDateStartPosition = find(eachModel, "<bm:contractStartDate_l>");
      CStartDateEndPosition = find(eachModel, "</bm:contractStartDate_l>");
           //CStartDate = substring(each, CStartDateStartPosition+len("<bm:contractStartDate_l>"), CStartDateEndPosition);
           CStartDate = datetostr(strtojavadate(substring(eachModel, CStartDateStartPosition+len("<bm:contractStartDate_l>"), CStartDateEndPosition),"yyyy-MM-dd HH:mm:ss"),"MM/dd/yyyy HH:mm:ss");
           
           }
           if(find(eachModel,"<bm:contractEndDate_l>") > 0)
           {
           CEndDateStartPosition = find(eachModel, "<bm:contractEndDate_l>");
           CEndDateEndPosition = find(eachModel, "</bm:contractEndDate_l>");
           CEndDate = datetostr(strtojavadate(substring(eachModel, CEndDateStartPosition+len("<bm:contractEndDate_l>"), CEndDateEndPosition),"yyyy-MM-dd HH:mm:ss"),"MM/dd/yyyy HH:mm:ss");
           
           }
           if(find(eachModel,"<bm:supportPartsPicklist_l>") > 0)
           {
           supportPartStartPosition = find(eachModel, "<bm:supportPartsPicklist_l>");
           supportPartEndPosition = find(eachModel, "</bm:supportPartsPicklist_l>");
           supportPart = substring(eachModel, supportPartStartPosition+len("<bm:supportPartsPicklist_l>"), supportPartEndPosition);
           
           count1 = 0;
           }
           //VIPER-716 - Begin - fetching required discount value for individual lines
           if(find(eachModel,"<bm:requestedDiscount_l>") > 0)
           {
           requestedDiscStartPosition = find(eachModel, "<bm:requestedDiscount_l>");
           requestedDiscEndPosition = find(eachModel, "</bm:requestedDiscount_l>");
           requestedDisc = substring(eachModel, requestedDiscStartPosition+len("<bm:requestedDiscount_l>"), requestedDiscEndPosition);
           
           documentNumStartPosition = find(eachModel, "<bm:_document_number>");
           documentNumEndPosition = find(eachModel, "</bm:_document_number>");
           documentNum = substring(eachModel, documentNumStartPosition+len("<bm:_document_number>"), documentNumEndPosition);
          
           transactionIDStartPosition = find(eachModel, "<bm:transactionID_l>");
           transactionIDEndPosition = find(eachModel, "</bm:transactionID_l>");
           transactionID = substring(eachModel, transactionIDStartPosition+len("<bm:transactionID_l>"), transactionIDEndPosition);
           //requestedDisc = requestedDisc + "," + documentNum + "," + transactionID + "$";
           sbappend(discount,requestedDisc);
           
           
           }
           //VIPER-716 - End
           //print requestedDisc;
       

       partNo        = partNumber;
       partName      = partName;
       quantity      = quantity;
       licenceType   = licenseType;
       ltransactionType = ltransactionType;
       lbusinessTransactionType = lbusinessTransactionType;
       lspecialMetric = lspecialMetric;
       lenterEnvironment = lenterEnvironment;
       llicenseType = llicenseType;
       lsupportType = lsupportType;
       llanguageRequired = llanguageRequired;
       lstandardQuantity = lstandardQuantity;
       lexistingQuantity = lexistingQuantity;
       lnonStandardLicenseMetric = lnonStandardLicenseMetric;
       llicenseMetric = llicenseMetric;
       lspecialMetricLicense = lspecialMetricLicense;
       lUsageQuantity = lUsageQuantity;
       lUsageExistingQuantity = lUsageExistingQuantity;
       lProductType = lProductType;
       CStartDate = CStartDate;
       CEndDate = CEndDate;
       supportPart = supportPart;
       requestedDisc = requestedDisc;
       previousPartNumber = partNumber;
       //VIPER - 716 - creating xpath 
xpathbuilder = "/soap:Envelope/soap:Body/bm:getTransactionResponse/bm:transaction/bm:data_xml/bm:transaction/bm:sub_documents/bm:transactionLine[bm:fulfillmentSet_l=";
       if(len(fulfillmentSetID) > 1){
       xpathbuilder = xpathbuilder + "'" + fulfillmentSetID + "']";
       }
        xpaths = string[];
        values = string[];
        //VIPER - 716 - Finding all the contract lines in the quote with same fullfilment set (Covered and Support lines)
        xpaths[0] = xpathbuilder;
        output = readxmlmultiple(xmlResponse, xpaths);
 
     for xpath in xpaths {
       values = get(output, xpath);
  for value in values
 { 
 count1 = count1 +1;
 }}
 //VIPER - 716  Begin - Creating a Key value to uniquely identify a contract line
 if(count1>1){
 Partandfulfillment = fulfillmentSetID + partNo;
 }
 //VIPER - 716 - End
       //Begin: As part of Jira # SYMINT-4215 A New Variable "Identifer" is Introdused in PCString which is count +2 for each model
    count = count + 2;
       

       
    
       
 
               
        strSAVG        = strSAVG        + "false"     + "$,$";
        strPartNo      = strPartNo      + partNo      + "$,$";
        strPartName    = strPartName    + partName    + "$,$";
        strQty         = strQty         + quantity    + "$,$";
        strLicencetype = strLicencetype + licenceType + "$,$";
        //Begin: As part of Jira # SYMINT-4215 A new Validation is introudused to differentiate CAD Models from Hardware SKU's on Transactiontype basis
           if(ltransactionType <> "Upgrade"){
        
        PCStr = PCStr + "\"" + string(strPSAC)+ "\"" + ":{\"Sr_No\":" + string(strPSAC);
        PCStr = PCStr+",\"PartNumber\":\""+partNo;
        PCStr = PCStr+"\",\"Quantity\":"+quantity;
 PCStr = PCStr+",\"Identifier\":"+string(count);
        PCStr = PCStr+",\"child\":{\"transactionType\":\""+ltransactionType;
        PCStr = PCStr+"\",\"businessTransactionType\":\""+"";
        PCStr = PCStr+"\",\"specialMetric\":\""+lspecialMetric;
        PCStr = PCStr+"\",\"enterEnvironment\":\""+lenterEnvironment;
        PCStr = PCStr+"\",\"selectLicenseType\":\""+licenceType;
        PCStr = PCStr+"\",\"supportType\":\""+lsupportType;
        PCStr = PCStr+"\",\"supportPartsPicklist\":\""+supportPart;
        PCStr = PCStr+"\",\"languageRequired\":\""+llanguageRequired;
        PCStr = PCStr+"\",\"startDate\":\""+CStartDate;
        PCStr = PCStr+"\",\"endDate\":\""+CEndDate;
        PCStr = PCStr+"\",\"standardQuantity\":\""+lstandardQuantity;
        PCStr = PCStr+"\",\"existingQuantity\":\""+lexistingQuantity;
        PCStr = PCStr+"\",\"licenseMetric\":\""+llicenseMetric;
        PCStr = PCStr+"\",\"specialMetricLicense\":\""+lspecialMetricLicense;
        PCStr = PCStr+"\",\"UsageQuantity\":\""+lUsageQuantity;
        PCStr = PCStr+"\",\"UsageExistingQuantity\":\""+lUsageExistingQuantity;
        PCStr = PCStr+"\",\"ProductType\":\""+lProductType;
        //VIPER-716 - Begin - updating Parent Child String with requested Discount Value
        PCStr = PCStr+"\",\"requestedDisc\":\""+requestedDisc;
        PCStr = PCStr + "%"+Partandfulfillment;
        //VIPER-716 - End
        PCStr = PCStr+"\"}}" + ",";
        
        strPSAC        = strPSAC + 1; 
        }
 
 
        //Begin:Jira # SYMINT-4215 A new set of attributes added to ParentChild String for H/W SKU's when transactiontype is Upgrade
  if(ltransactionType == "Upgrade"){
  
   if(find(eachModel,"<bm:currentSKU_l>") > 0)
           {
           lcurrentSKUStartPosition = find(eachModel, "<bm:currentSKU_l>");
           lcurrentSKUEndPosition = find(eachModel, "</bm:currentSKU_l>");
           lcurrentSKU = substring(eachModel, lcurrentSKUStartPosition+len("<bm:currentSKU_l>"), lcurrentSKUEndPosition);
           
           }
  if(find(eachModel,"<bm:finalUpgradeSKU_l>") > 0)
           {
           lfinalUpgradeSKUStartPosition = find(eachModel, "<bm:finalUpgradeSKU_l>");
           lfinalUpgradeSKUEndPosition = find(eachModel, "</bm:finalUpgradeSKU_l>");
           lfinalUpgradeSKU = substring(eachModel, lfinalUpgradeSKUStartPosition+len("<bm:finalUpgradeSKU_l>"), lfinalUpgradeSKUEndPosition);
           
           }
  if(find(eachModel,"<bm:serial_l>") > 0)
           {
           lserialStartPosition = find(eachModel, "<bm:serial_l>");
           lserialEndPosition = find(eachModel, "</bm:serial_l>");
           lserial = substring(eachModel, lserialStartPosition+len("<bm:serial_l>"), lserialEndPosition);
           
           }
           
  //SYMINT-7850 Added Prior Contract Number and Prior Contract Line Number        
  if(find(eachModel,"<bm:priorContract>") > 0)
           {
           lpriorContractStartPosition = find(eachModel, "<bm:priorContract>");
           lpriorContractEndPosition = find(eachModel, "</bm:priorContract>");
           lpriorContractNumber = substring(eachModel, lpriorContractStartPosition+len("<bm:priorContract>"), lpriorContractEndPosition);
           
           }
  if(find(eachModel,"<bm:priorContractLineItem_l>") > 0)
           {
           lpriorContractLineStartPosition = find(eachModel, "<bm:priorContractLineItem_l>");
           lpriorContractLineEndPosition = find(eachModel, "</bm:priorContractLineItem_l>");
           lpriorContractLineNumber = substring(eachModel, lpriorContractLineStartPosition+len("<bm:priorContractLineItem_l>"), lpriorContractLineEndPosition);
           
           }
           
  if(find(eachModel,"<bm:unlimited_l>") > 0)
           {
           lunlimitedStartPosition = find(eachModel, "<bm:unlimited_l>");
           lunlimitedEndPosition = find(eachModel, "</bm:unlimited_l>");
           lunlimited = substring(eachModel, lunlimitedStartPosition+len("<bm:unlimited_l>"), lunlimitedEndPosition);
           
           }
  if(find(eachModel,"<bm:supportOptOut_l>") > 0)
           {
           lsupportOptOutStartPosition = find(eachModel, "<bm:supportOptOut_l>");
           lsupportOptOutEndPosition = find(eachModel, "</bm:supportOptOut_l>");
           lsupportOptOut = substring(eachModel, lsupportOptOutStartPosition+len("<bm:supportOptOut_l>"), lsupportOptOutEndPosition);
           
           }
  if(find(eachModel,"<bm:totalNewSupportTermDays_l>") > 0)
           {
           ltotalNewSupportTermDaysStartPosition = find(eachModel, "<bm:totalNewSupportTermDays_l>");
           ltotalNewSupportTermDaysEndPosition = find(eachModel, "</bm:totalNewSupportTermDays_l>");
           ltotalNewSupportTermDays = substring(eachModel, ltotalNewSupportTermDaysStartPosition+len("<bm:totalNewSupportTermDays_l>"), ltotalNewSupportTermDaysEndPosition);
           
           }


  //Begin: SYMINT-4215 Parent Child String formation for Hardware Upgrade SKU's
   
  PCStr = PCStr + "\"" + string(strPSAC)+ "\"" + ":{\"Sr_No\":" + string(strPSAC);
         PCStr = PCStr+",\"PartNumber\":\""+partNo;
         PCStr = PCStr+"\",\"Quantity\":"+quantity;
  PCStr = PCStr+",\"Identifier\":"+string(count);
  PCStr = PCStr+",\"child\":{\"Current_SKU\":\""+lcurrentSKU; 
  PCStr = PCStr+"\",\"FinalUpgradeSKU\":\""+lfinalUpgradeSKU; 
  PCStr = PCStr+"\",\"SerialNumber\":\""+lserial; 
  
  //SYMINT-7850 Added Prior Contract Number and Prior Contract Line Number
  PCStr = PCStr+"\",\"PriorContractNumber\":\""+lpriorContractNumber; 
  PCStr = PCStr+"\",\"PriorContractLineNumber\":\""+lpriorContractLineNumber; 
  
  PCStr = PCStr+"\",\"transactionType\":\""+ltransactionType;
  PCStr = PCStr+"\",\"specialMetric\":\""+lspecialMetric;
        PCStr = PCStr+"\",\"enterEnvironment\":\""+lenterEnvironment;
        PCStr = PCStr+"\",\"selectLicenseType\":\""+licenceType;
        PCStr = PCStr+"\",\"supportType\":\""+lsupportType;
        PCStr = PCStr+"\",\"supportPartsPicklist\":\""+supportPart;
        PCStr = PCStr+"\",\"languageRequired\":\""+llanguageRequired;
        PCStr = PCStr+"\",\"startDate\":\""+CStartDate;
        PCStr = PCStr+"\",\"endDate\":\""+CEndDate;
        PCStr = PCStr+"\",\"standardQuantity\":\""+lstandardQuantity;
        PCStr = PCStr+"\",\"existingQuantity\":\""+lexistingQuantity;
        PCStr = PCStr+"\",\"licenseMetric\":\""+llicenseMetric;
        PCStr = PCStr+"\",\"specialMetricLicense\":\""+lspecialMetricLicense;
        PCStr = PCStr+"\",\"UsageQuantity\":\""+lUsageQuantity;
        PCStr = PCStr+"\",\"UsageExistingQuantity\":\""+lUsageExistingQuantity;
  PCStr = PCStr+"\",\"Unlimited\":\""+lunlimited;
  PCStr = PCStr+"\",\"supportopt\":\""+lsupportOptOut;
  PCStr = PCStr+"\",\"totalNewSupportTerm\":\""+ltotalNewSupportTermDays;
  PCStr = PCStr+"\"}}" + ",";
        
        strPSAC        = strPSAC + 1; 
  }
  }
if(ltransactionType <> "Upgrade"){
  print prevPartumber;
        prevPartumber = split(previousPartNumber,"%");
        //VIPER-716 - Begin - Capturing Requested Discount value of Support Lines
        if(len(coveredProduct) > 1)
 {
 Partandfulfillment = fulfillmentSetID + coveredProduct;
 
   if(find(eachModel,"<bm:requestedDiscount_l>") > 0)
           {
           requestedDiscStartPosition = find(eachModel, "<bm:requestedDiscount_l>");
           requestedDiscEndPosition = find(eachModel, "</bm:requestedDiscount_l>");
           requestedDisc = substring(eachModel, requestedDiscStartPosition+len("<bm:requestedDiscount_l>"), requestedDiscEndPosition);
           }
           if(atof(requestedDisc) >= 0.0)
           {
           //VIPER-716 - Replacing the parent child string with requested discount of covered and support parts
           replacestartpos = find(PCStr, "%"+Partandfulfillment);
           replaceendpos  =  replacestartpos + len("%"+Partandfulfillment);
           PCStr = replace(PCStr,Partandfulfillment,requestedDisc);
           
          
            
       }
      }
      }
  
  
        coveredProduct = "";
         
     }
  //VIPER-716 - End
     //End: SYMINT-4215  
        
       
       }
       strSAVG        = substring(strSAVG,1,(len(strSAVG)-3)) ;
        strPartNo      = substring(strPartNo,1,(len(strPartNo)-3)) ;
        //Changes made as part of BROCAD2-5543 - To convert part name into upper case
        strPartName    = substring(strPartName,1,(len(strPartName)-3)) ;
        //Changes made as part of BROCAD2-5543 - End
        strQty         = substring(strQty,1,(len(strQty)-3)) ;
        strLicencetype = substring(strLicencetype,1,(len(strLicencetype)-3)) ;
        PCStr          = substring(PCStr,1,(len(PCStr)-1)); 
        PCStr          = "{" + PCStr + "}";
        
        
        
        
        

 

        
        
        
        
        
        
        
        //Begin:SYMINT-4215 Changes dones H/w Upgrade SKU's
        if(ltransactionType == "Upgrade"){
   trans = trans + "<bm:attribute bm:_variableName=\"upgradeSKUArrayController_avg\"><bm:value>" + string(strPSAC) + "</bm:value></bm:attribute>";
   trans = trans + "<bm:attribute bm:_variableName=\"upgradeSKU_avg_picker\"><bm:value>" + strPartNo + "</bm:value></bm:attribute>";
   trans = trans + "<bm:attribute bm:_variableName=\"currentSKU_avg_picker\"><bm:value>" + lcurrentSKU + "</bm:value></bm:attribute>";
   trans = trans + "<bm:attribute bm:_variableName=\"selectUpgradeProduct_avg\"><bm:value>" + "true" + "</bm:value></bm:attribute>";
   trans = trans + "<bm:attribute bm:_variableName=\"selectUpgradeSKUBasedOnCurrentSKU_avg\"><bm:value>" + "true" + "</bm:value></bm:attribute>";
   trans = trans + "<bm:attribute bm:_variableName=\"upgradeSKUarray_avg\"><bm:value>" + strPartNo + "</bm:value></bm:attribute>";
   trans = trans + "<bm:attribute bm:_variableName=\"currentSKUarray_avg\"><bm:value>" + lcurrentSKU + "</bm:value></bm:attribute>";
   trans = trans + "<bm:attribute bm:_variableName=\"quantityHWUpgd_avg \"><bm:value>"+ strQty +"</bm:value></bm:attribute>";
   
   trans = trans + "<bm:attribute bm:_variableName=\"serialNumber_avg\"><bm:value>"+ lserial +"</bm:value></bm:attribute>";
  }else{
        trans = trans + "<bm:attribute bm:_variableName=\"partSelectionArrayControl_avg\"><bm:value>" + string(strPSAC) + "</bm:value></bm:attribute>";
        trans = trans + "<bm:attribute bm:_variableName=\"selectProductByNameFlag_avg\"><bm:value>" + "true" + "</bm:value></bm:attribute>";
        trans = trans + "<bm:attribute bm:_variableName=\"PartNumber_avg\"><bm:value>"+strPartNo+"</bm:value></bm:attribute>";
  }
  trans = trans + "<bm:attribute bm:_variableName=\"productGroup_avg\"><bm:value>" + productGroup + "</bm:value></bm:attribute>"; 
 
 //trans = trans + "<bm:attribute bm:_variableName=\"select_avg\"><bm:value>" + strSAVG + "</bm:value></bm:attribute>";
 
 //if(segmentName == "cAD"  or segmentName == "customerSelection_avg"){
 if(ltransactionType <> "Upgrade"){ 
 //VIPER-779 - Begin - Removing the part description from the payload.    
// trans = trans + "<bm:attribute bm:_variableName=\"selectProductByName_avg\"><bm:value>"+strPartName+"</bm:value></bm:attribute>";
 //VIPER-779 - END
 trans = trans + "<bm:attribute bm:_variableName=\"quantity_avg\"><bm:value>"+ strQty +"</bm:value></bm:attribute>";}
 //End: SYMINT-4215
 
 trans = trans + "<bm:attribute bm:_variableName=\"parentChildString_avg\"><bm:value>"; 
 trans = trans + PCStr ;
 trans = trans + "</bm:value></bm:attribute>"; 



        
            
        put(d,"forLoop",trans); 
 retVal = applytemplate("$BASE_PATH$/Integration/getConfigAPI.xml",d,"Not_Found");
        retVal = replace(retVal,"&lt;","<");
 retVal = replace(retVal,"&gt;",">");
 retVal = replace(retVal,"&quot;","\"");
 //VIPER - 778 - added logic to replace special character with "=" symbol
 retVal = replace(retVal,"&#x3D;","=");
 url2 = "https://"+_system_company_name+".bigmachines.com/v2_0/receiver/configuration/"+segmentName+"/"+productLineName+"/"+modelVarName;
 print "Request" + retVal;
        retVal1 = urldatabypost(url2,retVal,"ERROR");
        resultarray = resultarray + retVal1 + "$$$$&&&&&";
        
               

       
      
      }
      
     
     }
    }
    
    
   }
    
  }
 }

data = "<bm:mergedQuotes>"+mergedQuoteID+"</bm:mergedQuotes>";


res = commerce.mergeSave(data);








mergedQuotesString = jsonarraytostr(JsonMergedQuotes);

modelmergereponse = "";


ENDPOINTURL="https://"+_system_company_name+".bigmachines.com/v2_0/receiver/commerce/oraclecpqo";
fileLocation1="/bmfsweb/"+_system_company_name+"/image/Integration/mergeQuoteTrigger.xml";

payload = dict("string");
put(payload,"bs_id",bs_id);
put(payload,"USERNAME",username);
put(payload,"PASSWORD",password);
put(payload,"companyName", _system_company_name);
put(payload,"models",mergedQuotesString );
put(payload,"user_name",_system_user_bill_company);




defaultErrorMessage="";
quoteRequest1=applytemplate(fileLocation,payload,defaultErrorMessage);


headersDict = dict("string"); 


response1 = urldatabypost(soapendpoint,quoteRequest1, "error",headersDict);


result = "";
//result = result + "1~getTransactionError_t~" + resultarray + "|";



return result;