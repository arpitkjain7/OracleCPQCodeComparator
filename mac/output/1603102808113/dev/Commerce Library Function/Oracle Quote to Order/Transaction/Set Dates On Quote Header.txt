/****************************************************************************************************************************************
Function Name: Set Dates On Quote Header
Description: This library function is used to update the Contract start date, contract end date on quote header
by selecting the min of contract start dates and max of contract end dates of all line items. This function also sets 
attribute dealTerm_t on Quote Header on click of save.It also sets the Est. Annualized Revenue on Line items.
History:      Date          Author              Comment 
01/12/2019    Raghavendra Kumar Kamparth   Initial version
05/09/2019    Satyabrata Acharya           Optimized code to align with best practices and used string builder
07/04/2019   Raghavendra Kumar Kamparth    Modified logic for calculating attribute estAnnualizedBooking_l for BROCAD2-5225 
29/09/2020   Sindhura Chintakindi          Jira-994:Added logic for Excluding dropped lines while updating contract start date and contract end date at header level
12/10/2020   Sindhura Chintakindi          Jira-1022:Fixed bug detected as part of regression testing of 994
****************************************************************************************************************************************/

result = "";
dlim = "~";
dend = "|";
dateFormat = "yyyy-MM-dd HH:mm:ss";

finalContractStartDateString = "";
finalContractEndDateString = "";
finalEffectiveStartDateString = "";
finalExpirationDateString = "";
numberOfDaysToMinus = 25000;

todaysdate = getdate();
referenceDate = minusdays(todaysdate,numberOfDaysToMinus); 
min_lineEffectiveStartDateObject = minusdays(todaysdate,numberOfDaysToMinus);
max_lineExpirationDateObject = minusdays(todaysdate,numberOfDaysToMinus);
min_lineContractStartDateObject = minusdays(todaysdate,numberOfDaysToMinus);
max_lineContractEndDateObject = minusdays(todaysdate,numberOfDaysToMinus);
contractValue = 0;
approvedStatusString = "APPROVED";
count=0;

//This is being used to set the initial reference values - it runs only for 1 time and then loop breaks
for line in transactionLine
{
 if(line._part_number <> "" and line._part_number <> "Cust")
 {
        
  if(line.effectiveStartDate_l <> "")
  {
   min_lineEffectiveStartDateObject = strtodate(line.effectiveStartDate_l,dateFormat);
   
  }
  if(line.lineExpirationDate_l <> "")
  {
   max_lineExpirationDateObject = strtodate(line.lineExpirationDate_l,dateFormat);
  }
 }
 //Jira-994 Excluding dropped lines
 if(line._part_number <> "" and line._part_number <> "Cust" AND line.dropProduct_l <> true)
 {
          count=count+1;
  if(line.contractStartDate_l <> "")
  {

   min_lineContractStartDateObject = strtodate(line.contractStartDate_l,dateFormat);
  }
  if(line.contractEndDate_l <> "")
  {
   max_lineContractEndDateObject = strtodate(line.contractEndDate_l,dateFormat);
  }
  break; 
 }
 //Jira-994 Excluding dropped line

}

if(comparedates(min_lineEffectiveStartDateObject,referenceDate) == 1 or comparedates(min_lineContractStartDateObject,referenceDate) == 1)
{
 for line in transactionLine
 {
  if(line._part_number <> "" and line._part_number <> "Cust")
  {
   dateFormat = "yyyy-MM-dd HH:mm:ss";
   if( line.dropProduct_l <> true AND line.contractStartDate_l <> "")
   {
    if(find(line.contractStartDate_l,"/") > 0)
    {
     dateFormat = "MM/dd/yyyy HH:mm:ss";

    }
   }
   if(line.effectiveStartDate_l <> "")
   {
    if(find(line.effectiveStartDate_l,"/") > 0)
    {
     dateFormat = "MM/dd/yyyy HH:mm:ss";
    }
   }
  
   if(line._part_number <> "" and line._part_number <> "Cust")
   {
    if(quoteType_t == "renewalQuote" and line.dropProduct_l == true and line.dropReason_l == "droppedMigratedOrUpgradedToDifferentCode")
    {
     sb = stringbuilder(result, line._document_number, "~", "estAnnualizedBooking_l", "~", string(0), "|");
     result = sbtostring(sb);
    }
    elif(line.contractStartDate_l <> "" and line.contractEndDate_l <> "")
    {
     endDateObj = strtodate(line.contractEndDate_l, dateFormat );
     startDateObj = strtodate(line.contractStartDate_l, dateFormat );
     duration = getdiffindays(endDateObj,startDateObj) + 1;
     if(duration <= 365)
     {
      sb1 = stringbuilder(result, line._document_number, "~", "estAnnualizedBooking_l", "~", string(line.extProposedNetPriceRequested_l), "|");
      result = sbtostring(sb1);
     }
     else
     {
      contractValue = (line.extProposedNetPriceRequested_l/duration)*365;
      sb1 = stringbuilder(result, line._document_number, "~", "estAnnualizedBooking_l", "~", string(contractValue), "|");
      result = sbtostring(sb1);
     }
    }
   }
   if((line.effectiveStartDate_l) <> "")
   {
    min_lineEffectiveStartDateObject = strtodate(line.effectiveStartDate_l,dateFormat);
    lineEffectiveStartDateObject = strtodate(line.effectiveStartDate_l,dateFormat);
    if(comparedates(lineEffectiveStartDateObject,min_lineEffectiveStartDateObject) == -1)
    {
     min_lineEffectiveStartDateObject = lineEffectiveStartDateObject;     
    }
   }
   if((line.lineExpirationDate_l) <> "")
   {
    lineExpirationDateObject = strtodate(line.lineExpirationDate_l,dateFormat);
    if(comparedates(max_lineExpirationDateObject,lineExpirationDateObject) == -1)
    {
     max_lineExpirationDateObject = lineExpirationDateObject;
    }
   }
   //Jira-994 Excluding dropped lines
   if(line.dropProduct_l <> true AND (line.contractStartDate_l) <> "")
   {
    lineContractStartDateObject = strtodate(line.contractStartDate_l,dateFormat);
    if(comparedates(lineContractStartDateObject,min_lineContractStartDateObject) == -1)
    {
     min_lineContractStartDateObject = lineContractStartDateObject;
    }
   }
   if(line.dropProduct_l <> true AND (line.contractEndDate_l) <> "")
   {
    lineContractEndDateObject = strtodate(line.contractEndDate_l,dateFormat);
    if(comparedates(max_lineContractEndDateObject,lineContractEndDateObject) == -1)
    {
     max_lineContractEndDateObject = lineContractEndDateObject;
    }
   }
   //Jira-994 Excluding dropped lines
  }
 }
}

if((quoteEffectiveDate_t) <> "")
{ 
 quoteEffectiveStartDateObject = strtodate(quoteEffectiveDate_t,dateFormat);
 createdDateObject = strtodate(createdDate_t,dateFormat);
 if(comparedates(min_lineEffectiveStartDateObject,quoteEffectiveStartDateObject) == -1 and (comparedates(createdDateObject,min_lineEffectiveStartDateObject) == -1 or comparedates(createdDateObject,min_lineEffectiveStartDateObject) == 0))
 { 
  sb2 = stringbuilder(_transaction_document_number, "~", "quoteEffectiveDate_t", "~", datetostr(min_lineEffectiveStartDateObject), "|");
  finalEffectiveStartDateString = sbtostring(sb2);
 }
}

if((quoteEffectiveDate_t) == "")
{
 sb2 = stringbuilder(_transaction_document_number, "~", "quoteEffectiveDate_t", "~", datetostr(min_lineEffectiveStartDateObject), "|");
 finalEffectiveStartDateString = sbtostring(sb2);
}

//Jira-994 Excluding dropped lines and also removed logic of retaining Date on Header.  
if(count >0)
{
 quoteHeaderContractStartDate = strtodate(contractStartDate_t,dateFormat);
 //if(comparedates(min_lineContractStartDateObject,quoteHeaderContractStartDate) == -1 and comparedates(referenceDate,min_lineContractStartDateObject) == -1)
 //{
  sb3 = stringbuilder(_transaction_document_number, "~", "contractStartDate_t", "~", datetostr(min_lineContractStartDateObject), "|");
  finalContractStartDateString = sbtostring(sb3);
  
 //}
}
else
{
sb3 = stringbuilder(_transaction_document_number, "~", "contractStartDate_t", "~", datetostr(todaysdate), "|");
finalContractStartDateString = sbtostring(sb3);
}
//Jira-994 Excluding dropped lines and also removed logic of retaining Date on Header. 
/*
if((contractStartDate_t) == "" AND count >0)
{
 sb3 = stringbuilder(_transaction_document_number, "~", "contractStartDate_t", "~", datetostr(min_lineContractStartDateObject), "|");
 finalContractStartDateString = sbtostring(sb3);
}
*/
if( count >0)
{
 quoteHeaderContractEndDate = strtodate(contractEndDate_t,dateFormat);
 //if(comparedates(quoteHeaderContractEndDate,max_lineContractEndDateObject) == -1)
 //{
  sb4 = stringbuilder(_transaction_document_number, "~", "contractEndDate_t", "~", datetostr(max_lineContractEndDateObject), "|");
  finalContractEndDateString = sbtostring(sb4);
 //}
}
else
{
sb4 = stringbuilder(_transaction_document_number, "~", "contractEndDate_t", "~", datetostr(todaysdate), "|");
finalContractEndDateString = sbtostring(sb4);
}
/* 
if((contractEndDate_t) == "")
{
 sb4 = stringbuilder(_transaction_document_number, "~", "contractEndDate_t", "~", datetostr(max_lineContractEndDateObject), "|");
 finalContractEndDateString = sbtostring(sb4);
} */
//Jira-994 Excluding dropped lines and also removed logic of retaining Date on Header. 
if((quoteExpirationDate_t) <> "")
{
 quoteHeaderExpirationDate = strtodate(quoteExpirationDate_t,dateFormat);
 if(comparedates(quoteHeaderExpirationDate,max_lineExpirationDateObject) == -1 and (status_t == approvedStatusString))
 {
  sb5 = stringbuilder(_transaction_document_number, "~", "quoteExpirationDate_t", "~", datetostr(max_lineExpirationDateObject), "|");
  finalExpirationDateString = sbtostring(sb5);
 }
}

if(status_t == approvedStatusString and approvalDate_t <> "")
{
 if(quoteExpirationDate_t <> "")
 {
  expirationDateObject = strtodate(quoteExpirationDate_t,dateFormat);
  if(comparedates(max_lineExpirationDateObject,expirationDateObject) == -1)
  {
   max_lineExpirationDateObject = expirationDateObject;
  }
  sb5 = stringbuilder(_transaction_document_number, "~", "quoteExpirationDate_t", "~", datetostr(max_lineExpirationDateObject), "|");
  finalExpirationDateString = sbtostring(sb5);
 }
}
dealTermString = "";

if(finalContractStartDateString <> "" and finalContractEndDateString == "")
{
 if(not isnull(min_lineContractStartDateObject) and contractEndDate_t <> "")
 {
  startDate = min_lineContractStartDateObject;
  endDate = strtodate(contractEndDate_t,dateFormat);

  sb6 = stringbuilder(dealTermString, "1~dealTerm_t~", util.dateDuration(startDate, endDate), "|");
  dealTermString = sbtostring(sb6);
 }
}
elif(finalContractStartDateString == "" and finalContractEndDateString <> "")
{
 if(not isnull(max_lineContractEndDateObject) and contractStartDate_t <> "")
 {
  startDate = strtodate(contractStartDate_t,dateFormat);
  endDate = max_lineContractEndDateObject;
  
  sb6 = stringbuilder(dealTermString, "1~dealTerm_t~", util.dateDuration(startDate, endDate), "|");
  dealTermString = sbtostring(sb6);
 }
}
elif(finalContractStartDateString <> "" and finalContractEndDateString <> "")
{
 if(not isnull(max_lineContractEndDateObject) and not isnull(min_lineContractStartDateObject))
 {
  startDate = min_lineContractStartDateObject;
  endDate = max_lineContractEndDateObject;
  sb6 = stringbuilder(dealTermString, "1~dealTerm_t~", util.dateDuration(startDate, endDate), "|");
  dealTermString = sbtostring(sb6);
 }
}
elif(finalContractStartDateString == "" and finalContractEndDateString == "")
{
 if(contractStartDate_t <> "" and contractEndDate_t <> "")
 {
  startDate = strtodate(contractStartDate_t,dateFormat);
  endDate = strtodate(contractEndDate_t,dateFormat);
  sb6 = stringbuilder(dealTermString, "1~dealTerm_t~", util.dateDuration(startDate, endDate), "|");
  dealTermString = sbtostring(sb6);
 }
}

sb7 = stringbuilder(result, finalEffectiveStartDateString, finalExpirationDateString, finalContractStartDateString, finalContractEndDateString, dealTermString);
result = sbtostring(sb7);

return result;