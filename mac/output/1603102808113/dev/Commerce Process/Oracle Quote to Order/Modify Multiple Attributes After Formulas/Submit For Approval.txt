/*****************************************************************
Author - Kavita Lolla
Date - 02/03/2019
UID-179
User story summary - On quote approval, fetch contract manager based on ddr required.
*****************************************************************/
/*****************************************************************
Author - Kavita Lolla
Date - 02/03/2019
CR id - BROCAD2-683
User story summary - Descope DDR flow and logic from CPQ
*****************************************************************/
/*****************************************************************
Author - Kavita Lolla
Date - 22/05/2019
User story summary - Put string builder for performance improvement.
*****************************************************************/
/*****************************************************************
Author - Keerthivasan A
Date - 24/06/2019
User story summary - BROCAD2-4444-Updating Financial Summary.
*****************************************************************/
/*****************************************************************
Author - Keerthivasan A
Date - 24/06/2019
User story summary - BROCAD2-4874-CPQ UI/Usability Updates.
*****************************************************************/
/*****************************************************************
Author - Arjun Singh
Date - 09/07/2019
User story summary - BROCAD2-5480-Contracts not getting updated in data table
Removed the internal comment blank check from UpdateCustomerPricingList function
*****************************************************************/
/*****************************************************************
Author - Thushaara
Date - 09/07/2019
User story summary - BROCAD2-1046-Validates if project group,license type,Business type and Transaction type are Blank 
*****************************************************************/
/*****************************************************************
Author - Ravi Kumar
Date - 19/07/2019
User story summary - BROCAD2-5516- Set “Contracted/ Prior Per Unit Fee” this is a free text filed,  make it required field, only for Capacity line items
/*****************************************************************
Author - M Vamsi 
Date - 10/04/2019
User story summary - VIPER-438 - Symantec - Installed at on quote lines should be editable
*****************************************************************/
/*****************************************************************
Author - Ravi Kumar
Date - 03/12/2019
User story summary - VIPER-618 - The Installed at Location does not cascade from header to line item in Renewal Quote
/*****************************************************************/
/*****************************************************************
Author - Kumar Satyabrata Acharya
Date - 01/28/2020
User story summary - SYMINT-3132 : validation should be on the basis of Contract Start Date and Contract End Date : 491 to 501 lines
/*****************************************************************
Author : Kavita Lolla
Changes done for SYMINT-5533
Date: 13/02/2020  
Change Description:- ARR Calculation for Upgrade Transaction Type.
**************************************************************************
Date : 02/24/2020
Author : Kavita Lolla
Change Description : SYMINT-4215 Condition changed to populate site-id and installed-at in the merged quotes for renewal quotes.
********************************************************************
Author : Adithya Suresh
Changes done for VIPER-748
Date: 26/03/2020  
Change Description:- Excluding dropped lines from the financial summary calculations
*************************************************************************
********************************************************************
Author : satyabrata acharya
Changes done for VIPER-878
Date: 21/07/2020  
Change Description:- Jhash Validation
*************************************************************************/
/*************************************************************************
Author : Kavita Lolla
Changes done for VIPER-933
Date: 03/09/2020  
Change Description:- Line number to be displayed for line validations   
*************************************************************************/
dlim="~";
dend="|";
result = "|";
//attributes for financial summary
grossContractListPrice =0.0;
discDOffContractListPrice = 0.0;
discPerContractListPrice=0.0;
sumExtProposedNetPriceRequested = 0.0;
sumExtContractListPrice =0.0;
sumExtLineDiscountAmount =0.0;
totalProposedNetPriceUSD=totalProposedNetPriceUSDFloat_t;
totalProposedNetPriceLC=totalProposedNetPriceLC_t;
proposedLicSubFeeNew = 0.0;
proposedLicSubFeeRenew =0.0;
proposedLicSubFeeCapacity =0.0;
proposedLicSubFeeTotal =0.0;
sumEstAnnualizedBookingD =0.0;
sumEstQuarterlyBookingD =0.0;
totalMarginPercent =0.0;
totalMarginDollar =0.0;
sumExtCost=0.0;
sumNewAnnualRenewalValue =0.0;
renewalRateHeader=0.0;
aRRPercent =0.0;
newAnnualRenewalRenew =0.0;
newAnnualRenewalNew =0.0;
newAnnualRenewalCapacity =0.0;
expiringAnnualRenewalRenew =0.0;
expiringAnnualRenewalNew =0.0;
expiringAnnualRenewalCapacity =0.0;
//SYMINT-5533-Begin
newAnnualRenewalUpgrade = 0.0;
expiringAnnualRenewalUpgrade = 0.0;
//SYMINT-5533 -End
sumForNewAnnualRenewal=0.0;
sumForAnnualRenewal =0.0;
proposedSupportNew =0.0;
proposedSupportRenew =0.0;
proposedSupportCapacity =0.0;
proposedSupportTotal =0.0;
sumExpiringAnnualRenewalValue =0.0;
sumPriceUpliftAnnualRenewalValue = 0.0;
// attributes for financial summary- end
// Initializing Attributes for BROCAD2-4874 - Total Capacity Deviation - Start
totalProposedNetPrice = 0.0;
totalExtendedPriorPrice = 0.0;
// Initializing Attributes for BROCAD2-4874 - Total Capacity Deviation - End
totalMaintenanceFee=0.0;
totalLicenseFee=0.0;
validation=false;
datevalidation=false;
precision = 0;
partNumber = "";
recordCount = 0;
parentPartDictionary = Dict("integer");
supportPartDictionary = Dict("integer");
supportPartParentPartMap = Dict("integer");
coveredProductDictionary = Dict("integer");
coveredProduct1Dictionary = Dict("string");
linePartDict=Dict("string");
keyValuePair = "";
savedValue = 0;
quantity = 0;
finalCheckFlag = false;
custString = "Cust";
dateFormat = "MM/dd/yyyy HH:mm:ss";
validatedates=false;
//VIPER-933 - Begin - Add line numbers
errorLinesDate="";
//VIPER-933 - End
counterCoveredPartArray = string[];
errorSupportPartsDictionary = Dict("string"); 
sb = stringbuilder();
//VIPER-878
jHashValidation="";
lineCount=0;
//attributes used for BROCAD2-1046
errorLines1_a= "";
errorLines2= "";
errorLines3= "";
errorLines4= "";
errorLines6= "";

//validation Contract Dates Validation; kacharya
if(contractStartDate_t <> "" and contractEndDate_t <> "")
{
 contractStartDateStr = substring(contractStartDate_t,0,10);
 contractStartDateStr = contractStartDateStr+" 12:00:00";
 contractEndDateStr = substring(contractEndDate_t,0,10);
 contractEndDateStr = contractEndDateStr +" 12:00:00";
 contractStartDateObj = strtodate(contractStartDateStr,dateFormat);
 contractEndDateObj = strtodate(contractEndDateStr ,dateFormat);
 if(comparedates(contractEndDateObj,contractStartDateObj) == -1)
 {
  datevalidation=true;
 } 
}
//end of code
res1 = bmql("SELECT Precision from Func_Curr_Prec_Map WHERE Functional_Currency=$_system_current_document_currency_pref");

for line in res1{
 precision=atoi(get(line,"Precision"));
}

for line in transactionLine
{             

lineCount=lineCount+1;
 //Kacharya@deloitte.com;7/12/2020; VIPER-878: JHASH Validation
  if(line.transactionTypeM_l=="New" and line.token_l=="Yes" and (jHASH_t=="" OR jHASH_t==" "))
  {
  jHashValidation= jHashValidation + string(lineCount) +" ,";
  } 
  
               
               if(quoteType_t <> "renewalQuote" and quoteType_t<>"contractQuote"){
   //Satyabrata Acharya; Changing the code to remove temporary fields as the read/write scenarios for site details is no more in scope.
    sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
    sbappend(sb,line._document_number,"~siteID_l~",shipToSiteNumber_t,"|");
    sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
    sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
    sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
   //end of code
   //VIPER-438 Adding the code to populate installed at fields in line level based on the business division and end customer site number ;
     
                           if(businessDivision_t=="Symantec" and endCustomerSiteNumber_t <> ""){
     if(line.installedAtCustomerNumber_l==line.temporaryInstalledAtCustomerNumber_avg){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",customerERPId_t,"|");
                                                         //output21=sbtostring(sb21);
                                           }
                                           if(line.installedAtCustomerNumber_l==""){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",customerERPId_t,"|");
                                                          //output21=sbtostring(sb21);
                                           }

                                           if(line.installedAtCustomerNumber_l<>"" AND line.installedAtCustomerNumber_l<>line.temporaryInstalledAtCustomerNumber_avg){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",line.installedAtCustomerNumber_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
                                                          //output20=sbtostring(sb20);
                                           }

                                           if(line.siteID_l==line.temporarysiteID_avg or line.siteID_l==""){
                                           sb=sbappend(sb,line._document_number,"~temporarysiteID_avg~",endCustomerSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",endCustomerSiteNumber_t,"|");
                                                          //output23=sbtostring(sb23);
                                           }             
                                           if(line.siteID_l<>"" AND line.siteID_l<>line.temporarysiteID_avg){
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",line.siteID_l,"|");
                                                          //output23=sbtostring(sb23);
                                           //sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",endCustomerSiteNumber_t ,"|");
                                                          //output23=sbtostring(sb23);
                                           sb=sbappend(sb,line._document_number,"~temporarysiteID_avg~",endCustomerSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }

                                           if(line.siteIDStreetAddress_l==line.temporarysiteIDStreetAddress_avg or line.siteIDStreetAddress_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_customer_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDStreetAddress_avg~",_transaction_customer_t_address,"|");
                                                          //output25=sbtostring(sb25);
                                           }

                                           if(line.siteIDStreetAddress_l<>"" AND line.siteIDStreetAddress_l<>line.temporarysiteIDStreetAddress_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",line.siteIDStreetAddress_l,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_customer_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           if(line.siteIDCityStateZip_l==line.temporarysiteIDCityStateZip_avg or line.siteIDCityStateZip_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_customer_t_city,"|");
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDCityStateZip_avg~",_transaction_customer_t_city,"|");
                                           }

                                           if(line.siteIDCityStateZip_l<>"" AND line.siteIDCityStateZip_l<>line.temporarysiteIDCityStateZip_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",line.siteIDCityStateZip_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_customer_t_city,"|");
                                           }

                                           if(line.siteIDZip_l==line.temporarysiteIDZip_avg or line.siteIDZip_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_customer_t_zip,"|");
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDZip_avg~",_transaction_customer_t_zip,"|");
                                           }

                                           if(line.siteIDZip_l<>"" AND line.siteIDZip_l<>line.temporarysiteIDZip_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",line.siteIDZip_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_customer_t_zip,"|");
                                           }
        }  
        else
          {
     if(line.installedAtCustomerNumber_l==line.temporaryInstalledAtCustomerNumber_avg){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",shipToPartyID_t,"|");
                                                         //output21=sbtostring(sb21);
                                           }
                                           if(line.installedAtCustomerNumber_l==""){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);    
                                           sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",shipToPartyID_t,"|");
                                                          //output21=sbtostring(sb21);
                                           }

                                           if(line.installedAtCustomerNumber_l<>"" AND line.installedAtCustomerNumber_l<>line.temporaryInstalledAtCustomerNumber_avg){
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",line.installedAtCustomerNumber_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",shipToPartyID_t,"|");
                                                          //output20=sbtostring(sb20);
                                           }

                                           if(line.siteID_l==line.temporarysiteID_avg or line.siteID_l==""){
                                           sb=stringbuilder(sb,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",shipToSiteNumber_t,"|");
                                                          //output23=sbtostring(sb23);
                                           }             
                                           if(line.siteID_l<>"" AND line.siteID_l<>line.temporarysiteID_avg){
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",line.siteID_l,"|");
                                                          //output23=sbtostring(sb23);
                                           //sb22=stringbuilder(sb22,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteID_l~",shipToSiteNumber_t ,"|");
                                                          //output23=sbtostring(sb23);
                                           sb=sbappend(sb,line._document_number,"~temporarysiteID_avg~",shipToSiteNumber_t,"|");
                                                          //output22=sbtostring(sb22);
                                           }

                                           if(line.siteIDStreetAddress_l==line.temporarysiteIDStreetAddress_avg or line.siteIDStreetAddress_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDStreetAddress_avg~",_transaction_shipTo_t_address,"|");
                                                          //output25=sbtostring(sb25);
                                           }

                                           if(line.siteIDStreetAddress_l<>"" AND line.siteIDStreetAddress_l<>line.temporarysiteIDStreetAddress_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",line.siteIDStreetAddress_l,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_shipTo_t_address,"|");
                                                          //output24=sbtostring(sb24);
                                           }
                                           if(line.siteIDCityStateZip_l==line.temporarysiteIDCityStateZip_avg or line.siteIDCityStateZip_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDCityStateZip_avg~",_transaction_shipTo_t_city,"|");
                                           }

                                           if(line.siteIDCityStateZip_l<>"" AND line.siteIDCityStateZip_l<>line.temporarysiteIDCityStateZip_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",line.siteIDCityStateZip_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_shipTo_t_city,"|");
                                           }

                                           if(line.siteIDZip_l==line.temporarysiteIDZip_avg or line.siteIDZip_l==""){
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
                                           sb=sbappend(sb,line._document_number,"~temporarysiteIDZip_avg~",_transaction_shipTo_t_zip,"|");
                                           }

                                           if(line.siteIDZip_l<>"" AND line.siteIDZip_l<>line.temporarysiteIDZip_avg){
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",line.siteIDZip_l,"|");
                                           }
                                           else{
                                           sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_shipTo_t_zip,"|");
                           }
                           }              
   //end of code
  }
  //SYMINT-4215 - begin - condition changed
    
  //Begin  
  //Ravi:The Installed at Location does not cascade from header to line item in Renewal Quote - VIPER-618 
  if(quoteType_t == "renewalQuote" and ((line.createdBy_l<>"Integration User" and line.renewalCreatedBy_l <> "Integration User") OR mergeAttribute_t == "Merge") )
//  if(quoteType_t == "renewalQuote" and (line.createdBy_l<>"Integration User" and line.renewalCreatedBy_l <> "Integration User"))
  { 
  if(line.siteIDStreetAddress_l==line.temporarysiteIDStreetAddress_avg or line.siteIDStreetAddress_l==""){
  sb=sbappend(sb,line._document_number,"~siteIDStreetAddress_l~",_transaction_customer_t_address,"|");
  sb=sbappend(sb,line._document_number,"~temporarysiteIDStreetAddress_avg~",_transaction_customer_t_address,"|");
  }
   if(line.siteIDCityStateZip_l==line.temporarysiteIDCityStateZip_avg or line.siteIDCityStateZip_l==""){
   sb=sbappend(sb,line._document_number,"~siteIDCityStateZip_l~",_transaction_customer_t_city,"|");
   sb=sbappend(sb,line._document_number,"~temporarysiteIDCityStateZip_avg~",_transaction_customer_t_city,"|");
   }
   if(line.siteIDZip_l==line.temporarysiteIDZip_avg or line.siteIDZip_l==""){
   sb=sbappend(sb,line._document_number,"~siteIDZip_l~",_transaction_customer_t_zip,"|");
   sb=sbappend(sb,line._document_number,"~temporarysiteIDZip_avg~",_transaction_customer_t_zip,"|");
   }
   if(line.siteID_l==line.temporarysiteID_avg or line.siteID_l==""){
   sb=stringbuilder(sb,line._document_number,"~temporarysiteID_avg~",endCustomerSiteNumber_t,"|");
   sb=sbappend(sb,line._document_number,"~siteID_l~",endCustomerSiteNumber_t,"|");
   }
  if(line.installedAtCustomerNumber_l==line.temporaryInstalledAtCustomerNumber_avg or line.installedAtCustomerNumber_l==""){
  sb=sbappend(sb,line._document_number,"~installedAtCustomerNumber_l~",customerERPId_t,"|");
  sb=sbappend(sb,line._document_number,"~temporaryInstalledAtCustomerNumber_avg~",customerERPId_t,"|");
  }
  sb=sbappend(sb,"1~mergeAttribute_t~","","|");
  }
  //Ravi:The Installed at Location does not cascade from header to line item in Renewal Quote  for manually added lines - VIPER-618
  //End
  
  
         
  //Validate Business Type - BROCAD2-1046
  if(line._part_number <> "" and line._part_number <> "Cust" and line.businessType_l == "")
  {
                  line_no2=line._sequence_number;
    errorbuilder2=stringbuilder(errorLines2,string(line_no2)," , ");
    errorLines2 = sbtostring(errorbuilder2);
  } 
  
  //Validate Transaction Type - BROCAD2-1046
  if(line._part_number <> "" and line._part_number <> "Cust" and line.transactionTypeM_l == "")
  {
                  line_no3=line._sequence_number;
    errorbuilder3=stringbuilder(errorLines3,string(line_no3)," , ");
    errorLines3 = sbtostring(errorbuilder3);
  }
  
  //Validate License Type - BROCAD2-1046
  if(line._part_number <> "" and line._part_number <> "Cust" and line.licenseType_l == "")
  {
                  line_no4=line._sequence_number;
    errorbuilder4=stringbuilder(errorLines4,string(line_no4)," , ");
    errorLines4 = sbtostring(errorbuilder4);
  }
   //Validate project group - BROCAD2-1046
  if(line._part_number <> "" and line._part_number <> "Cust" and line.projectGroup_l == "")
  {
                  line_no1=line._sequence_number;
    errorbuilder1=stringbuilder(errorLines1_a,string(line_no1)," , ");
    errorLines1_a = sbtostring(errorbuilder1);
  }
  
  
  
  
    //Validate “Contracted/ Prior Per Unit Fee” - BROCAD2-5516 
  /*if(line.transactionTypeM_l == "Capacity" AND line.contractedOrPriorLicenseSubFee_l == 0.0)
  {
     line_no6=line._sequence_number;
          errorbuilder6=stringbuilder(errorLines6,string(line_no6)," , ");
    errorLines6 = sbtostring(errorbuilder6);
  }*/
  //Validate “Contracted/ Prior Per Unit Fee” - BROCAD2-5516 
     
 dateFormat1 = "yyyy-MM-dd HH:mm:ss";
 dateFormat2 = "yyyy-MM-dd HH:mm:ss";
 //Moving date string fields from Save to Submit; Satyabrata;
 //setting temporary line date fields for EBS integration
 if(line.createdDate_l<> "")
 {
  if(find(line.createdDate_l,"/") > 0)
  {
   dateFormat2 = "MM/dd/yyyy HH:mm:ss";
  }
 }
  
 if(line.createdDate_l<>"")
 {
  createDate_l=datetostr(strtojavadate(line.createdDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "createdDateString_l" ,dlim , createDate_l , dend);
 }
 if(line.lastUpdatedDate_l<>"")
 {
  lastUpdateDate_l=datetostr(strtojavadate(line.lastUpdatedDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "lastUpdatedDateString_l" ,dlim , lastUpdateDate_l , dend); 
 }
 if(line.existingSupportStartDate_l<>""){
  existingSupportStartDate=datetostr(strtojavadate(line.existingSupportStartDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "existingSupportStartDateString_l" ,dlim , existingSupportStartDate , dend);
 }
 if(line.existingSupportExpirationDate_l<>"")
 {
  existingSupportExpirationDate=datetostr(strtojavadate(line.existingSupportExpirationDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "existingSupportExpirationDateString_l" ,dlim , existingSupportExpirationDate , dend);
 }

 if(line.contractStartDate_l<>"")
 {
  contractStartDt_l=datetostr(strtojavadate(line.contractStartDate_l, dateFormat2),dateFormat1); 
  sbappend(sb, line._document_number , dlim , "contractStartDateString_l" ,dlim , contractStartDt_l , dend);
 }
 if(line.contractEndDate_l<>"")
 {
  contractEndDt_l=datetostr(strtojavadate(line.contractEndDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "contractEndDateString_l" ,dlim , contractEndDt_l , dend);
 }
 if(line.effectiveStartDate_l<>"")
 {
  effectiveStartDt_l=datetostr(strtojavadate(line.effectiveStartDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "effectiveStartDateString_l" ,dlim , effectiveStartDt_l , dend);
 }
 if(line.lineExpirationDate_l<>""){
  lineExpirationDt_l=datetostr(strtojavadate(line.lineExpirationDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "lineExpirationDateString_l" ,dlim , lineExpirationDt_l , dend);
 }
 if(line.dateShipped_l<>"")
 {
  dtShipped_l=datetostr(strtojavadate(line.dateShipped_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "dateShippedString_l" ,dlim , dtShipped_l , dend);
 }
 if(line.dropSupportDate_l<>"")
 {
  dropSupportDt_l=datetostr(strtojavadate(line.dropSupportDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "dropSupportDateString_l" ,dlim , dropSupportDt_l , dend);
 }
 if(line.stabilizationDate_l<>"")
 {
  stabilizationDt_l=datetostr(strtojavadate(line.stabilizationDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "stabilizationDateString_l" ,dlim , stabilizationDt_l , dend);
 }
 if(line.eOSDate_l<>"")
 {
  eOSDate=datetostr(strtojavadate(line.eOSDate_l, dateFormat2),dateFormat1);
  sbappend(sb , line._document_number , dlim , "eOSDateString_l" ,dlim , eOSDate , dend);
 }
 
 //validation rule: Validate covered products
 if(line.coveredProduct_l <> "" and line._part_number <> "" and line._part_number <> "Cust")
 { 
  if(findInArray(counterCoveredPartArray,line.coveredProduct_l)==-1) 
  {
   append(counterCoveredPartArray,line.coveredProduct_l);
  }
  put(coveredProduct1Dictionary, line._document_number + "@@@" +line._part_number, line.coveredProduct_l);
  put(linePartDict,line._document_number+ "@@@" + line._part_number, string(line._sequence_number));
 }
    
 //end code
 put(errorSupportPartsDictionary,line._document_number + "@@@" + line._part_number, string(line._sequence_number));

 //validation rule: Validate Effective Start And Expiration Dates; kacharya
// if(line._part_number <> "" and line.endOfSupportServiceDate_l <> "" and line.effectiveStartDate_l <> "" and line.lineExpirationDate_l <> "" and line.dropProduct_l <> true and line.supportOptOut_l <> true)
 if(line._part_number <> "" and line.endOfSupportServiceDate_l <> "" and line.effectiveStartDate_l <> "" and line.lineExpirationDate_l <> "" and line.dropProduct_l <> true)
 {
  endOfSupportServiceDate = substring(line.endOfSupportServiceDate_l,0,10) + " " + "00:00:00";
  endOfSupportServiceDateObject = strtodate(endOfSupportServiceDate,dateFormat);
  contractStartDate = substring(line.contractStartDate_l,0,10) + " " + "00:00:00";
  effectiveStartDateObject = strtodate(contractStartDate,dateFormat);
 // lineExpirationDateObject = strtodate(line.lineExpirationDate_l,dateFormat);
  contractEndDate = substring(line.contractEndDate_l,0,10) + " " + "00:00:00";
 // print contractEndDate;
  contractEndDateObject = strtodate(contractEndDate,dateFormat);
  if(comparedates(endOfSupportServiceDateObject,effectiveStartDateObject) == -1)
  {
   validatedates= true;
   //VIPER-933 - Begin - identify error line numbers
   errorLinesDate = errorLinesDate + string(line._sequence_number) +" , ";
   //VIPER-933 - End
  }
  if(comparedates(endOfSupportServiceDateObject,contractEndDateObject) == -1)
  {
   validatedates = true;
   //VIPER-933 - Begin - identify error line number
   errorLinesDate = errorLinesDate + string(line._sequence_number) +" , ";
   //VIPER-933 - end
  }
 }
 
 //end of code
 //validation Contract Dates Validation; kacharya
 //adding condition to exclude SKU="Cust" lines from Contract dates validation BROCAD2-4566; Shivendra 
 if(line._part_number <> "" AND line._part_number <> "Cust")
 {
  if(line.contractStartDate_l <> "" and line.contractEndDate_l <> "")
  {
   lineContractStartDateStr = substring(line.contractStartDate_l,0,10);
   lineContractStartDateStr = lineContractStartDateStr + " 12:00:00";
   linecontractEndDateStr = substring(line.contractEndDate_l,0,10);
   linecontractEndDateStr = linecontractEndDateStr +" 12:00:00";
   linecontractStartDateObj = strtodate(lineContractStartDateStr,dateFormat);
   linecontractEndDateObj = strtodate(linecontractEndDateStr,dateFormat);
   if(comparedates(linecontractEndDateObj,linecontractStartDateObj) == -1)
   {
    datevalidation=true;
   }
  }
 }
 //end of code

 //validation Support Products Validation
 if(quoteType_t <> "contractQuote" and (dealType_t == "bSN" or dealType_t == "bSNRenewal"))
 {
  if(line.coveredProduct_l == "" and line._part_number <> "" and line.supportOptOut_l == false and line._part_number <> custString)
  {
   if(not containsKey(parentPartDictionary,line._part_number))
   {
    put(parentPartDictionary, line._part_number, line._price_quantity);
    
   }
   else
   {
    savedValue = get(parentPartDictionary,line._part_number);
    quantity = savedValue + line._price_quantity;
    put(parentPartDictionary, line._part_number, quantity);
    
   }
  }
  elif(line.coveredProduct_l <> "" and line._part_number <> "" and line._part_number <> custString)
  {
   if(not containsKey(supportPartDictionary,line._part_number))
   {
    put(supportPartDictionary, line._part_number, line._price_quantity);
   }
   else
   {
    savedValue = get(supportPartDictionary,line._part_number);
    quantity = savedValue + line._price_quantity;
    put(supportPartDictionary, line._part_number, quantity);
    
   }
   keyValuePair = line._part_number+"~"+line.coveredProduct_l;
   if(not containsKey(supportPartParentPartMap,keyValuePair))
   {
    put(supportPartParentPartMap, keyValuePair , line._price_quantity);
    
   }
   else
   {
    savedValue = get(supportPartParentPartMap,keyValuePair);
    quantity = savedValue + line._price_quantity;
    put(supportPartParentPartMap, keyValuePair, quantity);
    
   }
   if(not containsKey(coveredProductDictionary,line.coveredProduct_l))
   {
    put(coveredProductDictionary, line.coveredProduct_l , line._price_quantity);
    
   }
   else
   {
    savedValue = get(coveredProductDictionary,line.coveredProduct_l);
    quantity = savedValue + line._price_quantity;
    put(coveredProductDictionary, line.coveredProduct_l, quantity);
   }
  }
 }
 //end of validation rule code
 dateFormat1 = "yyyy-MM-dd HH:mm:ss";
 dateFormat2 = "yyyy-MM-dd HH:mm:ss";
 if(quoteType_t<>"contractQuote")
 {

  if(line.coveredProduct_l<> "")
  {
   totalMaintenanceFee = totalMaintenanceFee + round(line.extProposedNetPriceRequested_l,precision);
   if(quoteType_t == "renewalQuote" and line.dropProduct_l == true){
    totalMaintenanceFee = totalMaintenanceFee - round(line.extProposedNetPriceRequested_l,precision);
   }
  }
  else
  {
   totalLicenseFee = totalLicenseFee + round(line.extProposedNetPriceRequested_l,precision);
   if(quoteType_t == "renewalQuote" and line.dropProduct_l == true){
     totalLicenseFee = totalLicenseFee - round(line.extProposedNetPriceRequested_l,precision);
   }
  }
  
  sbappend(sb , line._document_number , dlim , "lineApprovalStatus_l" ,dlim , status_t , dend);
 }
 // code for financial summary --start
 //VIPER-748 Excluding dropped lines from the calculations
  if((line._part_number<>"Cust" OR  line._model_name=="") and line.dropProduct_l <> true){
  // Calculation of Gross/Contract List Price, Discount $ off Contract/List Price, Discount % off Contract/List Price
  // and Total Proposed Net Price (USD)
     grossContractListPrice = grossContractListPrice + line.extContractListPrice_l;
  if(quoteType_t <> "contractQuote"){
   discDOffContractListPrice = discDOffContractListPrice + round(line.lineDiscountAmount_l,precision);
   sumExtProposedNetPriceRequested = sumExtProposedNetPriceRequested + line.extProposedNetPriceRequested_l; 
      sumExtContractListPrice = sumExtContractListPrice + line.extContractListPrice_l;
   sumExtLineDiscountAmount = sumExtLineDiscountAmount + round(line.extLineDiscountAmount_l,precision);
   if( line.extContractListPrice_l <>0){
   discPerContractListPrice =  (1- ( sumExtProposedNetPriceRequested/ sumExtContractListPrice))*100;
   } 
   // Calculation of Proposed Lic Sub Fee based on Transaction Type - New, Renewal and Capacity
   if(line.transactionTypeM_l == "New" and line.coveredProduct_l == ""){
   proposedLicSubFeeNew = proposedLicSubFeeNew + line.extProposedNetPriceRequested_l;
      } 
      if(line.transactionTypeM_l == "Renew" and line.coveredProduct_l == ""){
    proposedLicSubFeeRenew = proposedLicSubFeeRenew + line.extProposedNetPriceRequested_l;
      } 
      if(line.transactionTypeM_l == "Capacity" and line.coveredProduct_l == ""){
    proposedLicSubFeeCapacity = proposedLicSubFeeCapacity + line.extProposedNetPriceRequested_l;
      }
   sumEstAnnualizedBookingD = sumEstAnnualizedBookingD + line.estAnnualizedBooking_l;
      sumEstQuarterlyBookingD = sumEstQuarterlyBookingD + line.estQuarterlyRevenue_l;
   sumExtCost = sumExtCost + line.extCost_l;
   if( sumExtProposedNetPriceRequested <> 0){
   totalMarginPercent = ( (sumExtProposedNetPriceRequested -sumExtCost)/(sumExtProposedNetPriceRequested)) *100;
         }
      totalMarginDollar = (sumExtProposedNetPriceRequested - sumExtCost);
   sumNewAnnualRenewalValue = sumNewAnnualRenewalValue +line.newAnnualRenewalValue_l;
   //sumExpiringAnnualRenewalValue =sumExpiringAnnualRenewalValue +line.expiringAnnualRenewal_l;
   sumPriceUpliftAnnualRenewalValue = sumPriceUpliftAnnualRenewalValue + line.priceUpliftAnnualRenewalValue_l;
   
      // Setting Days for BROCAD2-4874 - Total Capacity Deviation - Start
   Days=line.totalNewSupportTermDays_l;
   if( line.transactionTypeM_l== "Capacity") {
    // Calculating Total Proposed Net Price and Total Extended Prior Price for BROCAD2-4874 - Total Capacity Deviation - Start
             totalProposedNetPrice = totalProposedNetPrice + line.extProposedNetPriceRequested_l;
             totalExtendedPriorPrice = totalExtendedPriorPrice + (line.contractedOrPriorLicenseSubFee_l*(Days/365.0)*line._price_quantity);
   }
   // Setting Days for BROCAD2-4874 - Total Capacity Deviation - End
   
   // Calculation of Proposed Support Fee based on Transaction Type - New, Product and Capacity
   if(line.transactionTypeM_l == "New" and line.coveredProduct_l <> "")
      {
    proposedSupportNew = proposedSupportNew + line.extProposedNetPriceRequested_l;
      }
      if(line.transactionTypeM_l == "Renew" and line.coveredProduct_l <> "")
   {
    proposedSupportRenew = proposedSupportRenew + line.extProposedNetPriceRequested_l;
   }
   if(line.transactionTypeM_l == "Capacity" and line.coveredProduct_l <> "")
   {
    proposedSupportCapacity = proposedSupportCapacity + line.extProposedNetPriceRequested_l;
   }
  }
    }
    
    //VIPER-748 Including dropped lines for total EAR
    if(line._part_number<>"Cust" OR  line._model_name==""){
     if(quoteType_t <> "contractQuote"){
      sumExpiringAnnualRenewalValue =sumExpiringAnnualRenewalValue +line.expiringAnnualRenewal_l;
      
      // Calculation of Expiring Annual Renewal based on Transaction Type - New, Renewal and Capacity and Quote Type - Renewal
   if (quoteType_t =="renewalQuote" )
      {
           if( line.transactionTypeM_l== "Renew")
        {
             expiringAnnualRenewalRenew = expiringAnnualRenewalRenew + line.expiringAnnualRenewal_l;
             newAnnualRenewalRenew = newAnnualRenewalRenew + line.newAnnualRenewalValue_l;
           }
           if( line.transactionTypeM_l== "New")
     {
             expiringAnnualRenewalNew = expiringAnnualRenewalNew + line.expiringAnnualRenewal_l;
             newAnnualRenewalNew = newAnnualRenewalNew + line.newAnnualRenewalValue_l;
           }
           if( line.transactionTypeM_l== "Capacity")
     {
             expiringAnnualRenewalCapacity = expiringAnnualRenewalCapacity + line.expiringAnnualRenewal_l;
             newAnnualRenewalCapacity = newAnnualRenewalCapacity + line.newAnnualRenewalValue_l;
           }
           //SYMINT-5533-Begin - Computing Annual Renewal value for Upgrade lines.
           if(line.transactionTypeM_l == "Upgrade")
           {
            expiringAnnualRenewalUpgrade = expiringAnnualRenewalUpgrade + line.expiringAnnualRenewal_l;
            newAnnualRenewalUpgrade = newAnnualRenewalUpgrade + line.newAnnualRenewalValue_l;
           }
           //SYMINT-5533-End
         }
      
     }
    } 
    
}


proposedLicSubFeeTotal=proposedLicSubFeeCapacity + proposedLicSubFeeNew +proposedLicSubFeeRenew;
proposedSupportTotal =proposedSupportCapacity +proposedSupportNew + proposedSupportRenew;

// Calculation of Renewal Rate based on New Annual Renewal and Expiring Annual Renewal
if(expiringAnnualRenewalRenew <> 0.0)
{     
    renewalRateHeader =   ( newAnnualRenewalRenew/expiringAnnualRenewalRenew)*100 ;
}
//SYMINT-5533-Begin - Including New Annual Renewal Values and Expiring Annual Renewal Values for Upgrade lines.
//sumForAnnualRenewal= (expiringAnnualRenewalRenew + expiringAnnualRenewalNew + expiringAnnualRenewalCapacity) ;
//sumForNewAnnualRenewal = (newAnnualRenewalCapacity + newAnnualRenewalNew + newAnnualRenewalRenew);
sumForAnnualRenewal= (expiringAnnualRenewalRenew + expiringAnnualRenewalNew + expiringAnnualRenewalCapacity + expiringAnnualRenewalUpgrade) ;
sumForNewAnnualRenewal = (newAnnualRenewalCapacity + newAnnualRenewalNew + newAnnualRenewalRenew + newAnnualRenewalUpgrade);
//SYMINT-5533-End
// Calculation of ARR% based on New Annual Renewal and Expiring Annual Renewal
if(sumForAnnualRenewal <> 0.0)
{
    aRRPercent = (sumForNewAnnualRenewal / sumForAnnualRenewal)*100; 
}
// code for financial summary --end
approvalDate = "";

//Abinash
keysOfErrorSupportPartsDictionary = keys(errorSupportPartsDictionary);
parentErrorLines = "";
sbParentError = stringbuilder();
errorLines = "";
sbError = stringbuilder();
//validation : Support Products Validation; kacharya
if(quoteType_t <> "contractQuote" and (dealType_t == "bSN" or dealType_t == "bSNRenewal"))
{
 mapDictionaryKeys = keys(supportPartParentPartMap);
 retrievedKey = "";
 numberOfParentParts = 0;
 numberOfSupportParts = 0;
 parentPartKey = "";
 supportPartKey = "";

 parentPartArray = keys(parentPartDictionary);
 yesLiteral = "Y";
 resultSet = bmql("select MPN,Support_Required from BRCM_Part_Master_Ext where MPN IN $parentPartArray and Support_Required = $yesLiteral");
 countOfRecords = 0;
 for each_record in resultSet
 {
  partNumber = get(each_record,"MPN");
  for each in keysOfErrorSupportPartsDictionary
  {
   if(find(each,partNumber) <> -1)
   {
    sbappend(sbParentError, get(errorSupportPartsDictionary,each),",");
   }
  }
  countOfRecords = countOfRecords + 1;
 }
 if(countOfRecords == 0)
 {
  
  validation=false;
 }

 for eachKey in mapDictionaryKeys
 {
  supportPartCount = 0;
  parentPartCount = 0;
  retrievedKey = eachKey;
  splitResult = split(retrievedKey,"~");
  supportPartKey = splitResult[0];
  parentPartKey = splitResult[1];
  
  if(containsKey(supportPartDictionary,supportPartKey))
  {
   
   supportPartCount = get(supportPartDictionary,supportPartKey);
  }
  if(containsKey(parentPartDictionary,parentPartKey))
  {
   
   parentPartCount = get(parentPartDictionary,parentPartKey);
  }
  if(supportPartCount <> 0 and parentPartCount <> 0)
  {
   
   supportPartCount = supportPartCount-parentPartCount;
   if(supportPartCount < 0)
   {
    splitEachKey = split(eachKey,"~");
    
    for each in keysOfErrorSupportPartsDictionary
    {
     if(find(each,splitEachKey[0]) <> -1)
     {
      sbappend(sbError , get(errorSupportPartsDictionary,each),",");
     }
    }
    validation=true;
   }
   put(supportPartDictionary,supportPartKey,supportPartCount);
   
  }
  
 }

  if(countOfRecords <> 0 and sizeofarray(mapDictionaryKeys)==0)
  {
   
   validation=true;
  }
  else
  {
   parentErrorLines = "";
  }
}
 //end of validation code
 //validate: validation rule to covered product
 coveredPartArray = values(coveredProduct1Dictionary);
 keysOfCoveredDict = keys(coveredProduct1Dictionary);
 errorLines1="";
 sbErrorLine1 = stringbuilder();
 resultSet = bmql("select MPN from BRCM_Part_Master_Ext where MPN IN $coveredPartArray");
 countOfRecords = 0;
 for each_record in resultSet
 {
      countOfRecords = countOfRecords + 1;
      part_number = get(each_record,"MPN");
               for each in keysOfCoveredDict
               {
                              if(find(each, part_number) <> -1)
                              {
                                     splitEach = split(each, "@@@");
                                     if(part_number <> get(coveredProduct1Dictionary,each))
                                     {
                                       sbappend( sbErrorLine1 , get(linePartDict,each),",");
                                     }
                                            
                              }
               }
 }
 //end of validation
 //Removed the internal comment blank check 
 if(status_t=="APPROVED" and contractDateValidation_avg<>"true")
 {
  res=commerce.updateCustomerPricingList_avg();
 }
 
 if(approvalDate_t == "" and status_t=="APPROVED")
 {
  approvalDate = datetostr(getDate()); 
  sbappend(sb,"1~approvalDate_t~" , substring(approvalDate,0,10) , "|");
 }
 if(quoteType_t<>"contractQuote")
 {
  sbappend(sb,commerce.updateBillingSchedule2(totalMaintenanceFee, totalLicenseFee));
 }
 noOfProducts = sizeofarray(counterCoveredPartArray);
 if(countOfRecords <> noOfProducts)
 {
  sbappend(sb,"1~validateCoveredProductsOnLinesFlag_t~","true","|");
 }
 else
 {
  sbappend(sb,"1~validateCoveredProductsOnLinesFlag_t~","false","|");
 }
 parentErrorLines = sbtostring(sbParentError);
 errorLines = sbtostring(sbError);
 errorLines1 = sbtostring(sbErrorLine1);
 sbappend(sb,commerce.invokingSOAService_brcm("B"),"1~validateEffectiveStartAndExpirationDates_t~",string(validatedates), "|", "1~validateSupportProductsValidation_t~",string(validation),"|","1~validateContractDates_t~",string(datevalidation),"|","1~errorLineValidation3_t~",errorLines + "###" + parentErrorLines,"|","1~errorLineValidation2_t~",errorLines1,"|");
 // Financial Summary Attributes -- Start
 sbappend(sb,"1~grossContractListPrice_t~" , string(grossContractListPrice) , "|");
 sbappend(sb,"1~discountOffContractListPrice_t~" , string(discDOffContractListPrice) , "|");
 sbappend(sb,"1~discountPercentOffContractListPrice_t~" , string(discPerContractListPrice) , "|");
 sbappend(sb,"1~extLineDiscountAmount_t~" , string(sumExtLineDiscountAmount) , "|");
 sbappend(sb,"1~totalProposedNetPriceUSDFS_t~" , string(totalProposedNetPriceUSD) , "|");
 sbappend(sb,"1~totalProposedNetPriceLCFS_t~" , string(totalProposedNetPriceLC) , "|");
 sbappend(sb,"1~proposedLicSubFeeNewProduct_t~" , string(proposedLicSubFeeNew), "|");
 sbappend(sb,"1~proposedLicSubFeeRenewal_t~" , string(proposedLicSubFeeRenew) , "|");
 sbappend(sb,"1~proposedLicSubFeeCapacity_t~" ,string(proposedLicSubFeeCapacity) , "|");
 sbappend(sb,"1~proposedLicSubFeeGrandTotal_t~" , string(proposedLicSubFeeTotal), "|");
 sbappend(sb,"1~estAnnualizedBooking_t~" , string(sumEstAnnualizedBookingD) , "|");
 sbappend(sb,"1~estQuarterlyBooking_t~" ,  string(sumEstQuarterlyBookingD) , "|");
 sbappend(sb,"1~totalMarginPercent_t~" , string(totalMarginPercent) , "|");
 sbappend(sb,"1~totalMarginDollar_t~" , string(totalMarginDollar) , "|");
 sbappend(sb,"1~totalCOGS_t~" , string(sumExtCost) , "|");
 sbappend(sb,"1~newAnnualRenewalValue_t~" , string(sumNewAnnualRenewalValue) , "|");
 sbappend(sb,"1~renewalRate_t~" , string(renewalRateHeader) , "|");
 sbappend(sb,"1~aRR_t~" , string(aRRPercent) , "|");
 sbappend(sb,"1~proposedSupportNewProduct_t~" , string(proposedSupportNew) , "|");
 sbappend(sb,"1~proposedSupportRenewal_t~" , string(proposedSupportRenew) , "|");
 sbappend(sb,"1~proposedSupportCapacity_t~" , string(proposedSupportCapacity) , "|");
 sbappend(sb,"1~proposedSupportFeeGrandTotal_t~" ,  string(proposedSupportTotal) , "|");
 sbappend(sb,"1~expiringAnnualRenewalValue_t~" , string(sumExpiringAnnualRenewalValue) , "|");
 sbappend(sb,"1~priceUpliftAnnualRenewalValue_t~" , string(sumPriceUpliftAnnualRenewalValue) , "|");
 //VIPER-878 ; Setting values
 sbappend(sb,"1~jHASHRequired_t~" , jHashValidation , "|");
 // Setting the final value for BROCAD2-4874 - Total Capacity Deviation
 sbappend(sb,"1~totalCapacityDeviation_t~" , string(totalExtendedPriorPrice - totalProposedNetPrice) , "|");
 // Financial Summary Attributes -- End
 
 
 //setting values for BROCAD2-1046
 sbappend(sb,"1~errorLine1_t~",errorLines1_a,"|");
 sbappend(sb,"1~errorLine2_t~",errorLines2,"|");
 sbappend(sb,"1~errorLine3_t~",errorLines3,"|");
 sbappend(sb,"1~errorLine4_t~",errorLines4,"|");
 //VIPER-933 - assign to attribute
 sbappend(sb,"1~errorLines_t~",errorLinesDate,"|");
 //sbappend(sb,"1~errorLines6_t~",errorLines6,"|");

 
 result=sbtostring(sb);
return result;