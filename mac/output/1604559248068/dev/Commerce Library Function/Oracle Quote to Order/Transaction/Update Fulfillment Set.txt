/********************************************************************
Rule Name: Update Fulfillment Set
Description: This BML function is used to update fulfillment set Id.
Author: Vamsi Krishna
 ********************************************************************/
 /************************************************************************************************
Author - Kavita Lolla
Date - 26/04/2019
Defect - BROCAD2-1527
USer story summary - Contract Created from CPQ not Correct BST-2 - Fulfillment Set
*************************************************************************************************/
result="|";
dlim="~";
dend="|";
currentParent = "-1";
listofParts = string[];
childDoc = -1;
jsonObj = json();
jsonCoverProduct = json();
for line in transactionLine
{
 obj=json();
 PartNumber="";
 srNo = "";
 supportPartsPicklist="";

 if(line._line_item_comment <> "" AND line._part_number <> "Cust")
 {
  teststring=line._line_item_comment;
  
  obj=json(teststring);
  PartNumber=jsonget(obj,"PartNumber");
  srNo = jsonget(obj,"Sr_No");

  child=jsonget(obj,"child");
  childObj=json(child);
  
  supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
 }
 
 fulfillmentSet = "";
 
 if(line._parent_doc_number == currentParent)
 {
  if (line._part_number == supportPartsPicklist or line.coveredProduct_l <> "" and line.coveredProduct_l <> " ")
  {
   parentSetId = PartNumber + "-" + srNo + "-" +line._parent_doc_number;
   //fulfillmentSet = jsonget(jsonObj,PartNumber);
   fulfillmentSet = jsonget(jsonObj,parentSetId);
   if(isnull(fulfillmentSet) or fulfillmentSet == "")
   {
    childDoc = childDoc + 1;
    fulfillmentSet = transactionID_t + "_" + line._parent_doc_number + "." + String(childDoc);
   }
  }
  else
  {
   childDoc = childDoc + 1;
   fulfillmentSet = transactionID_t + "_" + line._parent_doc_number + "." + String(childDoc);
  }

 }
 else
 {
  childDoc = -1;
  if(line._parent_doc_number == "")
  {
   fulfillmentSet = transactionID_t + "_" + line._document_number;
   currentParent = line._document_number;
   childDoc = 0;
  }
  else
  {
   childDoc = 0;
   if (line._part_number == supportPartsPicklist or line.coveredProduct_l <> "" and line.coveredProduct_l <> " ")
   {
    parentSetId = PartNumber + "-" + srNo + "-" + line._parent_doc_number;
    //fulfillmentSet = jsonget(jsonObj,PartNumber);
    fulfillmentSet = jsonget(jsonObj,parentSetId);
   }
   else
   {
    childDoc = childDoc + 1;
    fulfillmentSet = transactionID_t + "_" + line._parent_doc_number + "." + String(childDoc);
    currentParent = line._parent_doc_number;
   }

  }

  if ( line.coveredProduct_l <> "" and line.coveredProduct_l <> " " and line._parent_doc_number <> "")
  {
   PartNumber = line._part_number;
   fulfillmentSetSupport = jsonget(jsonObj,line.coveredProduct_l);
   if( isnull(fulfillmentSetSupport))
   {
    print fulfillmentSetSupport;
   }
   else
   {
    fulfillmentSet = jsonget(jsonObj,line.coveredProduct_l);
   }
    
  }
  elif( line.coveredProduct_l <> "" and line.coveredProduct_l <> " " and line._parent_doc_number == "" and line._line_item_comment == "")
  {
   fulfillmentSet = transactionID_t + "_" + line._document_number+"."+string(1);
  }
 }

 result= result + line._document_number + dlim + "fulfillmentSet_l" + dlim + fulfillmentSet + dend; 
 jsonKey = line._part_number + "-" + srNo + "-" + line._parent_doc_number;
 jsonput(jsonObj,line._part_number,fulfillmentSet);
 jsonput(jsonObj,jsonKey,fulfillmentSet);
 jsonput(jsonCoverProduct,"coveredProduct",line.coveredProduct_l);
 jsonput(jsonCoverProduct,"partNumber",line._part_number);
 append(listOfParts,jsontostr(jsonCoverProduct));
}
return result;