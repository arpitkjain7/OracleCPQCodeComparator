/************************************************
/Rule Name: Renewal Divide Logic
/Description: This program is responsible for dividing newly created groups into batches
/Author: M Vamsi Krishna
/Creation Date: 04-May-2020
History:
 Date          Author            Comment 
 04/05/2020    M Vamsi   VIPER-817 Create renewal automation process to generate renewal quotes 
*/

//variable declaration
update_count_integer = "";
records_error_string = "";
groupIDArray = Integer[];
minGrpID = 0;
maxGrpID = 0;
startGrpId = 0;
endGrpId = 0;
groupSize = 0;
renewalBatchDetailUpdatePayload = dict("string");
usernameFlagUpdate = "";
passwordFlagUpdate = "";
fileLocationFlagUpdate = "";
soapendpointFlagUpdate = "";
recordUpdateString = "";
iD = 0;
//this attibute value is passed as response which decides number of renewal programs that needs to be triggered
lastGrpID = "";
size = Integer[]{1,2,3,4,5,6,7,8,9,10};

 endGrpIDRes = bmql("select END_GRP_ID from Renewal_Batch_Detail order by END_GRP_ID desc");
    
    for grpID in endGrpIDRes
    {
     iD = atoi(get(grpID,"END_GRP_ID"));
     break;
    }
    
    
//fetching minimum group id from Renewal Assets table that has null value in Transaction ID column

minGroupIds = bmql("select GROUP_ID from RENEWAL_ASSETS where GROUP_ID >  $iD  order by GROUP_ID asc");
for minGroupId in minGroupIds
{
  minGrpID = atoi(get(minGroupId,"GROUP_ID"));
  break;
}

//fetching minimum group id from Renewal Assets table that has null value in Transaction ID column

maxGroupIds = bmql("select GROUP_ID from RENEWAL_ASSETS where GROUP_ID >  $iD  order by GROUP_ID desc");

for maxGroupId in maxGroupIds
{
  maxGrpID = atoi(get(maxGroupId,"GROUP_ID"));
  break;
}
//Since the data has to be divided into 10 groups, calculating the group size as below
groupSize = Integer(ceil((maxGrpID - minGrpID)/10));

startGrpId = minGrpID;
count = 1;

// if the data is sufficient for splitting to 10 bathces   
if(groupSize >= 10)
{
//triggering web servie to update renewal batch detail table with respective start and end group ID's
renewalBatchDetailUpdatePayload = dict("string");
renewalBatchDetailUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Batch_Detail_Update'");
   for each in renewalBatchDetailUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalBatchDetailUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalBatchDetailUpdatePayload,"Password", passwordFlagUpdate);
recordUpdateString = "";
for i in size
{
   endGrpId = startGrpId + groupSize;
   Program_ID = "Renewal Program " + string(i);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SNO>"+string(i)+"</bm:SNO>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Start_Time>"+currentsystemDate+"</bm:Batch_Start_Time>";
   recordUpdateString = recordUpdateString +"<bm:Program_ID>"+Program_ID+"</bm:Program_ID>";
   recordUpdateString = recordUpdateString +"<bm:Status>"+"In Progress"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:START_GRP_ID>"+String(StartGrpID)+"</bm:START_GRP_ID>";
   recordUpdateString = recordUpdateString +"<bm:END_GRP_ID>"+String(EndGrpID)+"</bm:END_GRP_ID>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";

startGrpId = endGrpId +1;
}
   put(renewalBatchDetailUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalBatchDetailUpdate=applytemplate(fileLocationFlagUpdate,renewalBatchDetailUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&lt;","<");
   quoteRequestRenewalBatchDetailUpdate= replace(quoteRequestRenewalBatchDetailUpdate,"&gt;",">");
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update Renewal Batch Details table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalBatchDetailUpdate, "error",headersDict);
   
   lastGrpID = "10";
}

// if the data is not sufficient for splitting to 10 bathces
elif((maxGrpID - minGrpID)>= 0)
{
groupSize = (maxGrpID - minGrpID);
//if data has only 1 new group created
if ((maxGrpID - minGrpID)== 0)
{
count =1;
groupSize = 1;
lastGrpID = "1";
}

groupSizeArray = Integer[groupSize];
renewalBatchDetailUpdatePayload = dict("string");
//triggering web servie to update renewal batch detail table with respective start and end group ID's
recordUpdateString = "";
renewalBatchDetailUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Batch_Detail_Update'");
   for each in renewalBatchDetailUpdate
   {
    usernameFlagUpdate = get(each,"Username");
    passwordFlagUpdate = get(each,"Password");
    fileLocationFlagUpdate = get(each,"File_Location");
    soapendpointFlagUpdate = get(each,"SoapEndpoint");
   }
   put(renewalBatchDetailUpdatePayload,"Username", usernameFlagUpdate);
   put(renewalBatchDetailUpdatePayload,"Password", passwordFlagUpdate);
 //for i in groupSizeArray
 //{
   endGrpId = startGrpId + 1;
   Program_ID = "Renewal Program " + string(count);
   currentsystemDate = datetostr(getdate());
   recordUpdateString = recordUpdateString +"<bm:each_record>";
   recordUpdateString = recordUpdateString +"<bm:SNO>"+string(count)+"</bm:SNO>";
   recordUpdateString = recordUpdateString +"<bm:Batch_Start_Time>"+currentsystemDate+"</bm:Batch_Start_Time>";
   recordUpdateString = recordUpdateString +"<bm:Program_ID>"+Program_ID+"</bm:Program_ID>";
   recordUpdateString = recordUpdateString +"<bm:Status>"+"In Progress"+"</bm:Status>";
   recordUpdateString = recordUpdateString +"<bm:START_GRP_ID>"+String(minGrpID)+"</bm:START_GRP_ID>";
   recordUpdateString = recordUpdateString +"<bm:END_GRP_ID>"+String(maxGrpID)+"</bm:END_GRP_ID>";
   recordUpdateString = recordUpdateString +"</bm:each_record>";

startGrpId = endGrpId +1;
lastGrpID = string(count);
count = count +1;
//this logic will break the loop of updating renewal batch detail table when max_group_id or max_group_id +1 is equal to end_group_id
/*if(endGrpId == maxGrpID or (endGrpId == maxGrpID +1))
{
break;
}
 }*/
 
 put(renewalBatchDetailUpdatePayload,"forloop", recordUpdateString);
   
   defaultErrorMessage="";
   quoteRequestRenewalBatchDetailUpdate=applytemplate(fileLocationFlagUpdate,renewalBatchDetailUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&lt;","<");
   quoteRequestRenewalBatchDetailUpdate= replace(quoteRequestRenewalBatchDetailUpdate,"&gt;",">");
   quoteRequestRenewalBatchDetailUpdate = replace(quoteRequestRenewalBatchDetailUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   response="";
   //Trigger the web service to update Renewal Batch Detail table
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalBatchDetailUpdate, "error",headersDict);
}
return lastGrpID;