/************************************************************************************************************
Description: This library function is used to populate all the pricing related attributes of line items in a quote.
Return type: string
History:     Date          Author            Comment 
 01/02/2019    Satyabrata Acharya   Modified the library as per best practices
 02/18/2019    Raghavendra Kumar    Setting some more pricing related attributes
 03/11/2019    M Vamsi      Updating uplift factor as a percentage value
 04/02/2018    Ravi Kumar     Updating MSRP and extProposedNetPriceRequested for Renewals 
 04/12/2019    Keerthi              Setting uplift factor as part of BROCAD2-1099
 05/09/2019    Satyabrata Acharya   Optimized code to align with best practices and used string builder
 05/14/2019 Kavita Lolla     Merge populate approval flag library in this library for code optimization.
 06/24/2019 M Vamsi      Fix for BROCAD2-1617, updating salesmin value for support part based on covered product
 25/06/2019 Kavita Lolla     Included fix for BROCAD2-3389. Line 2089 - 2093 , 985 - 992 , 2781 - 2785. 
               Proposed price calculation for imported lines using hiddenProposedPrice_l.
 02/07/2019 Kavita Lolla     BROCAD2-3504. RenewalFlag should be true only if renew lines are present in Lines.
 03/07/2019 Ravi Kumar     BROCAD2-4748 MSRP Extended new attribute is added to calculte ext MSRP and updated existing MSRP Logic
 15/07/2019 Kavita Lolla     BROCAD2-5278 - Moving the code to update Renewal flag from Save action to Update financial summary action.
 25/07/2019 Satyabrata Acharya  BROCAD2-5502 - Restrict address selection to the same OU in quote header.
 25/07/2019  Ravi kumar     BROCAD2-5532 - Unit MSRP and Ext. MSRP attributes are becoming blank after Import 
 26/07/2019 Kavita Lolla  BROCAD2-1617 - Remove Null checks for Salesmin3.
 29/07/2019     M Vamsi   VIPER - 264 - Pricing Issue in Merge in Renewal Quotes for Subscription lines
 08/05/2019 M Vamsi   VIPER-304 - Ext. Contract/List Price not calculating correctly for auto-generated renewal line item
 08/08/2019 Satyabrata Acharya    VIPER-328 - Double save issue for Customer Pricing
 08/21/2019     Adithya Suresh          VIPER-355 - Proposed Price issue with Zero Price Products
 08/21/2019 Ravi Kumar     VIPER-278 - Added Condition to check renewalCreatedBy is not Integration User to avoid Global Pricing calculations 
      when EAR is zero and incase of Cloned Quote 'CreatedBy' is updated to Actual User instead of Integration
09/04/2019 Ravi Kumar  VIPER-412 - Regression Issue: When we Split Zero price products in renewal quote Standard Global Pricing is getting applied for that line item
10/04/2019 M Vamsi   VIPER-438 - Symantec - Installed at on quote lines should be editable
10/28/2019 Satyabrata Acharya    SYMINT-1657 added logic to blank out customer details values if operating unit is changed
12/04/2019   Keerthivasan A          SYMINT-2514  Integration with SOA when the line items are greater than 5000
01/02/2020 Arjun Singh  SYMINT-3206  Added the code for having discount 100% for Symantec Trail POC Quote   
01/17/2020  Arjun Singh  SYMINT-3131  Modified the condition for Symantec Trial/POC Quotes
01/22/2020      Adithya Suresh          SYMINT-4432  Regression Issue: Pricing Issue in Import Export for currencies other than USD
03/20/2020 Adithya Suresh  VIPER-748    Added drop product logic for apply proposed price calculation fix
04/05/2020 Kavita Lolla  VIPER-823    Sales Mins should be calculated based of Base price of the product instead of Unit MSRP.
11/05/2020 Adithya Suresh  SYMINT-7850 - Autopopulating the contract end date from the SN table for upgrade lines
05/06/2020 Kavita Lolla  SYMINT-7850  Populate contract end dates for capacity lines based on renew lines.
18/06/2020 Kavita Lolla  VIPER-907 - Error Message needs to be updated for Invalid Prior Contract# and Line# entered
23/06/2020 Kavita Lolla  VIPER-913    Upgrade Double save issue
25/06/2020 Kavita Lolla  VIPER-919   Co-term of Renewal/Capacity to be based on prior contract and prior contract line and not consider serial number.
02/07/2020 Kavita Lolla  VIPER-917   CPQ: Validation - Upgrade lines and/or VA with renewal--take end date of renewal
13/07/2020  Sindhura Chintakindi VIPER-780   CPQ:Validation on Renewal
23/07/2020 Kavita Lolla  VIPER-938   Exclude SK products from the capacity/upgrade coterming logic.
30/07/2020  Sindhura Chintakindi VIPER-958   CPQ:Validation on New/Capacity/Upgrade lines
19/08/2020 Satyabrata Acharya VIPER-973   Apply Pricing Uplift Based on Business Division
24//08/2020 Kavita Lolla  VIPER-933   Line numbers are required for validations on line items.
27/08/2020 Kavita Lolla  VIPER-960   Read serial no, prior contract and prior contract line from quote if not from parent child string.
16/09/2020 Satyabrata Acharya VIPER-968   CAD Renew/Capacity Validations
12/10/2020 Satyabrata Acharya VIPER-1035  CAD Renew/Capacity Validations : Invalid Contract Number and Contract Line Number should be allowed for Renew Lines
************************************************************************************************************/
result = "";
dateFormat1 = "yyyy-MM-dd HH:mm:ss";
dateFormat2 = "yyyy-MM-dd HH:mm:ss";
salesminprice="";
sb=stringbuilder();
sb1=stringbuilder();
sb2=stringbuilder();
sb3=stringbuilder();
sb4=stringbuilder();
sb5=stringbuilder();
sb6=stringbuilder();
sb7=stringbuilder();
sb8=stringbuilder();
sb9=stringbuilder();
sb9a=stringbuilder();
sb10=stringbuilder();
sb11=stringbuilder();
sb12=stringbuilder();
sb13=stringbuilder();
sb14=stringbuilder();
sb15=stringbuilder();
sb16=stringbuilder();
sb17=stringbuilder();
sb18=stringbuilder();
sb19=stringbuilder();
sb20=stringbuilder();
sb21=stringbuilder();
sb22=stringbuilder();
sb23=stringbuilder();
sb24=stringbuilder();
sb25=stringbuilder();
sb26=stringbuilder();
sb27=stringbuilder();
sb28=stringbuilder();
sb29=stringbuilder();
sb30=stringbuilder();
sb31=stringbuilder();
sb32=stringbuilder();
sb33=stringbuilder();
busDivision = "";
//Variables for Populating Approval Flag
validation="false";
Customer = _transaction_customer_id;
BillTo = billToCustomerId_t;
EndCust = soldToCustomerAccountID_t;
QuoteDealType = lower(dealType_t);
searchString = "education";
parentPartDictionary = Dict("integer");
approveFlag = false;
//BROCAD-5278
//BROCAD2-3504-BEGIN
//renewalFlag = false;
//BROCAD2-3504-END
capacityFlag = true;
result = "";
dDRFlag = false;
//end
quantity=0;
min_qty=1;
dlim ="~";
dend ="|";
NDP = 1.0;
Curr_date = getdate();
ret = "false";
effectivestartDate_array=date[];
lineUnitListPrice_array=float[];
mpn_array=string[];
cpn_array=string[];
coveredpdt="";
Division = "";
StartDate = getdate();
EndDate = getdate();
currdate = getdate();
partPrice = "";
partNoDict = Dict("string");
response="";   
partPriceDict = Dict("string");
basePrice = "";
productCode="";
finalSKU="";
currentSKU="";
upgradeSKU="";
supp_rate = 0.0;
Contract_no="NA";
errorLines="";
//VIPER-933 - Begin - error lines variable for requested discount.
requestedDiscountError = "";
//VIPER-933 - End
dateFormat = "yyyy-MM-dd HH:mm:ss";
contractdetials=string[2];
supp_price = "";
final_price = "0.0";
listPrice="0.0";
proposedPrice = 0.0;
proposedunitprice=0.0;
totalUSD=0.0;
sumNewAnnualRenewalvalue =0.0;
SubscriptionPricing="0.0";
SubscriptionPricing1="0.0";
newAnnualRenewalValue =0.0;
dateFormatN = "yyyy-MM-dd HH:mm:ss";
AccountNums =_transaction_customer_id+"~"+billToCustomerId_t+"~"+_transaction_customer_id + "~" + endCustomerParentId_avg + "~";
param_per_unit_per_list_price = 0.0; //variable added on 2019/feb/18
param_proposed_net_unit_price_requested = 0.0; //variable added on 2019/feb/18
lineDiscount = 0;//variable added on 2019/feb/18
param_ext_contract_list_price = 0.0;//variable added on 2019/feb/18
param_ext_proposed_net_unit_price_requested = 0.0;//variable added on 2019/feb/18
extLineDiscount = 0.0;//variable added on 2019/feb/18
param_approver_recc_net_unit_price = 0.0;
param_approver_ext_recc_net_unit_price = 0.0;
mpn_arraymulti=string[];
currency = "";
total=0.0;
exch = "1";
salesminprice="";
supp_rate1 = 0.0;
unitMSRP = 0.0;
extMSRP = "0.0";
totalMaintenanceFee = 0.0;
totalLicenseFee = 0.0;
totalExtPrice = 0.0;
currency = _system_current_document_currency_pref;
precision = 0;
//Merge approval flag
Customer = _transaction_customer_id;
BillTo = billToCustomerId_t;
EndCust = soldToCustomerAccountID_t;
approveFlag = false;
//BROCAD-5278
//BROCAD2-3504-BEGIN
//renewalFlag = false;
//BROCAD2-3504-END
capacityFlag = true;
result = "";
final_price1 = "";
dDRFlag = false;
coveredProductDictionary = Dict("string");
coveredProductsFromTableDictionary=Dict("string");
subscription_price = "0.0";
ratio = 1.0;
Days = 1;
propPrice = 0.0;
sub_type = "";
base_price1 = "0.0";
sub_factor = 0.0;
isPresentInPremierCodes = false;
isPresentInEssentialCodes = false;
validateSupportTypesOnLineItemsFlag = false;
fulfillmentSet = "";
totalFee = 0.0;
//variables declared for promotion multicheck
counter1=1;
counter2=1;
Promotion_var="Multi";
mpn_array1=string[];  //stores all the part numbers
Curr_date=getdate();
emptyarray=string[];
promo_array=string[]; //stores the promotion parts
//variables that are used in order to fetch the customer ids for customer pricing
BillToCustomerId=billToCustomerId_t;
EndCustomerId=_transaction_customer_id;
operatingUnit=operatingUnit_t;
BillParentId=billToParentId_avg;
BillGrandParentId=billToGrandParentId_avg;
EndParentId=endCustomerParentId_avg;
EndGrandParentId=endCustomerGrandParentId_avg;
eDIsymorder=eStoreEDI_t;
//SYMINT-7850-BEGIN - 06/05/2020
rnwCptKeyJson = json();
errorLinesContractStatus = "";
status="";
//SYMINT-7850-END
//VIPER-907 - Begin - Initialise flags to identify bogus contracts or expired contracts
priorContractExpiredFlag = false;
noPriorContractDataFlag = false;
errorLinesContractBogus = "";
//VIPER-907 - END
//VIPER-938 - Begin
productLine = "";
//VIPER-938 - End
//Viper-780 - Start--String for storing line nos where validation should be thrown
errorLinesrenewalprod ="";
//Viper-780 - END

//Viper-958 - Start--String for storing line nos where validation should be thrown
errorLinesnewprod ="";
errorLinescapacityprod ="";

//Viper-958- END

//VIPER-960 - Begin
productGroup="";
keyGen="";
//VIPER-end
mSRP="0.0";
//validation rule: Validate Support Types on Line Items; adithya
resultSet1 = bmql("select Support_Level,Support_Type_Code from BRCM_Support_Rate where Support_Level Like '%Premier%' or Support_Level Like '%Premium%'");
resultSet2 = bmql("select Support_Level,Support_Type_Code from BRCM_Support_Rate where Support_Level Like '%Essential%'");

premierSupportCodesDictionary = Dict("string");
EssentialSupportCodesDictionary = Dict("string");

//SYMINT-2514 : Initializing Line Item Counter
numberOfLineItems = 0;

for each_record in resultSet1
{
 supportTypeCode = get(each_record,"Support_Type_Code");
 put(premierSupportCodesDictionary, supportTypeCode, supportTypeCode);
}

for each_record in resultSet2
{
 supportTypeCode = get(each_record,"Support_Type_Code");
 put(EssentialSupportCodesDictionary, supportTypeCode, supportTypeCode);
}
//************************ 
if(startswith(dealType_t,"bSN"))
{
 if (totalValueUSD_t > 250000)
 {
  dDRFlag = true;
 }
}
if(dDRFlag == false)
{
 if(restrictedCustomerFlag_t)
 {
  dDRFlag = true;
 }
}
//end merge

if(quoteType_t <> "renewalQuote")
{
 sb1=sbappend(sb1,"1~currency_t~", _system_current_document_currency_pref, "|");
}
//Precision stores how many digits are allowed after decimal point on the basis of the quote currency
res = bmql("SELECT Precision from Func_Curr_Prec_Map WHERE Functional_Currency=$_system_current_document_currency_pref");

for line in res
{
 precision=atoi(get(line,"Precision"));
}

exch=string(currencyExchange_t);
//Jira# 5502 : Restrict address selection to the same OU in quote header
operatingUnit = "";
//this query fetched the OU as per the Ship to Country in order to compare in case OU was changed after customer selection.
res = bmql("SELECT OU_Name FROM OU_ShiptTo_Mapping WHERE ShipToCountry = $shipToCountry_menu_t AND Group = $dealType_t");
for value in res
 {
 operatingUnit = get(value,"OU_Name");
 }
//end of code for Jira# 5502
//Checking null value of cutomer Id and also id part number not equals to cust then only creating Json Object
if(_transaction_customer_id<>"")
{
 EndCustomerId=_transaction_customer_id;
}
//JIRA VIPER-513; This auto sets Symorder flag to Y if Core classification is Commercial
if(core_t=="Commercial")
{
 eDIsymorder="Yes";
 
}
//JIRA VIPER-328; This is an extra line loop in order to fetch Bill To and End Customer Details in the runtime before the header level fields are set
for line in transactionLine{
 
 // SYMINT-2514 Calculating the Number of Line Items present in the quote
 if((line._model_name <> "Customer Search" and line._part_number =="") OR (line._part_number <> "Cust" and line._model_name == "")){
  // Calculating the Number of Line items while looping
  numberOfLineItems = numberOfLineItems + 1;
 }
 // End of SYMINT-2514
 
  
// Start of VIPER-780--Validation for Renewal Products
   //This is for Quick key lines
  if(line._parent_doc_number=="")
  {
  if(line.transactionTypeM_l == "Renew" AND line.licenseType_l  == "Subscription" AND line.dropProduct_l == false )
  {
    partno=line._part_number;
     if(partno<> "" AND not isnull(partno))
     {
     resultset=bmql("select Renewal_Allowed from BRCM_Part_Master where MPN=$partno");
      for rec in resultset 
      {
    renewal = get(rec,"Renewal_Allowed");
     if(renewal=="N")
     {
      line_no=line._sequence_number;
      validLine = string(line_no) + " , ";
      if(find(errorLinesrenewalprod,validLine)<0)
      {
       errorstringbuilder=stringbuilder(errorLinesrenewalprod,string(line_no)," , ");
       errorLinesrenewalprod = sbtostring(errorstringbuilder);
             
      }
     }
    }
     }
  
   }
   
   if(line.transactionTypeM_l == "Renew" AND (line.licenseType_l  == "Perpetual" OR  line.licenseType_l  == "UMF" ) AND line.dropProduct_l == false)
   {
    covredprod=line.coveredProduct_l;
    if(covredprod<> "" AND not isnull(covredprod))
     {
     resultset=bmql("select Renewal_Allowed from BRCM_Part_Master where MPN=$covredprod");
     
       for rec in resultset 
       {
     renewal = get(rec,"Renewal_Allowed");
     if(renewal=="N")
      {
       line_no=line._sequence_number;
       validLine = string(line_no) + " , ";
       if(find(errorLinesrenewalprod,validLine)<0)
       {
        errorstringbuilder=stringbuilder(errorLinesrenewalprod,string(line_no)," , ");
        errorLinesrenewalprod = sbtostring(errorstringbuilder);
       }

       }
     }
    }
   }
  }
  else
  {
      //As errorlines are not getting updated on first save after configuring products conisdering parentchild string
      //Here we are considering Partnumber always as Covered Product will also come as Part number here irresptive of License type and Transaction type
   if(line._line_item_comment<>"" AND line._part_number<>"Cust" AND line.dropProduct_l == false)
    {
  parentchildstring=line._line_item_comment;
  obj=json(parentchildstring);
  child=jsonget(obj,"child");
  childObj=json(child);
  PartNumber=jsonget(obj,"PartNumber");
  licensetype=jsonget(childObj,"selectLicenseType");
  transactionTypeM=jsonget(childObj,"transactionType");
  if(transactionTypeM == "Renew" AND licensetype<> "")
  {
   if(PartNumber<> "" AND not isnull(PartNumber))
   {
   resultset=bmql("select Renewal_Allowed from BRCM_Part_Master where MPN=$PartNumber");
   for rec in resultset 
    {
    renewal = get(rec,"Renewal_Allowed");
    if(renewal=="N")
    {
     line_no=line._sequence_number;
     validLine = string(line_no) + " , ";
     if(find(errorLinesrenewalprod,validLine)<0)
     {
      errorstringbuilder=stringbuilder(errorLinesrenewalprod,string(line_no)," , ");
      errorLinesrenewalprod = sbtostring(errorstringbuilder);
     }
    }
    }
   }
  }
       
 }
  }
//END of 780-Validation for Renewal Products


// Start of VIPER-958--Validation for New and capacity Products lines
  //This is for Quick key lines
  if(line._parent_doc_number=="")
  {
  if(line.transactionTypeM_l == "New" AND line.dropProduct_l == false)
  {
    partno=line._part_number;
     if(partno<> "" AND not isnull(partno))
     {
     resultset=bmql("select New_Sales_Allowed from BRCM_Part_Master where MPN=$partno");
      for rec in resultset 
      {
    renewal = get(rec,"New_Sales_Allowed");
     if(renewal=="N")
     {
      line_no=line._sequence_number;
      validLine = string(line_no) + " , ";
      if(find(errorLinesnewprod,validLine)<0)
      {
       errorstringbuilder=stringbuilder(errorLinesnewprod,string(line_no)," , ");
       errorLinesnewprod = sbtostring(errorstringbuilder);
             
      }
     }
    }
     }
  
   }
   
   
  }
  else
  {
      //As errorlines are not getting updated on first save after configuring products conisdering parentchild string
      //Here we are considering Partnumber always as Covered Product will also come as Part number here irresptive of License type and Transaction type
   if(line._line_item_comment<>"" AND line._part_number<>"Cust" AND line.dropProduct_l == false)
    {
  parentchildstring=line._line_item_comment;
  obj=json(parentchildstring);
  child=jsonget(obj,"child");
  childObj=json(child);
  PartNumber=jsonget(obj,"PartNumber");
  licensetype=jsonget(childObj,"selectLicenseType");
  transactionTypeM=jsonget(childObj,"transactionType");
  if(transactionTypeM == "New" AND licensetype<> "" )
  {
   if(PartNumber<> "" AND not isnull(PartNumber))
   {
   resultset=bmql("select New_Sales_Allowed from BRCM_Part_Master where MPN=$PartNumber");
   for rec in resultset 
    {
    renewal = get(rec,"New_Sales_Allowed");
    if(renewal=="N")
    {
     line_no=line._sequence_number;
     validLine = string(line_no) + " , ";
     if(find(errorLinesnewprod,validLine)<0)
     {
      errorstringbuilder=stringbuilder(errorLinesnewprod,string(line_no)," , ");
      errorLinesnewprod = sbtostring(errorstringbuilder);
     }
    }
    }
   }
  }
       
 }
  }
  
  
  //This is for Capacity lines
  
  
  //This is for Quick key lines
  if(line._parent_doc_number=="")
  {
  if(line.transactionTypeM_l == "Capacity" AND line.dropProduct_l == false)
  {
    partno=line._part_number;
     if(partno<> "" AND not isnull(partno))
     {
     resultset=bmql("select Capacity_Allowed from BRCM_Part_Master where MPN=$partno");
      for rec in resultset 
      {
    capac = get(rec,"Capacity_Allowed");
     if(capac =="N")
     {
      line_no=line._sequence_number;
      validLine = string(line_no) + " , ";
      if(find(errorLinescapacityprod,validLine)<0)
      {
       errorstringbuilder=stringbuilder(errorLinescapacityprod,string(line_no)," , ");
       errorLinescapacityprod = sbtostring(errorstringbuilder);
             
      }
     }
    }
     }
  
   }
  }
  else
  {
      //As errorlines are not getting updated on first save after configuring products conisdering parentchild string
      //Here we are considering Partnumber always as Covered Product will also come as Part number here irresptive of License type and Transaction type
   if(line._line_item_comment<>"" AND line._part_number<>"Cust" AND line.dropProduct_l == false)
    {
  parentchildstring=line._line_item_comment;
  obj=json(parentchildstring);
  child=jsonget(obj,"child");
  childObj=json(child);
  PartNumber=jsonget(obj,"PartNumber");
  licensetype=jsonget(childObj,"selectLicenseType");
  transactionTypeM=jsonget(childObj,"transactionType");
  if(transactionTypeM == "Capacity" AND licensetype<> "" )
  {
   if(PartNumber<> "" AND not isnull(PartNumber))
   {
   resultset=bmql("select Capacity_Allowed from BRCM_Part_Master where MPN=$PartNumber");
   for rec in resultset 
    {
    capac = get(rec,"Capacity_Allowed");
    if(capac=="N")
    {
     line_no=line._sequence_number;
     validLine = string(line_no) + " , ";
     if(find(errorLinescapacityprod,validLine)<0)
     {
      errorstringbuilder=stringbuilder(errorLinescapacityprod,string(line_no)," , ");
      errorLinescapacityprod = sbtostring(errorstringbuilder);
     }
    }
    }
   }
  }
       
 }
  }
  
  
  
  
  
  
//END of 958-Validation for New and Capacity Products lines



//SYMINT-7850 - Begin -  06/05/2020 - created json to hold renew/capacity contract end dates,serial no, contract, contract line number
 if(line.transactionTypeM_l == "Renew" or line.transactionTypeM_l == "Capacity"){

  priorContract = line.priorContract;
  priorContractLineItem_l = line.priorContractLineItem_l;
  serialNo = line.serial_l;
  valueComp = line.contractEndDate_l + "#" + line._document_number;
//VIPER-919 - Begin - Co-term based on prior contract and prior contract line # and removing serial # from the key.
//  keyComp = line.transactionTypeM_l + "#" + priorContract + "#" + priorContractLineItem_l + "#" + serialNo + "#";
if(line.priorContract <> "" and line.priorContractLineItem_l <> ""){
  keyComp = line.transactionTypeM_l + "#" + priorContract + "#" + priorContractLineItem_l + "#";
//VIPER-919 - End    
   jsonput(rnwCptKeyJson,keyComp,valueComp);
  }
  //VIPER-917 - Begin - Add serial no keyComp for Upgrade transactions.
  if(serialNo <> ""){
   keyComp = line.transactionTypeM_l + "#" + serialNo + "#";
   jsonput(rnwCptKeyJson,keyComp,valueComp);
  }
  //VIPER-917 - End
  //VIPER-1035: Kacharya@deloitte.com; Changes to check Renew lines if they contain valid prior contract number and prior contract line number.
  if(line.transactionTypeM_l == "Renew" AND line.dropProduct_l==false){
  statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
  for each in statusRes {
  status = get(each,"CONTRACT_STATUS");
             
  }
  if(line.priorContract <> "" and line.priorContractLineItem_l <> ""){          
  if(status=="" or isnull(status)){
  line_no=line._sequence_number;
  errLine = string(line_no) + " , ";
  //VIPER-907 - Begin - Setting bogus contract flag to true based on contract status in data table.
  noPriorContractDataFlag = true;
  //VIPER-907 - END
  if(find(errorLinesContractBogus,errLine)<0){
  errorbuilder=stringbuilder(errorLinesContractBogus,string(line_no)," , ");
  errorLinesContractBogus = sbtostring(errorbuilder);
  }
  } 
  }
  }
 }
//SYMINT-7850 - END
 if(quoteType_t<>"contractQuote")
 {
 
 append(mpn_array1,line._part_number); //getting all the part numbers and storing in an array for promotion multi check
 }
//restricting customer search parts that get added after customer search and also restricting model lines in case of configured parts
 
 if(line._part_number=="Cust" or line._model_name<>"Customer Search")
 { 
  obj=json();
  //If line item coment not equal to null fetching value of BillTo, End To using jsonget function  
  if(line._line_item_comment<>"") 
  {
   teststring=line._line_item_comment;
   
   obj=json(teststring);  
   billToCust=jsonget(obj,"BILL_TO");
   endTo=jsonget(obj,"END_TO");
   // This function is called only fo non-contract quote so adding the condtion 
   //Jira# 5502 operating unit check is to make sure address parsing is done only when OU was not changed after customer selection
   if(quoteType_t<>"contractQuote" AND operatingUnit_t==operatingUnit){
   //Checking if there is value in Bill to then fetching all the values from ship to like name,email id,etc using jsonget

   if(isnull(billToCust)<>true)
   {
    BillToCustomerId=jsonget(json(billToCust),"Customer Id");
    BillParentId=jsonget(json(billToCust), "Customer Parent");
    BillGrandParentId=jsonget(json(billToCust), "Customer Grandparent");
   }
   }
   //Checking if there is value in End to then fetching all the values from end to using jsonget
   
   if(isnull(endTo)<>true)
   {
    EndCustomerId= jsonget(json(EndTo),"Customer Id");
    EndParentId = jsonget(json(EndTo),"Customer Parent");
    EndGrandParentId = jsonget(json(EndTo),"Customer Grandparent");
   }

  }

 }

}
//start of promotion multi check
if(quoteType_t<>"contractQuote")
{
 results2 = bmql("select Start_Date,End_Date,MPN from BRCM_Promotion_Tb where Promotion_Type=$Promotion_var");
 for res2 in results2 
  {
        if(strtojavadate(get(res2,"Start_Date"),"dd/MM/yyyy") <= Curr_date AND strtojavadate(get(res2,"End_Date"),"dd/MM/yyyy") >= Curr_date )
   {
   counter1=counter1+1;
   if(findinarray(mpn_array1,get(res2,"MPN"))<>-1){
   append(promo_array,get(res2,"MPN"));
   counter2=counter2+1;
   }
   }
     }

if(counter1==counter2)
 {
 mpn_arraymulti= promo_array;
 }
}

//end of promotion multicheck code



//Renewal Quote Logic
if(quoteType_t=="renewalQuote")
{
 //SYMINT-1657 added logic to blank out customer details values if operating unit is changed
 if(operatingUnit_t<>"" and NOT isnull(operatingUnit_t)){
 if(operatingUnit_t<>operatingUnit){
 sb2=stringbuilder(sb2,"1",dlim,"licenseeName_t",dlim,"",dend,"1",dlim,"licenseeERPAccount_t",dlim,"",dend,"1" , dlim , "endCustomerParentId_avg" , dlim , "" , dend, "1" , dlim , "endCustomerGrandParentId_avg" , dlim , "" , dend, "1" , dlim , "endCustomerGlobalParentName_t" , dlim , "" , dend, "1" , dlim , "_transaction_customer_t_company_name" , dlim , "", dend, "1" , dlim , "_transaction_customer_id" , dlim , "" , dend,"1" , dlim , "customerERPId_t" , dlim ,  ""  , dend, "1" , dlim , "core_t" , dlim , "" , dend, "1" , dlim ,"restrictedCustomerFlag_t" , dlim , "" , dend, "1" , dlim , "partnerPartyNumber_t" , dlim , "" , dend, "1" , dlim , "paymentTerms_t" , dlim , "" , dend, "1" , dlim , "endCustomerSiteNumber_t" , dlim , "" , dend, "1" , dlim , "_transaction_customer_t_address_2" , dlim , "", dend, "1" , dlim , "_transaction_customer_t_address" , dlim , "" , dend, "1" , dlim , "_transaction_customer_t_city" , dlim , "", dend, "1" , dlim , "endCustomerState_t" , dlim , "" , dend, "1" , dlim , "endCustomerCountry_t" , dlim ,  ""  , dend,"1" , dlim , "_transaction_customer_t_zip" , dlim , "" , dend, "1" , dlim , "billToContactEmail_t" , dlim , "", dend, "1" , dlim , "billToContactWorkPhone_t" , dlim , "" , dend, "1" , dlim , "billToContactName_t" , dlim , "" , dend, "1" , dlim , "billToContactMobilePhone_t" , dlim , "" , dend, "1" , dlim , "shipToPartyID_t" , dlim , "" , dend, "1" , dlim , "soldToContactName_t" , dlim , "" , dend, "1" , dlim , "soldToContactEmail_t" , dlim , "" , dend, "1" , dlim , "soldToContactWorkPhone_t" , dlim , "" , dend, "1" , dlim , "soldToContactMobilePhone_t" , dlim , "" , dend, "1" , dlim , "soldToCustomerAccountID_t" , dlim , "" , dend, "1" , dlim , "shipToContactName_t" , dlim , "" , dend, "1" , dlim , "shipToContactEmail_t" , dlim , "" , dend, "1" , dlim , "shipToContactMobilePhone_t" , dlim , "" , dend, "1" , dlim , "shipToContactWorkPhone_t" , dlim , "" , dend, "1" , dlim , "_shipTo_t_city" , dlim , "" , dend, "1" , dlim , "_shipTo_t_state" , dlim , "" , dend, "1" , dlim , "_shipTo_t_country" , dlim , "" , dend, "1" , dlim , "_shipTo_t_address" , dlim , "" , dend, "1" , dlim , "_shipTo_t_zip" , dlim , "" , dend, "1" , dlim , "billToCity_t" , dlim , "" , dend, "1" , dlim , "billToState_t" , dlim , "" , dend, "1" , dlim , "billToCountry_t" , dlim , "" , dend, "1" , dlim , "billToAddress_t" , dlim , "" , dend, "1" , dlim , "billToZip_t" , dlim , "" , dend, "1" , dlim , "_shipTo_t_address_2" , dlim , "" , dend, "1" , dlim , "billToCustomer_t" , dlim , "" , dend, "1" , dlim , "billToCustomerId_t" , dlim , "" , dend, "1" , dlim , "eRPAccountNumberPurchaseCustomer_t" , dlim , "" , dend, "1" , dlim , "shipToCustomerSite_t" , dlim , "" , dend, "1" , dlim , "eRPAccountNumberShipTo_t" , dlim , "" , dend, "1" , dlim , "soldToCustomer_t" , dlim , "" , dend, "1" , dlim , "billToSiteNumber_t" , dlim , "" , dend, "1" , dlim , "sellToSiteNumber_t" , dlim , "" , dend, "1" , dlim , "shipToSiteNumber_t" , dlim , "" , dend, "1" , dlim , "billToParentId_avg" , dlim , "" , dend, "1" , dlim , "billToGrandParentId_avg" , dlim , "" , dend, "1" , dlim , "shipToCountry_t" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_city" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_address" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_state" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_zip" , dlim , "" , dend, "1" , dlim , "_transaction_soldTo_t_country" , dlim , "" , dend);
 }
 }
 for line in transactionLine

 {   
  licensetype=line.licenseType_l;
  //BROCAD-5278
  //BROCAD2-3504-BEGIN
/*  if(startswith(upper(line.transactionTypeM_l),"RENEW"))
  {
   renewalFlag = true;
  }*/
  //BROCAD2-3504-END
  
   
  
  Contract_no=line.contractNumber_l;
  //validation rule: Validate Support Types on Line Items; adithya
  if(line._part_number <> "" and line.supportType_l <> "")
  {
   if(containsKey(premierSupportCodesDictionary,line.supportType_l))
   {
    isPresentInPremierCodes = true;
   }
   elif(containsKey(EssentialSupportCodesDictionary,line.supportType_l))
   {
    isPresentInEssentialCodes = true;
   }

   if(isPresentInEssentialCodes and isPresentInPremierCodes)
   {
    validateSupportTypesOnLineItemsFlag = true;
   }
  }

  //validation rule : Validate Covered Products On Lines; adithya
  if(line.coveredProduct_l <> "" and line._part_number <> "")
  {
   put(coveredProductDictionary, line.coveredProduct_l , line.coveredProduct_l);
  }

  //constraint rule :Constrain Education Line Items; kacharya
  if(find(QuoteDealType, searchString) >= 0)
  {
   if(line._part_number <> "")
   {
    if(not containsKey(parentPartDictionary,line._part_number))
    {
     put(parentPartDictionary, line._part_number, line._price_quantity);
    }
   }
  }

  transactionTypeM=line.transactionTypeM_l;
  lineold=getoldvalue("_line_item_comment",atoi(line._document_number));
  contractenddateold=getoldvalue("contractEndDate_l",atoi(line._document_number));
  contractstartdateold=getoldvalue("contractStartDate_l",atoi(line._document_number));
  coveredold=getoldvalue("coveredProduct_l",atoi(line._document_number));
  licenseold=getoldvalue("licenseType_l",atoi(line._document_number));
  if(line.contractStartDate_l<>"" )
  {
   StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
  }
  if(line.contractEndDate_l<>"" )
  {
   EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
  }
  
  
  //SYMINT-7850 -  06/05/2020 - Populating contract end dates of the capacity lines based on Renew lines with same serial no, prior contract number and prior contract line number.
  part_mpn = line._part_number;
  business_div = "";
  //VIPER-938 - Begin - Retrieving the Product line from the part master.
  if(line.coveredProduct_l<>"" AND not isnull(line.coveredProduct_l))
  {
   part_mpn=line.coveredProduct_l;
  }
  part_res = bmql("select Business_Div,PRODUCT_LINE,PRODUCT_GROUP,KEY_GEN_TYPE from BRCM_Part_Master where MPN = $part_mpn");
  for each in part_res
  {
   business_div = get(each,"Business_Div");
   productLine = get(each,"PRODUCT_LINE");
   productGroup=get(each,"PRODUCT_GROUP");
   keyGen=get(each,"KEY_GEN_TYPE");
  }
  //Ading another condition to bypass SK products from the coterm and validation logic.
  //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
  if(/*business_div == "SED" ANDproductLine<>"SK" AND*/  line.dropProduct_l == false){
  //VIPER-938 - END
        serialNo="";
        if(line.priorContract <> "" and line.priorContractLineItem_l <> ""){
        if(line.transactionTypeM_l == "Capacity") {
         serialDiv = "SYM";
         priorContract = line.priorContract;
         priorContractLineItem_l = line.priorContractLineItem_l;
         serialNo = line.serial_l;
         status = "";
         contEndDate = "";
         statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
         for each in statusRes {
          status = get(each,"CONTRACT_STATUS");
          contEndDate = get(each,"CONTRACT_END_DATE");
          serialDiv = get(each,"DIV");
          }
         
         if(status<>"" AND NOT isnull(status))
         {
          // take the contract end date of the renew line with same serial no, prior contract number and prior contract line number from the json
          //VIPER-919 - Begin - Serial no removed from co-terming logic.
          //keyComp = "Renew" + "#" + priorContract + "#" + priorContractLineItem_l + "#" + serialNo + "#";
          //VIPER-917 - Begin - different keyComp for Capacity and upgrade lines.
          keyComp="";
          if(line.transactionTypeM_l == "Capacity") {
           keyComp = "Renew" + "#" + priorContract + "#" + priorContractLineItem_l + "#";
          }
          else
          {
           if(transactionTypeM == "Upgrade") {
            keyComp = "Renew" + "#" + serialNo + "#";
           }
          }
          //VIPER-917 - End
          //VIPER-919 - End
          valuesFromJson = jsonget(rnwCptKeyJson,keyComp);
          if(valuesFromJson <> "" AND NOT isnull(valuesFromJson))
          {
           contEndDate=valuesFromJson;
           if(contEndDate <> ""){
             EndDate=strtojavadate(contEndDate, "yyyy-MM-dd");
             sb4=stringbuilder(sb4,line._document_number,"~contractEndDate_l~",datetostr(EndDate),"|");
            }
          }
          //if no renew line with same serial no, prior contract number and prior contract line number, fetch date from data table.
          else
          {
           
           if(status == "Active") {
            if(contEndDate <> ""){
             EndDate=strtojavadate(contEndDate, "yyyy-MM-dd");
             sb4=stringbuilder(sb4,line._document_number,"~contractEndDate_l~",datetostr(EndDate),"|");
            }
           }
           else
           {
           //if status is not active or no record found, throw validation error.
           //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
            //if(serialDiv == "SYM"){
             line_no=line._sequence_number;
             errLine = string(line_no) + " , ";
             //VIPER-907 - Begin - Setting expired contract flag to true based on contract status in data table.
             priorContractExpiredFlag = true;
             //VIPER-907 - END
             if(find(errorLinesContractStatus,errLine)<0){
              errorbuilder=stringbuilder(errorLinesContractStatus,string(line_no)," , ");
              errorLinesContractStatus = sbtostring(errorbuilder);
             }
             //}
           }
          }
         }
         else{
         //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
         //if(serialDiv == "SYM"){
             statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
             for each in statusRes {
              status = get(each,"CONTRACT_STATUS");
              
              }
            
             if(status=="" or isnull(status)){
             line_no=line._sequence_number;
             errLine = string(line_no) + " , ";
             //VIPER-907 - Begin - Setting bogus contract flag to true based on contract status in data table.
             noPriorContractDataFlag = true;
             //VIPER-907 - END
             if(find(errorLinesContractBogus,errLine)<0){
              errorbuilder=stringbuilder(errorLinesContractBogus,string(line_no)," , ");
              errorLinesContractBogus = sbtostring(errorbuilder);
             }
             } 
           //} 
          }
        }
        }
       }
  //SYMINT-7850-END
  
  supp_rate1 = 0.0;
  unitMSRP = 0.0;

  //if(line.lineItemComment_avg<>line._line_item_comment){
   if(line._line_item_comment<>"" and line._part_number<>"Cust")
   {
    sb1=stringbuilder(sb1,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchConfigAttributesFromCommerce_brcm(line._document_number, line._part_number, line._line_item_comment, line.effectiveStartDate_l, line.lineExpirationDate_l, line._model_name));
    //output1=sbtostring(sb1);
   }
  //}
  if(billToCustomerId_t=="" or soldToCustomerAccountID_t=="" or shipToPartyID_t=="" or _transaction_customer_id=="" or line.lineItemComment_avg<>line._line_item_comment or operatingUnit<>operatingUnit_t){
   if(line.lineItemComment_avg<>line._line_item_comment or operatingUnit<>operatingUnit_t)
   {
   if(line._part_number=="Cust" AND line._model_name=="")
   {
    sb2=stringbuilder(sb2,line._document_number,"~lineItemComment_avg~",line._line_item_comment,"|",commerce.fetchCustomerSearchDetails_brcm(line._model_name, line._part_number, line._line_item_comment));
    //output2=sbtostring(sb2);
   }
   }
  }
  //Condition for Defer Pricing Logic (Currently not in use)
  if(avoidPricingCalculations_t == false){
  //final_price="0";
  final_price=string(line.perUnitPerListPrice_l);
  if(line._part_number<>"Cust" AND line._model_name=="")
  {
  accountbuilder=stringbuilder(EndCustomerId,"~",BillToCustomerId,"~",EndCustomerId, "~" , EndParentId , "~" , EndGrandParentId , "~" , line.cPN_l , "~" ,line.effectiveStartDate_l , "~" , line.effectiveStartDate_l , "~" , routeToMarket_t , "~" , BillParentId ,"~" , BillGrandParentId , "~" , quoteType_t);
  //accountbuilder=stringbuilder(_transaction_customer_id,"~",billToCustomerId_t,"~",_transaction_customer_id , "~" , endCustomerParentId_avg , "~" , endCustomerGrandParentId_avg , "~" , line.cPN_l , "~" ,line.effectiveStartDate_l , "~" , line.effectiveStartDate_l , "~" , routeToMarket_t , "~" , billToParentId_avg ,"~" , billToGrandParentId_avg , "~" , quoteType_t);
  AccountNums=sbtostring(accountbuilder);

  coveredProduct=line.coveredProduct_l;
  coveredpdt=line.coveredProduct_l;
  supportType_l=line.supportType_l;
  upliftfactor=0.0;
  env_selected=line.enterEnvironment_l;

  coveredProduct_l=line.coveredProduct_l;
  //loop makes sure pricing logic goes into correct logic when auto generated quotes are created. Also in case of merge/split quote scenarios
  //Changes made as part of VIPER - 264 - adding a condition to allow configured products pricing after merging the renewal quotes - added condition - if renewalsImportPricing was "yes" or parent_doc_number is not blank
  //if(len(Trim(mergedQuotes))< 1 OR line.createdBy_l<>"Integration User" OR line.renewalsImportPricing == "no" or line.renewalsImportPricing == "yes" OR line._parent_doc_number <> "")
  //{//Renewal Quote Pricing Logic to update Contract/List Unit Price
  //Changes made as part of VIPER - 264 - adding a condition to allow configured products pricing after merging the renewal quotes - added condition - parent_doc_number is not blank
  //Changes made as part of VIPER-278 - Added Condition to check renewalCreatedBy is not Integration User to avoid below Global Pricing calculations when EAR is zero and incase of Cloned Quote 'CreatedBy' is updated to Actual User instead of Integration 
  //Changes made as part of VIPER-412 - Regression Issue: When we Split Zero price products in renewal quote Standard Global Pricing is getting applied for that line item Removed or (len(Trim(splitQuoteInfo_t))> 0) from below validation
   if(line.hiddenPrice_l==0.0 and ((line.createdBy_l<>"Integration User" and line.renewalCreatedBy_l <> "Integration User") or line.renewalsImportPricing == "yes" OR line._parent_doc_number <> ""))
   { 
    if(line._price_list_price_each==0.0)
    {  if(getoldvalue(routeToMarket_t)<>routeToMarket_t or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.00") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0") OR (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="0.0000") or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))=="") or (contractenddateold)<>line.contractEndDate_l OR (contractstartdateold)<>line.contractStartDate_l OR (coveredold)<>line.coveredProduct_l OR (licenseold)<>line.licenseType_l){
     upliftfactor=0.0;
     if(line.coveredProduct_l=="")
     {
      Days=getdiffindays(StartDate,EndDate)+1;
      partnumber=line._part_number;
      //VIPER-941 : Change in UNIT MSRP Calculation
      subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type,Unit_MSRP from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for subres in subset1{
       base_price1 =get(subres,"Base_Price");
       sub_type =get(subres,"Subscription_Type");
       mSRP=get(subres,"Unit_MSRP");
       }
       subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
       for subsfactresult in subs_factor_result{
       sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
       }
      put(partNoDict,"Item1",partnumber);
      Contract_no="NA";
      contractdetials=string[2];
      partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
      if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l=="")
      { 
       if(find(get(partPriceDict,"Item1"),"~")<>-1)
       {
        contractdetials= split(get(partPriceDict,"Item1"), "~");
        Contract_no=contractdetials[1];
       }
       else
       {
        contractdetials[0]=get(partPriceDict,"Item1");
        Contract_no="NA";
       }

       partPrice=string(atof(contractdetials[0])*atof(exch));
          /*BROCAD2-4748*/
          //VIPER-941 : Change in UNIT MSRP Calculation
          unitMSRP = (atof(mSRP)*atof(exch));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
       final_price=String(round((atof(partPrice)+(atof(partPrice)*upliftfactor)),precision));

       sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
       //added new variable for Jira#1617
       listPrice = string(round(atof(final_price),precision));
       sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
       sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
       //output4=sbtostring(sb4);
      }
      if(line.licenseType_l=="Subscription")
      {
       partNo=get(partNoDict, "Item1");
       if(find(get(partPriceDict,"Item1"),"~")<>-1)
       {
        contractdetials= split(get(partPriceDict,"Item1"), "~");
        Contract_no=contractdetials[1];
       }
       else
       {
        contractdetials[0]=get(partPriceDict,"Item1");
        Contract_no="NA";
       }

       calcPrice=string(atof(contractdetials[0])*atof(exch));
       //subscription_price = String(atof(calcPrice)*atof(exch));
       //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",subscription_price,"|");
       if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) )
       {
        partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
        
        //partPrice1=round(atof(partPrice)*(365.0/days),precision);
        //partPrice=string(partPrice1*(days/365.0));
        
        final_price=String((atof(partPrice)+(atof(partPrice)*upliftfactor)));
          /*BROCAD2-4748*/
          //VIPER-941 : Change in UNIT MSRP Calculation
          unitMSRP=(round(atof(mSRP)*sub_factor*atof(exch),precision))*(days/365.0);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round((atof(partPrice)+(atof(partPrice)*upliftfactor))*365/days,precision)),"|");
        
        //added new variable for Jira#1617
        listPrice = String(round((atof(partPrice)+(atof(partPrice)*upliftfactor))*365/days,precision));
        sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
        sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
        //output4=sbtostring(sb4);
       }
      }
     }
     /*******************************************************************************
      * Calculation of Contract/List Unit Price for Standalone Support/Maintenance
      * SKUs
      ******************************************************************************/
     else
     {

      Days=getdiffindays(StartDate,EndDate)+1;
      coveredpdt=line.coveredProduct_l;
      basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredProduct_l");
      supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType_l");
      //VIPER-941 : Change in UNIT MSRP Calculation
      subset=bmql("SELECT MPN,Base_Price,Base_Support_Value,Start_Date,End_Date,Unit_MSRP from BRCM_Part_Master_Prc WHERE MPN=$coveredProduct_l ORDER BY Start_Date ASC");
      for res2 in basepriceset{
       Division=get(res2,"Business_Div");
      }
      for res1 in subset{
       if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
       {   
        basePrice=get(res1,"Base_Price");
        NDP=atof(get(res1,"Base_Support_Value"));
        //VIPER-941 : Change in UNIT MSRP Calculation
        mSRP=get(res1,"Unit_MSRP");
       }
      }
      if(Division=="CAD" or Division=="SED")
      {
       put(partNoDict,"Item1",coveredProduct_l);
       
       //fetching the base price based on Hardware and software upgrade for SYMINT-4174 by Arjun
        
          if(transactionTypeM=="Upgrade" and productCode=="Hardware")
           {
           
            put(partNoDict,"Item1",upgradeSKU);
           }
       
       partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
       Contract_no="NA";
       contractdetials=string[2];
       if(line.licenseType_l=="Perpetual" or line.licenseType_l=="UMF" or line.licenseType_l==""){

        if(find(get(partPriceDict,"Item1"),"~")<>-1)
        {
         contractdetials= split(get(partPriceDict,"Item1"), "~");
         Contract_no=contractdetials[1];
        }
        else
        {
         contractdetials[0]=get(partPriceDict,"Item1");
         Contract_no="NA";
        }

        partPrice=string(atof(contractdetials[0])*atof(exch));
        //changes added as part of BROCAD2 - 1617
        salesminprice=partPrice;
          /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

       }
       if(line.licenseType_l=="Subscription"){

        partNo=get(partNoDict, "Item1");

        if(find(get(partPriceDict,"Item1"),"~")<>-1)
        {
         contractdetials= split(get(partPriceDict,"Item1"), "~");
         Contract_no=contractdetials[1];
        }
        else
        {
         contractdetials[0]=get(partPriceDict,"Item1");
         Contract_no="NA";
        }

        calcPrice=string(atof(contractdetials[0])*atof(exch));
        //changes added as part of BROCAD2 - 1617
        salesminprice=calcPrice;


        if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
         partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
         
         //partPrice1=round(atof(partPrice)*(365.0/days),precision);
         //partPrice=string(partPrice1*(days/365.0));
         
        }
          /*BROCAD2-4748*/
          unitMSRP = round(atof(partPrice)*days,precision);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
       }


       For results in supportset{

        supp_rate=atof(get(results,"Support_Rate"));
        if(basePrice<>""){

         supp_rate1=((round(atof(basePrice)*supp_rate,precision))*NDP*Days/365);

         unitMSRP=((atof(basePrice)*supp_rate)*atof(exch));}

        if(partPrice<>""){

         supp_price=String((round(atof(salesminprice)*supp_rate,precision))*NDP*Days/365);
         

        }
        /*BROCAD2-4748*/
        //VIPER-941 : Change in UNIT MSRP Calculation
          unitMSRP = ((atof(mSRP)*supp_rate)*NDP*Days/365)*atof(exch);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

        final_price=String((atof(supp_price)+(atof(supp_price)*upliftfactor)));

        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round((atof(supp_price)+(atof(supp_price)*upliftfactor))*365/Days,precision)),"|");
        //added new variable for Jira#1617
        listPrice = String(round((atof(supp_price)+(atof(supp_price)*upliftfactor))*365/Days,precision));
        sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
        sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
        //output4=sbtostring(sb4);
        //result= result + line._document_number + dlim + "unitMSRP_l" + dlim + string(unitMSRP) + dend;
       }
      }
      elif(Division=="BSN")
      {
       For results in supportset{
        supp_rate=atof(get(results,"Support_Rate"));
        supp_price=String((atof(basePrice)*supp_rate)*NDP);
        
        if(basePrice<>""){
        //changes added as part of BROCAD2 - 1617
        salesminprice=basePrice;
         supp_rate1=((atof(basePrice)*supp_rate)*NDP*Days/365);

         unitMSRP=((atof(mSRP)*supp_rate)*atof(exch));}

        final_price=String((atof(supp_price)+(atof(supp_price)*upliftfactor))*atof(exch));

        sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round((atof(supp_price)+(atof(supp_price)*upliftfactor))*atof(exch)*365/Days,precision)),"|");
        //added new variable for Jira#1617
        listPrice = String(round((atof(supp_price)+(atof(supp_price)*upliftfactor))*atof(exch)*365/Days,precision));
        //output4=sbtostring(sb4);
        //result= result + line._document_number + dlim + "unitMSRP_l" + dlim + string(unitMSRP) + dend;
       }
      }
     }
    }
    }
    /** ************************************************************************************ */
    else
    { 
     upliftfactor=0.0;
     if(line._model_name=="" AND line._parent_doc_number<>"")
     {

      final_price=String((line._price_list_price_each+(line._price_list_price_each*upliftfactor)));

      sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
      //added new variable for Jira#1617
      listPrice = string(round(atof(final_price),precision));
      //output4=sbtostring(sb4);
      coveredpdt=line.coveredProduct_l;
      licensetype=line.licenseType_l;
      supportType=line.supportType_l;
      obj=json();
      if(line._line_item_comment<>"")
      {
       teststring=line._line_item_comment;
       obj=json(teststring);
       child=jsonget(obj,"child");
       childObj=json(child);
       PartNumber=jsonget(obj,"PartNumber");
       licensetype=jsonget(childObj,"selectLicenseType");
       supportType=jsonget(childObj,"supportType");
       supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
       
       //fetching the data from config for hardware and software pricing for SYMINT-4174 by Arjun
       if(transactionTypeM=="Upgrade")
       { 
        upgradeSKU=jsonget(obj,"PartNumber");
        resultset3=bmql("select PRODUCT_GROUP from BRCM_Part_Master where MPN=$PartNumber");
        for each in resultset3
        {
         productCode=get(each,"PRODUCT_GROUP");
        }
        
        
       }
       
       if (line._part_number == supportPartsPicklist)
       {
        coveredpdt=PartNumber;
       }

       if(jsonget(childObj,"startDate")<>"" ){
        StartDate=strtojavadate(jsonget(childObj,"startDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }

       if(jsonget(childObj,"endDate")<>"" ){
        EndDate=strtojavadate(jsonget(childObj,"endDate"), "MM/dd/yyyy HH:mm:ss", "America/Chicago");
       }
       
       
     //SYMINT-7850 -  06/05/2020 - Populating contract end dates of the capacity lines based on Renew lines with same serial no, prior contract number and prior contract line number.
     //VIPER-938 - Begin - Adding another condition to bypass SK products from the coterm and validation logic.
        //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
        if(/*business_div == "SED" AND productLine<>"SK" AND*/  line.dropProduct_l == false){
      //VIPER-938 - End
        //VIPER-917 - BEGIN - Co-terming logic applies to Upgrade also 
        transactionTypeFromConfig="";
        serialNo="";
        if(line._line_item_comment <> ""){
         obj=json(line._line_item_comment);
                           PartNumber=jsonget(obj,"PartNumber");
                           serialDiv = "SYM";
                           srNo = jsonget(obj,"Sr_No");
                           child=jsonget(obj,"child");
                           childObj=json(child);
                           transactionTypeFromConfig = jsonget(childObj,"transactionType");
        }
        if(line.transactionTypeM_l == "Capacity" or transactionTypeFromConfig == "Upgrade"){
        status = "";
        contEndDate = "";
        serialDiv="SYM";
        priorContract="";
        priorContractLineItem_l="";
        //For capacity lines, prior contract and prior contract line to be considered to fetch data table record.
        //VIPER-960-Begin- prior contract and prior contract line to be considered to fetch data table record for SW upgrade.
        if(line.transactionTypeM_l == "Capacity" or (line.transactionTypeM_l=="Upgrade" AND (productGroup<>"Hardware" AND keyGen<>"NP-VA")) ) {
         priorContract = line.priorContract;
         priorContractLineItem_l = line.priorContractLineItem_l;
         serialNo = line.serial_l;
         if(line.priorContract <> "" and line.priorContractLineItem_l <> ""){
         statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
         for each in statusRes {
          status = get(each,"CONTRACT_STATUS");
          contEndDate = get(each,"CONTRACT_END_DATE");
          serialDiv = get(each,"DIV");
          }
         }
       
        }
        else{
        if(transactionTypeFromConfig == "Upgrade") {
         obj=json(line._line_item_comment);
                                   PartNumber=jsonget(obj,"PartNumber");
                                   srNo = jsonget(obj,"Sr_No");
                                   child=jsonget(obj,"child");
                                   childObj=json(child);
                                   //VIPER-960 - Begin - Take serial no, prior contract and prior contract line number from quote.
                                   serialNo = line.serial_l;
                                   priorContract = line.priorContract;
                                   priorContractLineItem_l = line.priorContractLineItem_l;
                                   //VIPER-960 - Begin - Take serial no, prior contract and prior contract line number from quote.
                                   if(serialNo == "" OR isnull(serialNo))
                                   {
                                    serialNo = jsonget(childObj,"SerialNumber");
                                   }
                                   if(priorContract == "" OR isnull(priorContract))
                                   {
                                    priorContract = jsonget(childObj,"PriorContractNumber");
                                   }
                                   if(priorContractLineItem_l == "" OR isnull(priorContractLineItem_l))
                                   {
                                    priorContractLineItem_l = jsonget(childObj,"PriorContractLineNumber");
                                   }
                                   //VIPER-960 - End
         //for upgrade, serial no, prior contract and prior contract line number gives the relevant record.
         if(serialNo <> "" and not isnull(serialNo) and priorContract <> "" and not isnull(priorContract) and priorContractLineItem_l <> "" and not isnull(priorContractLineItem_l))
         {
         contractresult = bmql("select CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where SERIAL_NO_HW_UPG.SERIAL_NUMBER = $serialNo and SERIAL_NO_HW_UPG.Contract_Number = $priorContract and SERIAL_NO_HW_UPG.Contract_Line_Number = $priorContractLineItem_l");
         for record in contractresult 
         {
          serialDiv = get(record,"DIV");
          status = get(record,"CONTRACT_STATUS");
          contEndDate = get(record,"CONTRACT_END_DATE");
         }
         }
        }
        }
       //VIPER-917 - END
         if(status<>"" AND NOT isnull(status))
         {
          // take the contract end date of the renew line with same serial no, prior contract number and prior contract line number from the json
          //VIPER-919 - Begin - Serial no removed from co-terming logic.
          //keyComp = "Renew" + "#" + priorContract + "#" + priorContractLineItem_l + "#" + serialNo + "#";
          //VIPER-917 - Begin - different keyComp for Capacity and upgrade lines.
          keyComp="";
          //VIPER-960-Begin- prior contract and prior contract line to be considered to fetch data table record for SW upgrade.
          if(line.transactionTypeM_l == "Capacity"  or (line.transactionTypeM_l=="Upgrade" AND (productGroup<>"Hardware" AND keyGen<>"NP-VA"))) {
           keyComp = "Renew" + "#" + priorContract + "#" + priorContractLineItem_l + "#";
          }
          else
          {
           if(transactionTypeM == "Upgrade") {
            keyComp = "Renew" + "#" + serialNo + "#";
           }
          }
          //VIPER-917 - End
          //VIPER-919 - End
          valuesFromJson = jsonget(rnwCptKeyJson,keyComp);
          if(valuesFromJson <> "" AND NOT isnull(valuesFromJson))
          {
           contEndDate=valuesFromJson;
           if(contEndDate <> ""){
             EndDate=strtojavadate(contEndDate, "yyyy-MM-dd");
             sb4=stringbuilder(sb4,line._document_number,"~contractEndDate_l~",datetostr(EndDate),"|");
            }
          }
          //if no renew line with same serial no, prior contract number and prior contract line number, fetch date from data table.
          else
          {
           
           if(status == "Active") {
            if(contEndDate <> ""){
             EndDate=strtojavadate(contEndDate, "yyyy-MM-dd");
             sb4=stringbuilder(sb4,line._document_number,"~contractEndDate_l~",datetostr(EndDate),"|");
            }
           }
           else
           {
           //if status is not active or no record found, throw validation error.
            //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
            //if(serialDiv == "SYM"){
             line_no=line._sequence_number;
             errLine = string(line_no) + " , ";
             //VIPER-907 - Begin - Setting expired contract flag to true based on contract status in data table.
             priorContractExpiredFlag = true;
             //VIPER-907 - END
             if(find(errorLinesContractStatus,errLine)<0){
              errorbuilder=stringbuilder(errorLinesContractStatus,string(line_no)," , ");
              errorLinesContractStatus = sbtostring(errorbuilder);
             }
             //}
           }
          }
         }
         else{
         //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
         //if(serialDiv == "SYM"){
             statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
             for each in statusRes {
              status = get(each,"CONTRACT_STATUS");
              
              }
            
             if(status=="" or isnull(status)){
             line_no=line._sequence_number;
             errLine = string(line_no) + " , ";
             //VIPER-907 - Begin - Setting bogus contract flag to true based on contract status in data table.
             noPriorContractDataFlag = true;
             //VIPER-907 - END
             if(find(errorLinesContractBogus,errLine)<0){
              errorbuilder=stringbuilder(errorLinesContractBogus,string(line_no)," , ");
              errorLinesContractBogus = sbtostring(errorbuilder);
             }
             } 
            //}
          } 
        }
        }
       //SYMINT-7850-END
     
       
       
      }

      //For running the pricing logic for items added using configurator
      if(coveredpdt=="")
      {

       Days=getdiffindays(StartDate,EndDate)+1;
       partnumber=line._part_number;
       //VIPER-941 : Change in UNIT MSRP Calculation
       subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type,Unit_MSRP from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
       for res2 in subset1
       {
        base_price1 =get(res2,"Base_Price");
        sub_type =get(res2,"Subscription_Type");
        mSRP=get(res2,"Unit_MSRP");
        subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
        for subsfactresult in subs_factor_result{
        sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
        }
        if(get(res2 ,"Start_Date")<>"" and get(res2 ,"End_Date")<>"")
        {
         if(strtojavadate(get(res2 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res2 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
         {

          Contract_no="NA";
          contractdetials=string[2];
          put(partNoDict,"Item1",partnumber);
          
          
          
          
           partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
          
          
          if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

           if(find(get(partPriceDict,"Item1"),"~")<>-1)
           {
            contractdetials= split(get(partPriceDict,"Item1"), "~");
            Contract_no=contractdetials[1];
           }
           else
           {
            contractdetials[0]=get(partPriceDict,"Item1");
            Contract_no="NA";
           }
           partPrice=string(atof(contractdetials[0])*atof(exch));

           /*BROCAD2-4748*/
           //VIPER-941 : Change in UNIT MSRP Calculation
           unitMSRP = (atof(mSRP)*atof(exch));
           extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
           /*BROCAD2-4748*/
           final_price=String(round(atof(partPrice),precision));
           sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
           //added new variable for Jira#1617
           listPrice = string(round(atof(final_price),precision));
           sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
           sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
           //output4=sbtostring(sb4);

          }
          if(licensetype=="Subscription")
          {
           partNo=get(partNoDict, "Item1");
           if(find(get(partPriceDict,"Item1"),"~")<>-1)
           {
            contractdetials= split(get(partPriceDict,"Item1"), "~");
            Contract_no=contractdetials[1];
           }
           else
           {
            contractdetials[0]=get(partPriceDict,"Item1");
            Contract_no="NA";
           }

           calcPrice=string(atof(contractdetials[0])*atof(exch));
           //subscription_price = String(atof(calcPrice)*atof(exch));
           //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",subscription_price,"|");
           if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
            partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
            
            //partPrice1=round(atof(partPrice)*(365.0/days),precision);
            //partPrice=string(partPrice1*(days/365.0));
            
            final_price=String(atof(partPrice));
            /*BROCAD2-4748*/
            //VIPER-941 : Change in UNIT MSRP Calculation
            unitMSRP=(round(atof(mSRP)*sub_factor*atof(exch),precision))*(days/365.0);
            extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
            /*BROCAD2-4748*/
            sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
            sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(partPrice)*365/days,precision)),"|");
            //added new variable for Jira#1617
            listPrice = String(round(atof(partPrice)*365/days,precision));
            sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
            //output4=sbtostring(sb4);

           }
          }
         }
        }
       }
      }
      /*******************************************************************************
       * Calculation of Contract/List Unit Price for Support/Maintenance
       * SKUs
       ******************************************************************************/
      else
      {
       Days=getdiffindays(StartDate,EndDate)+1;
       basepriceset=bmql("SELECT Business_Div from BRCM_Part_Master WHERE MPN=$coveredpdt");
       supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType");
       subset=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Unit_MSRP from BRCM_Part_Master_Prc WHERE MPN=$coveredpdt ORDER BY Start_Date ASC");
       for res2 in basepriceset{
        Division=get(res2,"Business_Div");
       }
       for res1 in subset{
        if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
        {              basePrice=get(res1,"Base_Price");
        NDP=atof(get(res1,"Base_Support_Value"));
        mSRP=get(res1,"Unit_MSRP");


        }
       }
       if(Division=="CAD" or Division=="SED")
       {
        Contract_no="NA";
        contractdetials=string[2];
        put(partNoDict,"Item1",coveredpdt);
        
        //fetching the base price based on Hardware and software upgrade for SYMINT-4174 by Arjun
        
          if(transactionTypeM=="Upgrade" and productCode=="Hardware")
           {
           
            put(partNoDict,"Item1",upgradeSKU);
           }
        
           partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
          
          
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         partPrice=string(atof(contractdetials[0])*atof(exch));
         //changes added as part of BROCAD2 - 1617
         salesminprice=partPrice;
         /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

        }
        if(licensetype=="Subscription"){

         partNo=get(partNoDict, "Item1");


         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         calcPrice=string(atof(contractdetials[0])*atof(exch));
         //changes added as part of BROCAD2 - 1617
         salesminprice=calcPrice;
         if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
          partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
         
          //partPrice1=round(atof(partPrice)*(365.0/days),precision);
          //partPrice=string(partPrice1*(days/365.0));
         }
         
         /*BROCAD2-4748*/
          unitMSRP = round(atof(partPrice)*days,precision);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         
        }
        For results in supportset{

         supp_rate=atof(get(results,"Support_Rate"));
         if(partPrice<>""){
          supp_price=String((round(atof(salesminprice)*supp_rate,precision))*NDP*Days/365);
          

         }
          /*BROCAD2-4748*/
          //VIPER-941 : Change in UNIT MSRP Calculation
          unitMSRP = ((atof(mSRP)*supp_rate)*NDP*Days/365)*atof(exch);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         final_price=String(atof(supp_price));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(supp_price)*365/Days,precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(supp_price)*365/Days,precision));
         sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
         sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
         //output4=sbtostring(sb4);
        }
       }
       elif(Division=="BSN"){
        For results in supportset{
         supp_rate=atof(get(results,"Support_Rate"));
         supp_price=String((atof(basePrice)*supp_rate)*NDP);
         //changes added as part of BROCAD2 - 1617
        salesminprice=basePrice;

         final_price=String(atof(supp_price)*atof(exch));
         sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",String(round(atof(basePrice)*atof(exch),precision)),"|");
         //added new variable for Jira#1617
         listPrice = String(round(atof(basePrice)*atof(exch),precision));
         //output4=sbtostring(sb4);
        }
       }

      }
      //End of code

      param_per_unit_per_list_price = (line._price_list_price_each+(line._price_list_price_each*upliftfactor));

     }
    }
   }
   else
   {  // if(getoldvalue("hiddenPrice_l",atoi(line._document_number))<>string(line.hiddenPrice_l)){
    upliftfactor=3.0/100;//update the value as percentage value on 03/11
    upliftset=bmql("SELECT Uplift_Factor FROM BRCM_Part_Master_Prc WHERE MPN=$coveredProduct ORDER BY Start_Date ASC");
    for up in upliftset
    {
     upliftfactor=getfloat(up,"Uplift_Factor")/100;
    }
    if(line.renewalsImportPricing <> "no")
    {
     upliftfactor = upliftfactor;
    }
    //removing business division as part of VIPER-973
    if((core_t=="Commercial" OR core_t =="ZCA_NON_CORE") /*AND businessDivision_t=="Symantec"*/)
    {
    upliftfactor = 10.0/100;
    }
    //removing business division as part of VIPER-973
    if((core_t=="ZCA_CORE") /*AND businessDivision_t=="Symantec"*/)
    {
    upliftfactor = 0.0;
    }
    if(line.renewalsImportPricing == "no" or line.renewalsImportPricing == "yes")
    {
     upliftfactor = 0.0;
    }
    

    final_price=String(line.hiddenPrice_l+line.hiddenPrice_l*upliftfactor);


    if(line.coveredProduct_l<>"")
    {
     Days=getdiffindays(StartDate,EndDate)+1;
     supportset=bmql("SELECT Support_Level, Support_Rate from BRCM_Support_Rate WHERE Support_Type_Code=$supportType_l");
     subset=bmql("SELECT MPN,Base_Price, Base_Support_Value,Start_Date,End_Date, Unit_MSRP from BRCM_Part_Master_Prc WHERE MPN=$coveredpdt ORDER BY Start_Date ASC");
     for res1 in subset{
      if(strtojavadate(get(res1 ,"Start_Date"),"yyyy-MM-dd HH:mm:ss") <= currdate AND strtojavadate(get(res1 ,"End_Date"),"yyyy-MM-dd HH:mm:ss") >= currdate)
      {              basePrice=get(res1,"Base_Price");
      //changes added as part of BROCAD2 - 1617
         salesminprice=basePrice;
      NDP=atof(get(res1,"Base_Support_Value"));
      mSRP=get(res1,"Unit_MSRP");

      }
     }
     //Modified by Ravi on July 02 2019 as part of BROCAD2-4748 Enhancement
     licensetype=line.licenseType_l;
     Contract_no=line.contractNumber_l;
        contractdetials=string[2];
        put(partNoDict,"Item1",coveredpdt);
        //fetching the base price based on Hardware and software upgrade for SYMINT-4174 by Arjun
        
          if(transactionTypeM=="Upgrade" and productCode=="Hardware")
           {
           
            put(partNoDict,"Item1",upgradeSKU);
           }
          
           partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
          
          
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          //Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         partPrice=contractdetials[0];
         //changes added as part of BROCAD2 - 1617
         salesminprice=partPrice;
         /*BROCAD2-4748*/
          unitMSRP = (atof(partPrice)*atof(exch));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/

        }
        if(licensetype=="Subscription"){

         partNo=get(partNoDict, "Item1");


         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }

         calcPrice=contractdetials[0];
         //changes added as part of BROCAD2 - 1617
         salesminprice=calcPrice;
         if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
          partPrice=util.subscriptionPriceCalculation_brcm(partNo,calcPrice,StartDate,EndDate,_system_current_document_currency_pref);
         
          //partPrice1=round(atof(partPrice)*(365.0/days),precision);
          //partPrice=string(partPrice1*(days/365.0));
         }
         
          /*BROCAD2-4748*/
          unitMSRP = round(atof(partPrice)*days,precision);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         
        }
     
     
     for results in supportset{
      supp_rate=atof(get(results,"Support_Rate"));
      if(String(line.hiddenPrice_l)<>""){
       supp_price=String((round(line.hiddenPrice_l*supp_rate,precision))*NDP*Days/365);
        if(basePrice<>""){
       supp_rate1=((atof(basePrice)*supp_rate)*NDP*Days/365);
       
       }
     
       
     }
     //VIPER-941 : Change in UNIT MSRP Calculation
     mSRP1=((atof(mSRP)*supp_rate)*NDP*Days/365);
     unitMSRP=((mSRP1)*atof(exch));
       extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
     //if(basePrice<>""){
     //unitMSRP=((atof(basePrice)*supp_rate)*atof(exch));}
     /*final_price=String((atof(supp_price)+(atof(supp_price)*upliftfactor)));
     sb4=stringbuilder(output4,line._document_number,"~perUnitPerListPrice_l~",final_price,"|");
     sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
     sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
     output4=sbtostring(sb4);*/
     }
     
     
     
     
     /*
     
     if(line.licenseType_l=="Subscription"){
      unitMSRP =(((atof(basePrice)/365)*)*atof(exch)*Days);
     }
     if(licensetype=="Perpetual" or licensetype=="UMF"){
      unitMSRP =(atof(basePrice)*atof(exch));
     }
     else
     {
      }*/
     sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
     if(line.renewalsImportPricing <> "no" and line.renewalsImportPricing <> "yes")
     { //coveredpdt="";
      env_selected = "";
      final_price=String((round((line.hiddenPrice_l+(line.hiddenPrice_l*upliftfactor)),precision)*(Days/365.0)));
      //final_price=String((line.hiddenPrice_l)+((line.hiddenPrice_l)*upliftfactor));
      sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(((line.hiddenPrice_l))+((line.hiddenPrice_l)*upliftfactor),precision)),"|");
      //added new variable for Jira#1617
      listPrice = string(round(((line.hiddenPrice_l))+((line.hiddenPrice_l)*upliftfactor),precision));
     }
     if(line.renewalsImportPricing == "no" or line.renewalsImportPricing == "yes")
     {
      final_price=String(line.hiddenPrice_l*Days/365);
       sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(line.hiddenPrice_l,precision)),"|");
       //added new variable for Jira#1617
       listPrice = string(round(line.hiddenPrice_l,precision));
     }

     //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
     sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
     sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
     //output4=sbtostring(sb4);
    }
    else
    {
     /*Start: Pricing Changes done by Ravi May-10-2019 BROCAD2-3103*/
     upliftfactor=3.0/100;//update the value as percentage value on 03/11
     partnumber=line._part_number;
     //VIPER-941 : Change in UNIT MSRP Calculation
     subset1=bmql("SELECT MPN, Base_Support_Value,Base_Price,Start_Date,End_Date,Subscription_Type,Unit_MSRP from BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
     for subres in subset1{
     base_price1 =get(subres,"Base_Price");
     sub_type =get(subres,"Subscription_Type");
     //VIPER-941 : Change in UNIT MSRP Calculation
     mSRP=get(subres,"Unit_MSRP");
     }
     subs_factor_result =bmql("SELECT Subscription_Factor from BRCM_Subs_Factor WHERE Subscription_Type=$sub_type");
     for subsfactresult in subs_factor_result{
     sub_factor =atof(get(subsfactresult,"Subscription_Factor"));
     }
     upliftset=bmql("SELECT Uplift_Factor, Base_Price FROM BRCM_Part_Master_Prc WHERE MPN=$partnumber ORDER BY Start_Date ASC");
     for up in upliftset
     {
      basePrice=get(up,"Base_Price");
      upliftfactor=getfloat(up,"Uplift_Factor")/100;
     }
     if(line.renewalsImportPricing <> "no")
     {
      upliftfactor = upliftfactor;
     }
     if((core_t=="Commercial" OR core_t=="ZCA_NON_CORE") /*AND businessDivision_t=="Symantec"*/)
     {
     upliftfactor = 10.0/100;
     }
     if((core_t=="ZCA_CORE") /*AND businessDivision_t=="Symantec"*/)
     {
     upliftfactor = 0.0;
     }
     if(line.renewalsImportPricing == "no" or line.renewalsImportPricing == "yes")
     {
      upliftfactor = 0.0;
     }
     /*End: Pricing Changes done by Ravi May-10-2019 BROCAD2-3103*/
     if(line.contractStartDate_l<>"" ){
      StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
     }
     if(line.contractEndDate_l<>"" ){
      EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
     }
     
     
       //SYMINT-7850 -  06/05/2020 - Autopopulating the contract end date from the SN table
    //SYMINT-7850 -  06/05/2020 - Populating contract end dates of the capacity lines based on Renew lines with same serial no, prior contract number and prior contract line number.
    //VIPER-938 - Begin - Adding another condition to bypass SK products from the coterm and validation logic.
    
         //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
        if(/*business_div == "SED" AND productLine<>"SK" AND */ line.dropProduct_l == false){
      //VIPER-938 - End
        //VIPER-917 - BEGIN - Co-terming logic applies to Upgrade also 
        transactionTypeFromConfig="";
        serialNo="";
        if(line._line_item_comment <> ""){
         obj=json(line._line_item_comment);
                           PartNumber=jsonget(obj,"PartNumber");
                           serialDiv = "SYM";
                           srNo = jsonget(obj,"Sr_No");
                           child=jsonget(obj,"child");
                           childObj=json(child);
                           transactionTypeFromConfig = jsonget(childObj,"transactionType");
        }
        if(line.transactionTypeM_l == "Capacity" or transactionTypeFromConfig == "Upgrade"){
        status = "";
        contEndDate = "";
        serialDiv="SYM";
        priorContract="";
        priorContractLineItem_l="";
        //For capacity lines, prior contract and prior contract line to be considered to fetch data table record.
        //VIPER-960-Begin- prior contract and prior contract line to be considered to fetch data table record for SW upgrade.
        if(line.transactionTypeM_l == "Capacity"  or (line.transactionTypeM_l=="Upgrade" AND (productGroup<>"Hardware" AND keyGen<>"NP-VA"))) {
         priorContract = line.priorContract;
         priorContractLineItem_l = line.priorContractLineItem_l;
         serialNo = line.serial_l;
         if(line.priorContract <> "" and line.priorContractLineItem_l <> ""){
         statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
         for each in statusRes {
          status = get(each,"CONTRACT_STATUS");
          contEndDate = get(each,"CONTRACT_END_DATE");
          serialDiv = get(each,"DIV");
          }
         }
       
        }
        else
        {
        if(transactionTypeFromConfig == "Upgrade") {
         obj=json(line._line_item_comment);
                                   PartNumber=jsonget(obj,"PartNumber");
                                   srNo = jsonget(obj,"Sr_No");
                                   child=jsonget(obj,"child");
                                   childObj=json(child);
                                   /*serialNo = jsonget(childObj,"SerialNumber");
         priorContract = jsonget(childObj,"PriorContractNumber");
         priorContractLineItem_l = jsonget(childObj,"PriorContractLineNumber");*/
         //VIPER-960 - Begin - Take serial no, prior contract and prior contract line number from quote.
                                   serialNo = line.serial_l;
                                   priorContract = line.priorContract;
                                   priorContractLineItem_l = line.priorContractLineItem_l;
                                   //VIPER-960 - Begin - Take serial no, prior contract and prior contract line number from quote.
                                   if(serialNo == "" OR isnull(serialNo))
                                   {
                                    serialNo = jsonget(childObj,"SerialNumber");
                                   }
                                   if(priorContract == "" OR isnull(priorContract))
                                   {
                                    priorContract = jsonget(childObj,"PriorContractNumber");
                                   }
                                   if(priorContractLineItem_l == "" OR isnull(priorContractLineItem_l))
                                   {
                                    priorContractLineItem_l = jsonget(childObj,"PriorContractLineNumber");
                                   }
                                   //VIPER-960 - End
         //for upgrade, serial no, prior contract and prior contract line number gives the relevant record.
         if(serialNo <> "" and not isnull(serialNo) and priorContract <> "" and not isnull(priorContract) and priorContractLineItem_l <> "" and not isnull(priorContractLineItem_l))
         {
         contractresult = bmql("select CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where SERIAL_NO_HW_UPG.SERIAL_NUMBER = $serialNo and SERIAL_NO_HW_UPG.Contract_Number = $priorContract and SERIAL_NO_HW_UPG.Contract_Line_Number = $priorContractLineItem_l");
         for record in contractresult 
         {
          serialDiv = get(record,"DIV");
          status = get(record,"CONTRACT_STATUS");
          contEndDate = get(record,"CONTRACT_END_DATE");
         }
         }
        }
        }
       //VIPER-917 - END
         if(status<>"" AND NOT isnull(status))
         {
          // take the contract end date of the renew line with same serial no, prior contract number and prior contract line number from the json
          //VIPER-919 - Begin - Serial no removed from co-terming logic.
          //keyComp = "Renew" + "#" + priorContract + "#" + priorContractLineItem_l + "#" + serialNo + "#";
          //VIPER-917 - Begin - different keyComp for Capacity and upgrade lines.
          keyComp="";
          //VIPER-960-Begin- prior contract and prior contract line to be considered to fetch data table record for SW upgrade.
          if(line.transactionTypeM_l == "Capacity"  or (line.transactionTypeM_l=="Upgrade" AND (productGroup<>"Hardware" AND keyGen<>"NP-VA"))) {
           keyComp = "Renew" + "#" + priorContract + "#" + priorContractLineItem_l + "#";
          }
          else
          {
           if(transactionTypeM == "Upgrade") {
            keyComp = "Renew" + "#" + serialNo + "#";
           }
          }
          //VIPER-917 - End
          //VIPER-919 - End
          valuesFromJson = jsonget(rnwCptKeyJson,keyComp);
          if(valuesFromJson <> "" AND NOT isnull(valuesFromJson))
          {
           contEndDate=valuesFromJson;
           if(contEndDate <> ""){
             EndDate=strtojavadate(contEndDate, "yyyy-MM-dd");
             sb4=stringbuilder(sb4,line._document_number,"~contractEndDate_l~",datetostr(EndDate),"|");
            }
          }
          //if no renew line with same serial no, prior contract number and prior contract line number, fetch date from data table.
          else
          {
           
           if(status == "Active") {
            if(contEndDate <> ""){
             EndDate=strtojavadate(contEndDate, "yyyy-MM-dd");
             sb4=stringbuilder(sb4,line._document_number,"~contractEndDate_l~",datetostr(EndDate),"|");
            }
           }
           else
           {
           //if status is not active or no record found, throw validation error.
           
         //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
            //if(serialDiv == "SYM"){
             line_no=line._sequence_number;
             errLine = string(line_no) + " , ";
             //VIPER-907 - Begin - Setting expired contract flag to true based on contract status in data table.
             priorContractExpiredFlag = true;
             //VIPER-907 - END
             if(find(errorLinesContractStatus,errLine)<0){
              errorbuilder=stringbuilder(errorLinesContractStatus,string(line_no)," , ");
              errorLinesContractStatus = sbtostring(errorbuilder);
             }
             
         //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
             //}
           }
          }
         }
         else{
         //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
         //if(serialDiv == "SYM"){
             statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
             for each in statusRes {
              status = get(each,"CONTRACT_STATUS");
              
              }
            
             if(status=="" or isnull(status)){
             line_no=line._sequence_number;
             errLine = string(line_no) + " , ";
             //VIPER-907 - Begin - Setting bogus contract flag to true based on contract status in data table.
             noPriorContractDataFlag = true;
             //VIPER-907 - END
             if(find(errorLinesContractBogus,errLine)<0){
              errorbuilder=stringbuilder(errorLinesContractBogus,string(line_no)," , ");
              errorLinesContractBogus = sbtostring(errorbuilder);
             }
             }
             
         //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
            //} 
          } 
        }
        }
       //SYMINT-7850-END
      
     
     
     Days=getdiffindays(StartDate,EndDate)+1;

     final_price=String((line.hiddenPrice_l+line.hiddenPrice_l*upliftfactor));
     sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
     //added new variable for Jira#1617
     listPrice = string(round(atof(final_price),precision));
     //Begin: Added Unit MSRP Calculations for Perpetual and UMF Lines for Import/Export on 07-25-2019 - BROCAD2-5532
     licensetype=line.licenseType_l;
     Contract_no=line.contractNumber_l;
        contractdetials=string[2];
        put(partNoDict,"Item1",partnumber);
        
        
           partPriceDict=util.configpricing_brcm("",AccountNums,partNoDict);
          
          
        if(licensetype=="Perpetual" or licensetype=="UMF" or licensetype==""){

         if(find(get(partPriceDict,"Item1"),"~")<>-1)
         {
          contractdetials= split(get(partPriceDict,"Item1"), "~");
          //Contract_no=contractdetials[1];
         }
         else
         {
          contractdetials[0]=get(partPriceDict,"Item1");
          Contract_no="NA";
         }
         //print line._document_number + " : " + Contract_no;
         partPrice=contractdetials[0];
         //changes added as part of BROCAD2 - 1617
         salesminprice=partPrice;
         /*BROCAD2-4748*/
          unitMSRP = (atof(mSRP)*atof(exch));
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
          sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
          sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");

        }
     ////End: Added Unit MSRP Calculations for Perpetual and UMF Lines for Import/Export on 07-25-2019 - BROCAD2-5532
     if(line.licenseType_l=="Subscription"){
      if(line.renewalsImportPricing <> "no" and line.renewalsImportPricing <> "yes")
      {
       env_selected = "";
       final_price=String((round((line.hiddenPrice_l+(line.hiddenPrice_l*upliftfactor)),precision)*(Days/365.0)));
       //final_price = final_price;
       sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(((line.hiddenPrice_l))+((line.hiddenPrice_l)*upliftfactor),precision)),"|");
       //added new variable for Jira#1617
       listPrice = string(round(((line.hiddenPrice_l))+((line.hiddenPrice_l)*upliftfactor),precision));
      }
      if(line.renewalsImportPricing  == "no" or line.renewalsImportPricing == "yes")
      {
       final_price=String(line.hiddenPrice_l*Days/365);
       sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(line.hiddenPrice_l,precision)),"|");
       //added new variable for Jira#1617
       listPrice = string(round(line.hiddenPrice_l,precision));
      }
      if((ISNULL(StartDate)==false) AND (ISNULL(EndDate)==false) ){
         if(basePrice == "" OR isnull(basePrice))
         {
          basePrice =string(0);
         }
         partPrice=util.subscriptionPriceCalculation_brcm(partnumber,basePrice,StartDate,EndDate,_system_current_document_currency_pref);
         
         //partPrice1=round(atof(partPrice)*(365.0/days),precision);
         //partPrice=string(partPrice1*(days/365.0));
         
         //final_price=String(atof(partPrice)*atof(exch));
          /*BROCAD2-4748*/
          unitMSRP=(round(atof(mSRP)*sub_factor*atof(exch),precision))*(days/365.0);
          extMSRP = string(round((unitMSRP),precision)*line._price_quantity);
          /*BROCAD2-4748*/
         //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",final_price,"|");
         sb31=stringbuilder(sb31,line._document_number,"~unitMSRP_l~",string(unitMSRP),"|");
         sb32=stringbuilder(sb32,line._document_number,"~extMSRP_l~",extMSRP,"|");
      }
     }

     param_per_unit_per_list_price = (line.hiddenPrice_l+line.hiddenPrice_l*upliftfactor)*atof(exch); 



     //final_price=String(line.hiddenPrice_l+line.hiddenPrice_l*upliftfactor*atof(exch));
     //sb4=stringbuilder(sb4,line._document_number,"~perUnitPerListPrice_l~",string(round(atof(final_price),precision)),"|");
     //output4=sbtostring(sb4);

    }
    //}
   }
  //}
  //salesmin and PromotionalSetup
  //changes added as part of BROCAD2 - 1617
  mpn_var=line._part_number;
  //final_price=string(round(atof(final_price),precision));
  final_price1 = final_price;
  
  if(trim(coveredpdt) <> "")
  {
   mpn_var = coveredpdt;
   
   if(trim(salesminprice) <> "")
    {
     final_price1=listPrice;
    }
  }
  salesMinl_var=0.0;
  salesMin2_var=0.0;
  salesMin3_var=0.0;
  promotion_type="Single";
  min_qty=line._price_quantity;
  promotion_req="N";
  
  //VIPER-823 - BEGIN - Salesmin not populating with proper values. Populating final_price1 with list price for correct Salesmin values computation.
   if(trim(listPrice) <> "")
    {
    final_price1=listPrice;
    }
    //VIPER-823-END
  
  res = bmql("select Sales_Min3,Sales_Min2,Sales_Min1,Start_Date,End_Date from BRCM_Part_Master_Prc where MPN = $mpn_var ORDER BY Start_Date ASC");
  for rec in res 
  {
   salesMinl_var = getfloat(rec,"Sales_Min1");
   salesMin2_var = getfloat(rec,"Sales_Min2");
   salesMin3_var = getfloat(rec,"Sales_Min3");

   if(get(rec,"Start_Date")<>"" AND get(rec,"End_Date")<>"")
   {
    salesMinl_var = (100-salesMinl_var)* atof(final_price1)/ 100;

    salesMin2_var = (100-salesMin2_var)* atof(final_price1) / 100;

    salesMin3_var = (100-salesMin3_var)* atof(final_price1) / 100;

   }
  }
  results4=bmql("select Promotion_Enabled from BRCM_Part_Master_Ext where MPN=$mpn_var");
  for res3 in results4
  {
   promotion_req=get(res3,"Promotion_Enabled");
  }

  if(promotion_req=="Y")
  {

   results2 = bmql("select Sales_Min1,Sales_Min2,Sales_Min3,Start_Date,End_Date,Promotion_Type,Minimum_Qty from BRCM_Promotion_Tb where MPN=$mpn_var");
   for result3 in results2 
   {
    if(strtojavadate(get(result3,"Start_Date"),"dd/MM/yyyy") <= Curr_date AND strtojavadate(get(result3,"End_Date"),"dd/MM/yyyy") >= Curr_date )
    {
     if(findinarray(mpn_arraymulti,mpn_var)<>-1 AND get(result3,"Promotion_Type")=="Multi")
     {

      if(atoi(get(result3,"Minimum_Qty")) > min_qty)
      {
       min_qty=atoi(get(result3,"Minimum_Qty"));
      }
      salesMinl_var=atof(get(result3,"Sales_Min1"));
      salesMinl_var= (100 - salesMinl_var) * atof(final_price1) / 100;
      salesMin2_var=atof(get(result3,"Sales_Min2"));
      salesMin2_var= (100 - salesMin2_var) * atof(final_price1)/ 100;
      salesMin3_var=atof(get(result3,"Sales_Min3"));
      salesMin3_var= (100 - SalesMin3_var) *atof(final_price1)/ 100;
     }
     else
     {

      if(get(result3,"Promotion_Type")=="Single" AND findinarray(mpn_arraymulti,mpn_var)==-1)
      {
       if(atoi(get(result3,"Minimum_Qty")) > min_qty)
       {
        min_qty=atoi(get(result3,"Minimum_Qty"));
       }
       salesMinl_var=atof(get(result3,"Sales_Min1"));
       salesMinl_var= (100 - salesMinl_var) * atof(final_price1)/ 100;
       salesMin2_var=atof(get(result3,"Sales_Min2"));
       salesMin2_var= (100 - salesMin2_var) * atof(final_price1)/ 100;
       salesMin3_var=atof(get(result3,"Sales_Min3"));
       salesMin3_var= (100 - SalesMin3_var) *atof(final_price1)/ 100;
      }
     }
    }

   }
  }
  //End of SalesMin and Setup
  //Calling Eligible Discounts Calculator
  documentnum=line._document_number;
  partNumber  = line._part_number;
  teststring=line._line_item_comment;
  //env_selected=line.enterEnvironment_l;
  quantity = min_qty;
  //Changes made as per VIPER - 304 - added condition to compare support term days attribute value with its previous value. 
  //Changes made as per VIPER - 304 - If there is any change in Term days value then this additional codition will allow control to go inside the condition and calculate Ext. Contract/List Price accordingly.
  
  if((getoldvalue("totalNewSupportTermDays_l",atoi(line._document_number))<>String(Days)) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(line._price_quantity)) OR (getoldvalue("enterEnvironment_l",atoi(line._document_number))<>line.enterEnvironment_l) OR (getoldvalue("_line_item_comment",atoi(line._document_number))<>line._line_item_comment) or (getoldvalue("perUnitPerListPrice_l",atoi(line._document_number))<>final_price) OR (line.requestedQuantity_l<>min_qty)  OR (getoldvalue("extContractListPrice_l",atoi(line._document_number))=="0"))
  {
   if(coveredpdt <> ""){
    partNumber = line.coveredProduct_l;
   }
   if(teststring<>"")
   {
    obj=json(teststring);
    child=jsonget(obj,"child");
    childObj=json(child);
    env_selected=jsonget(childObj,"enterEnvironment");
    PartNum=jsonget(obj,"PartNumber");
    supportPartsPicklist=jsonget(childObj,"supportPartsPicklist");
    if (line._part_number == supportPartsPicklist)
    {
     partNumber=PartNum;
    }
   }
   
   
   //To calculate Ext Contract/List Price
   ExtListPrice = commerce.eligibleDiscounts_brcm(final_price,partNumber,env_selected,quantity);
   
   
   
   if(line._part_number<>"")
   {
    sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
    sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");                                             
    //output5=sbtostring(sb5);
    
    //VIPER-748 : Added drop product logic for apply proposed price calculation fix
    if(line.dropProduct_l <> true)
    {
     totalExtPrice = totalExtPrice + ExtListPrice;
    }
    
   }
  }
  else
  {
   if(line._part_number<>"")
   { ExtListPrice = line.extContractListPrice_l;
   sb5=stringbuilder(sb5,line._document_number,"~extContractListPrice_l~",string(round(ExtListPrice,precision)),"|");
   sb5=stringbuilder(sb5,line._document_number,"~unroundedExtListPrice_l~",string(ExtListPrice),"|");                                            
   //output5=sbtostring(sb5);
   
   //VIPER-748 : Added drop product logic for apply proposed price calculation fix
   if(line.dropProduct_l <> true)
   {
     totalExtPrice = totalExtPrice + ExtListPrice;
   }
   
   }
  }
  //Calling Requested Discounts Calculator
  starttime=getcurrenttimeinmillis();
  requestedDiscount=line.requestedDiscount_l;
  //VIPER-933 - Beegin - Check if requested discount is > 100. If yes, add line numbers to variable.
   if(requestedDiscount > 100)
   {
    requestedDiscountError = requestedDiscountError + ", " + string(line._sequence_number);
   }
   //VIPER-933 - End
  //Added the code for SYMINT-3206 for having discount 100% for Symantec Trail POC Quote by Arjun on 19-Dec-2019
  //Modified the condition for Deal Type from ENT Standard to Trail/POC for SYMINT-3131
  if(symantecTrialPOC_t==true AND dealType_t=="trialPOC")
   {
    requestedDiscount=100.0;
   }
  //To Calculate Requested Discount and Ext Proposed Net Unit Price
  if(final_price<>"0.0" AND round(requestedDiscount,0)==round(line.customDiscountValue_l,0) AND line.proposedNetUnitPriceRequested_l<>0.0 AND round(line.proposedNetUnitPriceRequested_l,4)<>round(line.proposedNetPriceRequestedHidden_ct,4) /*AND (line.hiddenProposedPrice_l == -1)*/){
   if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
    requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l*(Days/365.0),precision))*100/(round(ExtListPrice/quantity,precision)); 
   }
   else{
    requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.proposedNetUnitPriceRequested_l,precision))*100/(round(ExtListPrice/quantity,precision));
   }
   //Added the code for SYMINT-3206 for having discount 100% for Symantec Trail POC Quote by Arjun on 19-Dec-2019
   //Modified the condition for Deal Type from ENT Standard to Trail/POC for SYMINT-3131
   if(symantecTrialPOC_t==true AND dealType_t=="trialPOC")
     {
     requestedDiscount=100.0;
     }
   proposedPrice = round(ExtListPrice - ((ExtListPrice * requestedDiscount)/100),precision);
  }
  //elif(final_price<>"0.0" AND ((getoldvalue("extContractListPrice_l",atoi(line._document_number))<>string(ExtListPrice)) OR (getoldvalue("requestedDiscount_l",atoi(line._document_number))<>string(requestedDiscount)) OR (getoldvalue("_price_quantity",atoi(line._document_number))<>string(quantity)))){
   //proposedPrice=round(commerce.calculateProposedPrice_brcm(ExtListPrice,quantity,requestedDiscount),precision);
  //}
  else{
   proposedPrice=round(commerce.calculateProposedPrice_brcm(ExtListPrice,quantity,requestedDiscount),precision);
  }
   //added the comparison of requested discount and custom discount so that import/export proposed price do not affect discounts 
   //and proposed price for EURO and other currencies that have "," instead of "."
  
   if(line.hiddenProposedPrice_l <> -1 AND round(requestedDiscount,0)<>round(line.customDiscountValue_l,0))
    { 
    if(line.contractStartDate_l <> "" )
       {
        StartDate=strtojavadate(line.contractStartDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       if(line.contractEndDate_l <> "" )
       {
        EndDate=strtojavadate(line.contractEndDate_l,"yyyy-MM-dd HH:mm:ss", "America/Chicago");
       }
       
       
      
    //SYMINT-7850 - 06/05/2020 - Populating contract end dates of the capacity lines based on Renew lines with same serial no, prior contract number and prior contract line number.
      //VIPER-938 - Begin - Adding another condition to bypass SK products from the coterm and validation logic.
        //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
        if(/*business_div == "SED" AND productLine<>"SK" AND*/  line.dropProduct_l == false){
      //VIPER-938 - End
        //VIPER-917 - BEGIN - Co-terming logic applies to Upgrade also 
        transactionTypeFromConfig="";
        serialNo="";
        if(line._line_item_comment <> ""){
         obj=json(line._line_item_comment);
                        PartNumber=jsonget(obj,"PartNumber");
                        serialDiv = "SYM";
                        srNo = jsonget(obj,"Sr_No");
                        child=jsonget(obj,"child");
                        childObj=json(child);
                        transactionTypeFromConfig = jsonget(childObj,"transactionType");
        }
        if(line.transactionTypeM_l == "Capacity" or transactionTypeFromConfig == "Upgrade"){
        status = "";
        contEndDate = "";
        serialDiv="SYM";
        priorContract="";
        priorContractLineItem_l="";
        //For capacity lines, prior contract and prior contract line to be considered to fetch data table record.
        //VIPER-960-Begin- prior contract and prior contract line to be considered to fetch data table record for SW upgrade.
        if(line.transactionTypeM_l == "Capacity"  or (line.transactionTypeM_l=="Upgrade" AND (productGroup<>"Hardware" AND keyGen<>"NP-VA"))) {
         priorContract = line.priorContract;
         priorContractLineItem_l = line.priorContractLineItem_l;
         serialNo = line.serial_l;
         if(line.priorContract <> "" and line.priorContractLineItem_l <> ""){
         statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
         for each in statusRes {
          status = get(each,"CONTRACT_STATUS");
          contEndDate = get(each,"CONTRACT_END_DATE");
          serialDiv = get(each,"DIV");
          }
         }
       
        }
        else{
        if(transactionTypeFromConfig == "Upgrade") {
         obj=json(line._line_item_comment);
                                   PartNumber=jsonget(obj,"PartNumber");
                                   srNo = jsonget(obj,"Sr_No");
                                   child=jsonget(obj,"child");
                                   childObj=json(child);
                                   /*serialNo = jsonget(childObj,"SerialNumber");
         priorContract = jsonget(childObj,"PriorContractNumber");
         priorContractLineItem_l = jsonget(childObj,"PriorContractLineNumber");*/
         //VIPER-960 - Begin - Take serial no, prior contract and prior contract line number from quote.
                                   serialNo = line.serial_l;
                                   priorContract = line.priorContract;
                                   priorContractLineItem_l = line.priorContractLineItem_l;
                                   //VIPER-960 - Begin - Take serial no, prior contract and prior contract line number from quote.
                                   if(serialNo == "" OR isnull(serialNo))
                                   {
                                    serialNo = jsonget(childObj,"SerialNumber");
                                   }
                                   if(priorContract == "" OR isnull(priorContract))
                                   {
                                    priorContract = jsonget(childObj,"PriorContractNumber");
                                   }
                                   if(priorContractLineItem_l == "" OR isnull(priorContractLineItem_l))
                                   {
                                    priorContractLineItem_l = jsonget(childObj,"PriorContractLineNumber");
                                   }
                                   //VIPER-960 - End
         //for upgrade, serial no, prior contract and prior contract line number gives the relevant record.
         if(serialNo <> "" and not isnull(serialNo) and priorContract <> "" and not isnull(priorContract) and priorContractLineItem_l <> "" and not isnull(priorContractLineItem_l))
         {
         contractresult = bmql("select CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where SERIAL_NO_HW_UPG.SERIAL_NUMBER = $serialNo and SERIAL_NO_HW_UPG.Contract_Number = $priorContract and SERIAL_NO_HW_UPG.Contract_Line_Number = $priorContractLineItem_l");
         for record in contractresult 
         {
          serialDiv = get(record,"DIV");
          status = get(record,"CONTRACT_STATUS");
          contEndDate = get(record,"CONTRACT_END_DATE");
         }
         }
        }
        }
       //VIPER-917 - END
         if(status<>"" AND NOT isnull(status))
         {
          // take the contract end date of the renew line with same serial no, prior contract number and prior contract line number from the json
          //VIPER-919 - Begin - Serial no removed from co-terming logic.
          //keyComp = "Renew" + "#" + priorContract + "#" + priorContractLineItem_l + "#" + serialNo + "#";
          //VIPER-917 - Begin - different keyComp for Capacity and upgrade lines.
          keyComp="";
          //VIPER-960-Begin- prior contract and prior contract line to be considered to fetch data table record for SW upgrade.
          if(line.transactionTypeM_l == "Capacity"  or (line.transactionTypeM_l=="Upgrade" AND (productGroup<>"Hardware" AND keyGen<>"NP-VA"))) {
           keyComp = "Renew" + "#" + priorContract + "#" + priorContractLineItem_l + "#";
          }
          else
          {
           if(transactionTypeM == "Upgrade") {
            keyComp = "Renew" + "#" + serialNo + "#";
           }
          }
          //VIPER-917 - End
          //VIPER-919 - End
          valuesFromJson = jsonget(rnwCptKeyJson,keyComp);
          if(valuesFromJson <> "" AND NOT isnull(valuesFromJson))
          {
           contEndDate=valuesFromJson;
           if(contEndDate <> ""){
             EndDate=strtojavadate(contEndDate, "yyyy-MM-dd");
             sb4=stringbuilder(sb4,line._document_number,"~contractEndDate_l~",datetostr(EndDate),"|");
            }
          }
          //if no renew line with same serial no, prior contract number and prior contract line number, fetch date from data table.
          else
          {
           
           if(status == "Active") {
            if(contEndDate <> ""){
             EndDate=strtojavadate(contEndDate, "yyyy-MM-dd");
             sb4=stringbuilder(sb4,line._document_number,"~contractEndDate_l~",datetostr(EndDate),"|");
            }
           }
           else
           {
           //if status is not active or no record found, throw validation error.
            //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
            //if(serialDiv == "SYM"){
             line_no=line._sequence_number;
             errLine = string(line_no) + " , ";
             //VIPER-907 - Begin - Setting expired contract flag to true based on contract status in data table.
             priorContractExpiredFlag = true;
             //VIPER-907 - END
             if(find(errorLinesContractStatus,errLine)<0){
              errorbuilder=stringbuilder(errorLinesContractStatus,string(line_no)," , ");
              errorLinesContractStatus = sbtostring(errorbuilder);
             }
             //}
           }
          }
         }
         else{
         //VIPER-968 ; 09/16/2020; kacharya@deloitte.com
         //if(serialDiv == "SYM"){
             statusRes = bmql("SELECT CONTRACT_STATUS, CONTRACT_END_DATE,DIV from SERIAL_NO_HW_UPG where Contract_Number = $priorContract and Contract_Line_Number = $priorContractLineItem_l");
             for each in statusRes {
              status = get(each,"CONTRACT_STATUS");
              
              }
            
             if(status=="" or isnull(status)){
             line_no=line._sequence_number;
             errLine = string(line_no) + " , ";
             //VIPER-907 - Begin - Setting bogus contract flag to true based on contract status in data table.
             noPriorContractDataFlag = true;
             //VIPER-907 - END
             if(find(errorLinesContractBogus,errLine)<0){
              errorbuilder=stringbuilder(errorLinesContractBogus,string(line_no)," , ");
              errorLinesContractBogus = sbtostring(errorbuilder);
             }
             } 
            //}
          } 
        }
        }
       //SYMINT-7850-END
       
       
       Days=getdiffindays(StartDate,EndDate)+1;
     
     //SYMINT-4432 Changed requestedDiscount to line.requestedDiscount_l
     if(quantity <> 0 and round(ExtListPrice,4) <> 0.0 AND round(line.requestedDiscount_l,0)==round(line.customDiscountValue_l,0)){
      if(quantity <> 0 and (line.licenseType_l=="Subscription" or coveredpdt<>"")){
      
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l*(Days/365.0),precision))*100/(round(ExtListPrice/quantity,precision)); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity*(Days/365.0),precision);
      
      
      }else{
      requestedDiscount=((round(ExtListPrice/quantity,precision))-round(line.hiddenProposedPrice_l,precision))*100/(round(ExtListPrice/quantity,precision)); 
      
      proposedPrice=round(line.hiddenProposedPrice_l*quantity,precision);
      
      }
     }
     
     sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");
    }
   sb5 = stringbuilder(sb5,line._document_number,"~hiddenProposedPrice_l~",String(-1),"|");  //Placed outside to set for all scenarios
  
  //Changes made as per VIPER-355  -  Added additional conditions to handle zero priced products based on license type or covered product
  if(final_price=="0" or final_price =="0.0000" or final_price =="0.0"){
   if(round(atof(final_price),0) == 0 and round(ExtListPrice,0)==0){
    if(licensetype=="Subscription" or coveredpdt<>"")
    {
     proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity*(Days/365.0),precision);
     requestedDiscount=0;
    }
    else{
     proposedPrice=round(line.proposedNetUnitPriceRequested_l*quantity,precision);
     requestedDiscount=0;
    }

   }
  }
  if(line._model_name == "")
  {
   if(atof(exch) <> 0){
    totalUSD= totalUSD + (proposedPrice/atof(exch));
   }
   total=total+round(proposedPrice,precision);
   if(coveredpdt <> ""){
    totalMaintenanceFee = totalMaintenanceFee + round(proposedPrice,precision);
    if(quoteType_t == "renewalQuote" and line.dropProduct_l == true){
     totalMaintenanceFee = totalMaintenanceFee - round(proposedPrice,precision);
    }
   }
   else{
    totalLicenseFee = totalLicenseFee + round(proposedPrice,precision);
    if(quoteType_t == "renewalQuote" and line.dropProduct_l == true){
     totalLicenseFee = totalLicenseFee - round(proposedPrice,precision);
    }
    //sb6=stringbuilder(sb6,line._document_number,"~totalFee_l~",string(round(proposedPrice,precision)),"|");
   }
   /*
   if(line.fulfillmentSet_l <> "" and line.fulfillmentSet_l == fulfillmentSet and coveredpdt <> ""){
    totalFee = totalFee + round(proposedPrice,precision);
    sb6=stringbuilder(sb6,string((atoi(line._document_number)-1)),"~totalFee_l~",string(totalFee),"|");
   }
   else{
    fulfillmentSet = line.fulfillmentSet_l;
    totalFee = round(proposedPrice,precision);
   }
   */
   //To Calculate Proposed Net Unit Price
   if(licensetype=="Subscription" or coveredpdt<>"")
   {
    
    TermsDays = 0.0;
    TermsDays=getdiffindays(StartDate,EndDate)+1.0;
    DivFactor=TermsDays/365.0;
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round((proposedPrice/min_qty)/DivFactor,precision)),"|");
    
   }
    
   else 
   {
    sb6=stringbuilder(sb6,line._document_number,"~proposedNetUnitPriceRequested_l~",string(round(proposedPrice/min_qty,precision)),"|");
    
    //output6=sbtostring(sb6);
    sb7=stringbuilder(sb7,line._document_number,"~proposedNetPriceRequestedHidden_ct~",string(round(proposedPrice/min_qty,precision)),"|");
    //output7=sbtostring(sb7);
   }
   if(requestedDiscount<=0 AND round(atof(final_price),4) == 0){
    requestedDiscount=0;
   }
   sb8=stringbuilder(sb8,line._document_number,"~requestedDiscount_l~",string(requestedDiscount),"|");
   sb9=stringbuilder(sb9,line._document_number,"~extProposedNetPriceRequested_l~",string(proposedPrice),"|");
   //output9=sbtostring(sb9);
   endtime=getcurrenttimeinmillis();
   logtime("proposed price block",endtime-starttime);
   // Adding changes for New Annual Renewal
//   sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,proposedPrice,line._document_number,line._part_number,line._model_name,line.contractEndDate_l,line.contractStartDate_l,line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));
   sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,proposedPrice,line._document_number,line._part_number,line._model_name,datetostr(EndDate) ,datetostr(StartDate),line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));    
   //print datetostr(EndDate);
   lineDiscount = atof(final_price) - proposedPrice/min_qty;
   if(atof(exch) <> 0) {
    sb10=stringbuilder(sb10,line._document_number,"~totalValueUSD~",string(proposedPrice/atof(exch)),"|");
    //output10=sbtostring(sb10);
   }
   sb11=stringbuilder(sb11,line._document_number,"~lineDiscountAmount_l~",string(lineDiscount),"|");
   //output11=sbtostring(sb11);
   sb12=stringbuilder(sb12,line._document_number,"~customDiscountValue_l~",string(requestedDiscount),"|", line._document_number, dlim, "unitMSRP_l", dlim, string(unitMSRP), dend, line._document_number, dlim, "uplift_l", dlim, string(upliftfactor*100), dend);
   //output12=sbtostring(sb12);
   param_proposed_net_unit_price_requested = proposedPrice/min_qty;
   extLineDiscount = ExtListPrice - proposedPrice;
   if(requestedDiscount<=0){
    extLineDiscount=0;
   }


   sb13=stringbuilder(sb13,line._document_number,"~extLineDiscountAmount_l~",string(extLineDiscount),"|");
   //output13=sbtostring(sb13);
   if(string(line.approverRecommendedNetUnitPrice_l) <> "")
   {
    param_approver_recc_net_unit_price = line.approverRecommendedNetUnitPrice_l;
    param_approver_ext_recc_net_unit_price = param_approver_recc_net_unit_price * min_qty;
   }
   sb14=stringbuilder(sb14,line._document_number,"~approverRecommendedExtNetPrice_l~",string(param_approver_ext_recc_net_unit_price),"|");
   //output14=sbtostring(sb14);
   sm1 = round(salesMinl_var,precision);
   sb15=stringbuilder(sb15,line._document_number,"~salesMin1_l~",string(sm1),"|");
   //output15=sbtostring(sb15);
   sm2 = round(salesMin2_var,precision);
   sb16=stringbuilder(sb16,line._document_number,"~salesMin2_l~",string(sm2),"|");
   //output16=sbtostring(sb16);
   sm3 = round(salesMin3_var,precision);
   sb17=stringbuilder(sb17,line._document_number,"~salesMin3_l~",string(sm3),"|");
   //output17=sbtostring(sb17);
   sb18=stringbuilder(sb18,line._document_number,"~_price_quantity~",string(min_qty),"|");
   //output18=sbtostring(sb18);
   sb18=stringbuilder(sb18,line._document_number,"~requestedQuantity_l~",string(min_qty),"|");
   //output18=sbtostring(sb18);

   if(Contract_no=="NA"){
    sb19=stringbuilder(sb19,line._document_number,"~contractNumber_l~","","|");
   }
   else
   {
    sb19=stringbuilder(sb19,line._document_number,"~contractNumber_l~",Contract_no,"|");
   }

   //output19=sbtostring(sb19); 

  }
  if(line.dropProduct_l == true)
  {
   sb20=stringbuilder(sb20,line._document_number,"~proposedNetUnitPriceRequested_l~",string(0),"|");
   //output20=sbtostring(sb20);
   sb21=stringbuilder(sb21,line._document_number,"~extProposedNetPriceRequested_l~",string(0),"|");
   //output21=sbtostring(sb21);

   // Adding changes for New Annual Renewal
   
//   sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,0.0,line._document_number,line._part_number,line._model_name,line.contractEndDate_l,line.contractStartDate_l,line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));
   sb9a=stringbuilder(sb9a,commerce.setLineItemDetailsConfig_brcm(line._line_item_comment,0.0,line._document_number,line._part_number,line._model_name,datetostr(EndDate),datetostr(StartDate),line.transactionTypeM_l,line.licenseType_l,line.coveredProduct_l));
   //output9a=sbtostring(sb9a);

   totalUSD = totalUSD - (proposedPrice/atof(exch));
   total=total-proposedPrice;
  }
  }

  //merge approval flag
  //Satyabrata Acharya; //VIPER-438 ; Satyabrata Acharya ; Adding the  code to make installed at fields editable;
   
    sb20=stringbuilder(sb20,line._document_number,"~installedAtCustomerNumber_l~",line.installedAtCustomerNumber_l,"|");
    sb23=stringbuilder(sb23,line._document_number,"~siteID_l~",line.siteID_l,"|");
    sb24=stringbuilder(sb24,line._document_number,"~siteIDStreetAddress_l~",line.siteIDStreetAddress_l,"|");
    sb25=stringbuilder(sb25,line._document_number,"~siteIDCityStateZip_l~",line.siteIDCityStateZip_l,"|");
    sb27=stringbuilder(sb27,line._document_number,"~siteIDZip_l~",line.siteIDZip_l,"|");
  //end of code
   

  flag = true;
  part=line._part_number;

  if(part <> ""  and line._part_number <> "Cust")
  {
   if(quoteType_t == "renewalQuote" and upper(line.transactionTypeM_l) <> "NEW"  and line.transactionTypeM_l <> "")
   {
    flag = true;
    sb1=stringbuilder(sb1,result,line._document_number, "~approvalFlag_l~", String(flag), "|");
    //result=sbtostring(sb1);
   }
   else
   {
    CustomerAccountArray = String[]{Customer,BillTo,EndCust};
    resultset=bmql("SELECT MPN,Item_Price FROM BRCM_Cust_Pricelist WHERE MPN= $part AND Customer_Account_No IN $CustomerAccountArray");
    for res1 in resultset
    {
     price = get(res1,"Item_Price");
     if(price <> "")
     {
      flag = false;
     }
    }
    if(flag == false)
    {
     if(requestedDiscount <> 0.0)
     {
      flag = true;
     }
    }
    if(flag == true)
    {
     if( line.noBid_l == true)
     {
      flag = false;
     }
    }
    if(flag and part == "Cust")
    {
     flag = false;
    }
    if(propPrice > 0 and atof(final_price) == 0)
    {
     flag = true;
    }
    sb1=stringbuilder(sb1,result,line._document_number, "~approvalFlag_l~", String(flag), "|");
    //result=sbtostring(sb1);
   }
   if((flag and propPrice < line.salesMin1_l) or (flag and propPrice > 0 and atof(final_price) == 0))
   {
    approveFlag = true;
   } 
   if(dDRFlag == false)
   {
    if(startswith(line.isDiscountable_l,"N"))
    {
     dDRFlag = true;
    }
    resultset = bmql("select Restricted from BRCM_Part_Master_Prc where MPN = $part");
    restFlag = "";
    for record in resultset 
    {
     restFlag = get(record,"Restricted");
    } 
    if(restFlag == "Y")
    {
     dDRFlag = true;
    }
   }
  }
  //end merge

}
 }
 
 sb = sbappend(sb,sb1,sb2,sb3,sb4,sb5,sb6,sb7,sb9, sb9a,sb8,sb10,sb11,sb12,sb13,sb14,sb15,sb16,sb17,sb19,sb18,sb20,sb21,sb29,sb30,sb31,sb32,sb23,sb24,sb25,sb27,result);
 result= sbtostring(sb);
 
}

//merge approval flag
if(NOT startswith(dealType_t,"bSN"))
{
 dDRFlag = false;
}
//BROCAD-5278
/*if(renewalFlag)
{
//BROCAD2-3504-BEGIN
 if(aRR_t >= 99.7)
//BROCAD2-3504-END
 {
  renewalFlag = false;
 }
}*/
if(capacityFlag and NOT capacityDeviation_t)
{
 capacityFlag = false;
}

//validation rule: Validate Support Types on Line Items; adithya
sb2=stringbuilder(result,"1~validateSupportTypesOnLineItemsFlag_t~",string(validateSupportTypesOnLineItemsFlag),"|");
result=sbtostring(sb2);

//validation rule: Validate Covered Products On Lines; adithya
coveredPartArray = keys(coveredProductDictionary);
resultSet = bmql("select MPN,Support_Required from BRCM_Part_Master_Ext where MPN IN $coveredPartArray");
countOfRecords = 0;
for each_record in resultSet
{
 countOfRecords = countOfRecords + 1;
 part_number = get(each_record,"MPN");
 put(coveredProductsFromTableDictionary,part_number,part_number);
}
noOfProducts = sizeofarray(coveredPartArray);
if(countOfRecords <> noOfProducts)
{
 sb=stringbuilder(sb,"1~validateCoveredProductsOnLinesFlag_t~","true","|");
}
else{
 sb=stringbuilder(sb,"1~validateCoveredProductsOnLinesFlag_t~","false","|");
}

//constrain : Constrain Education Line Items
if(find(QuoteDealType, searchString) >= 0)
{
 parentPartArray = keys(parentPartDictionary);
 yesLiteral = "Y";
 resultSet = bmql("select MPN,Support_Required from BRCM_Part_Master_Ext where MPN IN $parentPartArray and Support_Required = $yesLiteral");
 count = 0;
 for record in resultSet
 {
  count = count + 1;
 }
 if(count <> 0){
  validation="true";
 }
}

sb=stringbuilder(result,commerce.updateBillingSchedule2(totalMaintenanceFee, totalLicenseFee), "1" , dlim , "totalValueUSD_t" , dlim , string(totalUSD) , dend, "1" , dlim , "totalValueUSDFloat_t" , dlim ,string(totalUSD) , dend, "1" , dlim , "totalProposedNetPriceLC_t" , dlim , string(total) , dend, "1" , dlim , "totalProposedNetPriceUSD_t" , dlim , string(totalUSD) , dend, "1" , dlim , "totalProposedNetPriceUSDFloat_t" , dlim , string(totalUSD) , dend,"1~totalExtListPrice_t~",string(totalExtPrice),"|","1~errorLines_t~",errorLines,"|","1~constrainEducationLineItems_t~",validation,"|", "1~capacityApprovalFlag_t~", String(capacityFlag), "|", "1~lineApprovalFlag_t~", String(approveFlag), "|", "1~dDRFlag_t~", String(dDRflag), "|",  "1~getTotalLicenseFee_t~", String(totalLicenseFee), "|", "1~getTotalMaintanenceFee_t~", String(totalMaintenanceFee), "|","1~eStoreEDI_t~",eDIsymorder,"|","1~totalLineItems_t~",String(numberOfLineItems),"|");
//SYMINT-7850 - Begin -  06/05/2020 - setting the error line numbers to the attributes.
if(noPriorContractDataFlag)
{
 sbappend(sb,"1~errorLinesContractStatus_t~",errorLinesContractBogus,"|");
}
else
{
 sbappend(sb,"1~errorLinesContractStatus_t~",errorLinesContractStatus,"|");
}

//sbappend(sb,"1~errorLinesContractStatus_t~",errorLinesContractStatus,"|");
//SYMINT-7850 - END

//VIPER-780 start

sbappend(sb,"1~errorLineRenewalProducts_t~",errorLinesrenewalprod,"|");

//VIPER-780 END

//VIPER-958 start

sbappend(sb,"1~errorLineNewProducts_t~",errorLinesnewprod,"|");
sbappend(sb,"1~errorLineCapacityProducts_t~",errorLinescapacityprod,"|");


//VIPER-958 END
//VIPER-933 - Begin - setting the error variables with the line numbers.
sbappend(sb,"1~requestedDiscountErrorLines_t~",requestedDiscountError,"|");
//VIPER-933 - End
//VIPER-907 - Begin - setting prior contract status flags to the attributes
sbappend(sb,"1~noPriorContractDataFlag_t~",string(noPriorContractDataFlag),"|");
sbappend(sb,"1~priorContractExpiredFlag_t~",string(priorContractExpiredFlag),"|");
//VIPER-907 - End

result=sbtostring(sb);
//end merge
return result;