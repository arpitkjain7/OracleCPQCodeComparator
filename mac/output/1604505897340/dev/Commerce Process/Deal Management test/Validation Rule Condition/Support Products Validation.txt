/********************************************************************
Function Name: Validate Support Products
Description: This validation rule checks that whether the necessary support products are added for a line item
Date: 26 February 2019
User Story: UID-361
Author: Raghav 
/********************************************************************/
/*
partNumber = "";
recordCount = 0;
parentPartDictionary = Dict("integer");
supportPartDictionary = Dict("integer");
supportPartParentPartMap = Dict("integer");
coveredProductDictionary = Dict("integer");
keyValuePair = "";
savedValue = 0;
quantity = 0;
finalCheckFlag = false;
custString = "Cust";
if(quoteType_t <> "contractQuote" and (dealType_t == "bSN" or dealType_t == "bSNRenewal"))
{
 for line in transactionline
 {
  if(line.coveredProduct_l == "" and line._part_number <> "" and line.supportOptOut_l == false and line._part_number <> custString)
  {
   if(not containsKey(parentPartDictionary,line._part_number))
   {
    put(parentPartDictionary, line._part_number, line._price_quantity);
    
   }
   else
   {
    savedValue = get(parentPartDictionary,line._part_number);
    quantity = savedValue + line._price_quantity;
    put(parentPartDictionary, line._part_number, quantity);
    
   }
  }
  elif(line.coveredProduct_l <> "" and line._part_number <> "" and line._part_number <> custString)
  {
   if(not containsKey(supportPartDictionary,line._part_number))
   {
    put(supportPartDictionary, line._part_number, line._price_quantity);
    
   }
   else
   {
    savedValue = get(supportPartDictionary,line._part_number);
    quantity = savedValue + line._price_quantity;
    put(supportPartDictionary, line._part_number, quantity);
    
   }
   keyValuePair = line._part_number+"~"+line.coveredProduct_l;
   if(not containsKey(supportPartParentPartMap,keyValuePair))
   {
    put(supportPartParentPartMap, keyValuePair , line._price_quantity);
    
   }
   else
   {
    savedValue = get(supportPartParentPartMap,keyValuePair);
    quantity = savedValue + line._price_quantity;
    put(supportPartParentPartMap, keyValuePair, quantity);
    
   }
   if(not containsKey(coveredProductDictionary,line.coveredProduct_l))
   {
    put(coveredProductDictionary, line.coveredProduct_l , line._price_quantity);
    
   }
   else
   {
    savedValue = get(coveredProductDictionary,line.coveredProduct_l);
    quantity = savedValue + line._price_quantity;
    put(coveredProductDictionary, line.coveredProduct_l, quantity);
    
   }
  }
 }
 mapDictionaryKeys = keys(supportPartParentPartMap);
 retrievedKey = "";
 numberOfParentParts = 0;
 numberOfSupportParts = 0;
 parentPartKey = "";
 supportPartKey = "";

 parentPartArray = keys(parentPartDictionary);
 yesLiteral = "Y";
 resultSet = bmql("select MPN,Support_Required from BRCM_Part_Master_Ext where MPN IN $parentPartArray and Support_Required = $yesLiteral");
 countOfRecords = 0;
 for each_record in resultSet
 {
  countOfRecords = countOfRecords + 1;
 }
 if(countOfRecords == 0)
 {
  
  return false;
 }

 for eachKey in mapDictionaryKeys
 {
  supportPartCount = 0;
  parentPartCount = 0;
  retrievedKey = eachKey;
  splitResult = split(retrievedKey,"~");
  supportPartKey = splitResult[0];
  parentPartKey = splitResult[1];
  
  if(containsKey(supportPartDictionary,supportPartKey))
  {
   
   supportPartCount = get(supportPartDictionary,supportPartKey);
  }
  if(containsKey(parentPartDictionary,parentPartKey))
  {
   
   parentPartCount = get(parentPartDictionary,parentPartKey);
  }
  if(supportPartCount <> 0 and parentPartCount <> 0)
  {
   
   supportPartCount = supportPartCount-parentPartCount;
   if(supportPartCount < 0)
   {
    return true;
   }
   put(supportPartDictionary,supportPartKey,supportPartCount);
   
  }
  
 }

 if(countOfRecords <> 0 and sizeofarray(mapDictionaryKeys)==0)
 {
  
  return true;
 }
}*/
result=validateSupportProductsValidation_t;

return result;