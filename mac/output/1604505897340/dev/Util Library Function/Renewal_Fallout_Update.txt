/************************************************
/Rule Name: Renewal_Fallout_Update
/Description: This program is responsible for transferring all the contract lines that are processed over a particular run from RENEWAL_ASSETS table to RENEWAL_STAGING table
/Author: M Vamsi Krishna
/Creation Date: 04-May-2020
History:
 Date          Author            Comment 
 10/15/2020    M Vamsi   VIPER-1014 Enhance Automated Renewal program to address fallout report issues 
*/

startGroupID =  "";
endGroupID = "";
recordCount = 0;
source = "";
billToCustName = "";
billToCustNumber = "";
soldToCustName = "";
soldToCustNumber = "";
shipToCountry = "";
serialNumber = "";
contractNumber = "";
contractLineNumber = "";
shipDate = "";
serviceItem = "";
coveredItem = "";
coveredItemDesc = "";
productFamily = "";
eosDate = "";
unitPrice = "";
instOwnName = "";
instAddress1 = "";
instAddress2 = "";
instAddress3 = "";
instCity = "";
instCountry = "";
instPostalCode = "";
licenseType = "";
envType = "";
existingQty = "";
totQuantity = "";
specialMetricType = "";
metricQty = "";
licenseMetric = "";
expAnnualRenewal = "";
existingSupportType = "";
operatingUnit = "";
instanceIdentifier = "";
instOwnSiteNum = "";
instOwnCustNum = "";
licenseeAccountNumber = "";
entitlementStartDate = "";
entitlementEndDate = "";
classificationCode = "";
soldToAddress = "";
soldToAddress2 = "";
soldToCity = "";
soldToState = "";
soldToCountry = "";
soldToZip = "";
groupID = "";
transactionID = "";
opportunityID = "";
batchNumber = "";
triggeredBy = "";
quoteNumber = "";
renewalAllowed = "";
usernameFlagUpdate = "";
passwordFlagUpdate = "";
fileLocationFlagUpdate = "";
soapendpointFlagUpdate = "";
recordUpdateString = "";
batchNumber = "";
   
startGroupResults = bmql("select START_GRP_ID,Batch_Number from Renewal_Batch_Detail where Program_ID = 'Renewal Program 1'");
for startGroupIDResult in startGroupResults
{
 startGroupID = get(startGroupIDResult,"START_GRP_ID");
 batchNumber = get(startGroupIDResult,"Batch_Number");
}

endGroupResults = bmql("select END_GRP_ID from Renewal_Batch_Detail where Program_ID <> 'Adhoc_Job' and Batch_Number = $batchNumber ORDER BY END_GRP_ID desc");
for endGroupIDResult in endGroupResults
{
 endGroupID = get(endGroupIDResult,"END_GRP_ID");
 break;
}

if((NOT isnull(startGroupID) and trim(startGroupID) <> "") and (NOT isnull(endGroupID) and trim(endGroupID) <> "") and endGroupID >= startGroupID)
{
renewalAssetsResults = bmql("select * from RENEWAL_ASSETS where GROUP_ID >= $startGroupID and GROUP_ID <= $endGroupID");
print renewalAssetsResults;

 for results in renewalAssetsResults
 {
 source = get(results,"SOURCE");
 billToCustName = get(results,"BILL_TO_CUST_NAME");
 billToCustNumber = get(results,"BILL_TO_CUST_NUMBER");
 soldToCustName = get(results,"SOLD_TO_CUST_NAME");
 soldToCustNumber = get(results,"SOLD_TO_CUST_NUMBER");
 shipToCountry = get(results,"SHIP_TO_COUNTRY");
 serialNumber = get(results,"SERIAL_NUMBER");
 contractNumber = get(results,"CONTRACT_NUMBER");
 contractLineNumber = get(results,"CONTRACT_LINE_NUM");
 shipDate = get(results,"SHIP_DATE");
 serviceItem = get(results,"SERVICE_ITEM");
 coveredItem = get(results,"COVERED_ITEM");
 coveredItemDesc = get(results,"COVERED_ITEM_DESC");
 productFamily = get(results,"COVERED_PRDCT_FAMILY");
 eosDate = get(results,"EOS_DATE");
 unitPrice = get(results,"UNIT_PRICE");
 instOwnName = get(results,"INST_OWNER_NAME");
 instAddress1 = get(results,"INST_ADDR1");
 instAddress2 = get(results,"INST_ADDR2");
 instAddress3 = get(results,"INST_ADDR3");
 instCity = get(results,"INST_CITY");
 instCountry = get(results,"INST_COUNTRY");
 instPostalCode = get(results,"INST_POSTAL_CODE");
 licenseType = get(results,"LICENSE_TYPE");
 envType = get(results,"ENV_TYPE");
 existingQty = get(results,"EXISTING_QUANTITY");
 totQuantity = get(results,"TOT_QUANTITY");
 specialMetricType = get(results,"SPECIAL_METRIC_TYPE");
 metricQty = get(results,"METRIC_QUANTITY");
 licenseMetric = get(results,"LICENSE_METRIC");
 expAnnualRenewal = get(results,"EXP_ANNUAL_RENEWAL");
 existingSupportType = get(results,"EXISTING_SUPPORT_TYP");
 operatingUnit = get(results,"OPERATING_UNIT");
 instanceIdentifier = get(results,"INSTANCE_IDENTIFIER");
 instOwnSiteNum = get(results,"INST_OWN_SITE_NUM");
 instOwnCustNum = get(results,"INST_OWNER_CUST_NUM");
 licenseeAccountNumber = get(results,"LICENSEE_ACNT_NUM");
 entitlementStartDate = get(results,"ENTITLEMENT_STR_DT");
 entitlementEndDate = get(results,"ENTITLEMENT_EXP_DT");
 classificationCode = get(results,"CLASSIFICATION_CD");
 soldToAddress = get(results,"SOLD_TO_ADDRESS");
 soldToAddress2 = get(results,"SOLD_TO_ADDRESS_2");
 soldToCity = get(results,"SOLD_TO_CITY");
 soldToState = get(results,"SOLD_TO_STATE");
 soldToCountry = get(results,"SOLD_TO_COUNTRY");
 soldToZip = get(results,"SOLD_TO_ZIPCODE");
 groupID = get(results,"GROUP_ID");
 transactionID = get(results,"TRANSACTION_ID");
 opportunityID = get(results,"OPPORTUNITY_ID");
 batchNumber = get(results,"BATCH_NUMBER");
 triggeredBy = get(results,"TRIGGERED_BY");
 quoteNumber = get(results,"QUOTE_NUMBER");
 renewalAllowed = get(results,"RENEWAL_ALLOWED");
 
 if((trim(transactionID) == "" or isnull(transactionID)) and (trim(serviceItem) <> "" and NOT isnull(serviceItem)))
 {
  serviceItemResults = bmql("select * from BRCM_Part_Master where MPN = $serviceItem");
  count = 0;
  for serviceItemResult in serviceItemResults
  {
   count = count +1;
  }
  if(count == 0)
  {
   transactionID = "Part Number is Not Available in Parts Master Table";
  }
 }
 
 if((trim(transactionID) == "" or isnull(transactionID)) and (trim(coveredItem) <> "" and NOT isnull(coveredItem)))
 {
  serviceItemResults = bmql("select * from BRCM_Part_Master where MPN = $coveredItem");
  count = 0;
  for serviceItemResult in serviceItemResults
  {
   count = count +1;
  }
  if(count == 0)
  {
   transactionID = "Covered Item is Not Available in Parts Master Table";
  }
 }
 
 if(find(transactionID,"Problems creating SAAJ object model")>0)
 {
  transactionID = "Special character is present in one of the column values";
 }
 
 recordCount = recordCount + 1;
 
  recordUpdateString = recordUpdateString +"<bm:each_record>";
  recordUpdateString = recordUpdateString +"<bm:SOURCE>"+source+"</bm:SOURCE>";
  recordUpdateString = recordUpdateString +"<bm:BILL_TO_CUST_NAME>"+billToCustName+"</bm:BILL_TO_CUST_NAME>";
  recordUpdateString = recordUpdateString +"<bm:BILL_TO_CUST_NUMBER>"+billToCustNumber+"</bm:BILL_TO_CUST_NUMBER>";
  recordUpdateString = recordUpdateString +"<bm:SOLD_TO_CUST_NAME>"+soldToCustName+"</bm:SOLD_TO_CUST_NAME>";
  recordUpdateString = recordUpdateString +"<bm:SOLD_TO_CUST_NUMBER>"+soldToCustNumber+"</bm:SOLD_TO_CUST_NUMBER>";
  recordUpdateString = recordUpdateString +"<bm:SHIP_TO_COUNTRY>"+shipToCountry+"</bm:SHIP_TO_COUNTRY>";
  recordUpdateString = recordUpdateString +"<bm:SERIAL_NUMBER>"+serialNumber+"</bm:SERIAL_NUMBER>";
  recordUpdateString = recordUpdateString +"<bm:CONTRACT_NUMBER>"+contractNumber+"</bm:CONTRACT_NUMBER>";
  recordUpdateString = recordUpdateString +"<bm:CONTRACT_LINE_NUM>"+contractLineNumber+"</bm:CONTRACT_LINE_NUM>";
  recordUpdateString = recordUpdateString +"<bm:SHIP_DATE>"+shipDate+"</bm:SHIP_DATE>";
  recordUpdateString = recordUpdateString +"<bm:SERVICE_ITEM>"+serviceItem+"</bm:SERVICE_ITEM>";
  recordUpdateString = recordUpdateString +"<bm:COVERED_ITEM>"+coveredItem+"</bm:COVERED_ITEM>";
  recordUpdateString = recordUpdateString +"<bm:COVERED_ITEM_DESC>"+coveredItemDesc+"</bm:COVERED_ITEM_DESC>";
  recordUpdateString = recordUpdateString +"<bm:COVERED_PRDCT_FAMILY>"+productFamily+"</bm:COVERED_PRDCT_FAMILY>";
  recordUpdateString = recordUpdateString +"<bm:EOS_DATE>"+eosDate+"</bm:EOS_DATE>";
  recordUpdateString = recordUpdateString +"<bm:INST_OWNER_NAME>"+instOwnName+"</bm:INST_OWNER_NAME>";
  recordUpdateString = recordUpdateString +"<bm:INST_ADDR1>"+instAddress1+"</bm:INST_ADDR1>";
  recordUpdateString = recordUpdateString +"<bm:INST_ADDR2>"+instAddress2+"</bm:INST_ADDR2>";
  recordUpdateString = recordUpdateString +"<bm:INST_ADDR3>"+instAddress3+"</bm:INST_ADDR3>";
  recordUpdateString = recordUpdateString +"<bm:INST_CITY>"+instCity+"</bm:INST_CITY>";
  recordUpdateString = recordUpdateString +"<bm:INST_COUNTRY>"+instCountry+"</bm:INST_COUNTRY>";
  recordUpdateString = recordUpdateString +"<bm:INST_POSTAL_CODE>"+instPostalCode+"</bm:INST_POSTAL_CODE>";
  recordUpdateString = recordUpdateString +"<bm:LICENSE_TYPE>"+licenseType+"</bm:LICENSE_TYPE>";
  recordUpdateString = recordUpdateString +"<bm:ENV_TYPE>"+envType+"</bm:ENV_TYPE>";
  recordUpdateString = recordUpdateString +"<bm:SPECIAL_METRIC_TYPE>"+specialMetricType+"</bm:SPECIAL_METRIC_TYPE>";
  recordUpdateString = recordUpdateString +"<bm:LICENSE_METRIC>"+licenseMetric+"</bm:LICENSE_METRIC>";
  recordUpdateString = recordUpdateString +"<bm:EXP_ANNUAL_RENEWAL>"+expAnnualRenewal+"</bm:EXP_ANNUAL_RENEWAL>";
  recordUpdateString = recordUpdateString +"<bm:EXISTING_SUPPORT_TYP>"+existingSupportType+"</bm:EXISTING_SUPPORT_TYP>";
  recordUpdateString = recordUpdateString +"<bm:OPERATING_UNIT>"+operatingUnit+"</bm:OPERATING_UNIT>";
  recordUpdateString = recordUpdateString +"<bm:INSTANCE_IDENTIFIER>"+instanceIdentifier+"</bm:INSTANCE_IDENTIFIER>";
  recordUpdateString = recordUpdateString +"<bm:INST_OWN_SITE_NUM>"+instOwnSiteNum+"</bm:INST_OWN_SITE_NUM>";
  recordUpdateString = recordUpdateString +"<bm:INST_OWNER_CUST_NUM>"+instOwnCustNum+"</bm:INST_OWNER_CUST_NUM>";
  recordUpdateString = recordUpdateString +"<bm:LICENSEE_ACNT_NUM>"+licenseeAccountNumber+"</bm:LICENSEE_ACNT_NUM>";
  recordUpdateString = recordUpdateString +"<bm:ENTITLEMENT_STR_DT>"+entitlementStartDate+"</bm:ENTITLEMENT_STR_DT>";
  recordUpdateString = recordUpdateString +"<bm:ENTITLEMENT_EXP_DT>"+entitlementEndDate+"</bm:ENTITLEMENT_EXP_DT>";
  recordUpdateString = recordUpdateString +"<bm:CLASSIFICATION_CD>"+classificationCode+"</bm:CLASSIFICATION_CD>";
  recordUpdateString = recordUpdateString +"<bm:SOLD_TO_ADDRESS>"+soldToAddress+"</bm:SOLD_TO_ADDRESS>";
  recordUpdateString = recordUpdateString +"<bm:SOLD_TO_ADDRESS_2>"+soldToAddress2+"</bm:SOLD_TO_ADDRESS_2>";
  recordUpdateString = recordUpdateString +"<bm:SOLD_TO_CITY>"+soldToCity+"</bm:SOLD_TO_CITY>";
  recordUpdateString = recordUpdateString +"<bm:SOLD_TO_STATE>"+soldToState+"</bm:SOLD_TO_STATE>";
  recordUpdateString = recordUpdateString +"<bm:SOLD_TO_COUNTRY>"+soldToCountry+"</bm:SOLD_TO_COUNTRY>";
  recordUpdateString = recordUpdateString +"<bm:SOLD_TO_ZIPCODE>"+soldToZip+"</bm:SOLD_TO_ZIPCODE>";
  recordUpdateString = recordUpdateString +"<bm:TRANSACTION_ID>"+transactionID+"</bm:TRANSACTION_ID>";
  recordUpdateString = recordUpdateString +"<bm:OPPORTUNITY_ID>"+opportunityID+"</bm:OPPORTUNITY_ID>";
  recordUpdateString = recordUpdateString +"<bm:TRIGGERED_BY>"+triggeredBy+"</bm:TRIGGERED_BY>";
  recordUpdateString = recordUpdateString +"<bm:QUOTE_NUMBER>"+quoteNumber+"</bm:QUOTE_NUMBER>";
  recordUpdateString = recordUpdateString +"<bm:RENEWAL_ALLOWED>"+renewalAllowed+"</bm:RENEWAL_ALLOWED>";
  recordUpdateString = recordUpdateString +"<bm:EXISTING_QUANTITY>"+existingQty+"</bm:EXISTING_QUANTITY>";
  recordUpdateString = recordUpdateString +"<bm:TOT_QUANTITY>"+totQuantity+"</bm:TOT_QUANTITY>";
  recordUpdateString = recordUpdateString +"<bm:METRIC_QUANTITY>"+metricQty+"</bm:METRIC_QUANTITY>";
  recordUpdateString = recordUpdateString +"<bm:GROUP_ID>"+groupID+"</bm:GROUP_ID>";
  recordUpdateString = recordUpdateString +"<bm:BATCH_NUMBER>"+batchNumber+"</bm:BATCH_NUMBER>";
  recordUpdateString = recordUpdateString +"<bm:UNIT_PRICE>"+unitPrice+"</bm:UNIT_PRICE>";
  recordUpdateString = recordUpdateString +"</bm:each_record>";
  
  if(recordCount == 500)
  {
   renewalAssetUpdatePayload = dict("string");
       resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Fallouts_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
    put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
   defaultErrorMessage="";
   quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
   quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
   quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   
   response="";
   //Trigger the web service to update transaction ID or error message in entitlement table
   
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
   
   recordCount = 0;
   recordUpdateString = "";
  }
 }
 
 if(recordCount < 500)
  {
   renewalAssetUpdatePayload = dict("string");
       resultFlagUpdate = bmql("select Username,Password,File_Location,SoapEndpoint from INT_SYSTEM_DETAILS where System = 'Renewal_Fallouts_Update'");
  for flagUpdate in resultFlagUpdate
  {
   usernameFlagUpdate = get(flagUpdate,"Username");
   passwordFlagUpdate = get(flagUpdate,"Password");
   fileLocationFlagUpdate = get(flagUpdate,"File_Location");
   soapendpointFlagUpdate = get(flagUpdate,"SoapEndpoint");
  }
  put(renewalAssetUpdatePayload,"USERNAME", usernameFlagUpdate);
  put(renewalAssetUpdatePayload,"PASSWORD", passwordFlagUpdate);
    put(renewalAssetUpdatePayload,"forLoop", recordUpdateString);
  
   defaultErrorMessage="";
   quoteRequestRenewalFalgUpdate=applytemplate(fileLocationFlagUpdate,renewalAssetUpdatePayload,defaultErrorMessage);
   quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&lt;","<");
   quoteRequestRenewalFalgUpdate= replace(quoteRequestRenewalFalgUpdate,"&gt;",">");
   quoteRequestRenewalFalgUpdate = replace(quoteRequestRenewalFalgUpdate,"&quot;","\"");
   headersDict = dict("string"); 
   
   
   response="";
   //Trigger the web service to update transaction ID or error message in entitlement table
   
   response = urldatabypost(soapendpointFlagUpdate,quoteRequestRenewalFalgUpdate, "",headersDict,true);
   
   recordCount = 0;
   recordUpdateString = "";
  }
}
print startGroupID;
print endGroupID;

return "";