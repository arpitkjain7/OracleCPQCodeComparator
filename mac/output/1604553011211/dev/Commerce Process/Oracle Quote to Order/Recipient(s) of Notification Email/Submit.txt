//************************************************************************************************************
//** Description: To get the appropriate approver based on account type
//** 
//** Param:       Account type i.e. Core/Non-Core
//**
//** Return type: string
//**
//** History:     Date          Author          Comment 
//**              ------------- --------------- --------------------------------------------------------------
//**              02/04/2019                     Initial version
//************************************************************************************************************
//**              ------------- --------------- --------------------------------------------------------------
//**              03/04/2019                     Email ids identification based on Account type
//************************************************************************************************************

retString = "";

if(core_t == "ZCA_CORE"){
/* emailIds = "";
 result = bmql("Select Email_Id from Approval_PF_Mapping where User_Role = 'Core'");
 for each in result{
  emailIds = emailIds + get(each, "Email_Id") + ",";
 }
 if(emailIds <> "" and NOT (isnull(emailIds)) and emailIds <> " "){
  retString = substring(emailIds, 0, -1);
 }
 */
 if(dDROwner_t <> "" ){
 email = split(dDROwner_t,"(");
// print email;
 retString = substring(email[1],0,len(email[1])-1);
 }
}elif(core_t == "ZCA_NON_CORE"){
/* emailIds = "";
 result = bmql("Select Email_Id from Approval_PF_Mapping where User_Role = 'Non-Core'");
 for each in result{
  emailIds = emailIds + get(each, "Email_Id") + ",";
 }
 if(emailIds <> "" and NOT (isnull(emailIds)) and emailIds <> " "){
  retString = substring(emailIds, 0, -1);
 }*/
 retString = util.fetchGroupUserEmail_avg(quoteOwnerRegion_t);
}

return retString;